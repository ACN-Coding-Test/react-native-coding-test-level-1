{"ast":null,"code":"\n\nfunction murmurhash2_32_gc(str, seed) {\n  var l = str.length,\n    h = seed ^ l,\n    i = 0,\n    k;\n  while (l >= 4) {\n    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;\n    k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n    k ^= k >>> 24;\n    k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n    h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16) ^ k;\n    l -= 4;\n    ++i;\n  }\n  switch (l) {\n    case 3:\n      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;\n    case 2:\n      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;\n    case 1:\n      h ^= str.charCodeAt(i) & 0xff;\n      h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n  }\n  h ^= h >>> 13;\n  h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n  h ^= h >>> 15;\n  return h >>> 0;\n}\nvar hash = function hash(str) {\n  return murmurhash2_32_gc(str, 1).toString(36);\n};\nexport default hash;","map":{"version":3,"sources":["hash.ts"],"names":["murmurhash2_32_gc","str","seed","l","length","h","i","k","charCodeAt","hash","toString"],"mappings":";;AAeA,SAASA,iBAAT,CAA2BC,GAA3B,EAAwCC,IAAxC,EAAsD;EACpD,IAAIC,CAAC,GAAGF,GAAG,CAACG,MAAZ;IACEC,CAAC,GAAGH,IAAI,GAAGC,CADb;IAEEG,CAAC,GAAG,CAFN;IAGEC,CAHF;EAKA,OAAOJ,CAAC,IAAI,CAAZ,EAAe;IACbI,CAAC,GACEN,GAAG,CAACO,UAAJP,CAAeK,CAAfL,CAAAA,GAAoB,IAArB,GACC,CAACA,GAAG,CAACO,UAAJP,CAAe,EAAEK,CAAjBL,CAAAA,GAAsB,IAAvB,KAAgC,CADjC,GAEC,CAACA,GAAG,CAACO,UAAJP,CAAe,EAAEK,CAAjBL,CAAAA,GAAsB,IAAvB,KAAgC,EAFjC,GAGC,CAACA,GAAG,CAACO,UAAJP,CAAe,EAAEK,CAAjBL,CAAAA,GAAsB,IAAvB,KAAgC,EAJnCM;IAKAA,CAAC,GACC,CAACA,CAAC,GAAG,MAAL,IAAe,UAAf,IAA6B,CAAE,CAACA,CAAC,KAAK,EAAP,IAAa,UAAd,GAA4B,MAA7B,KAAwC,EAArE,CADFA;IAEAA,CAAC,IAAIA,CAAC,KAAK,EAAXA;IACAA,CAAC,GACC,CAACA,CAAC,GAAG,MAAL,IAAe,UAAf,IAA6B,CAAE,CAACA,CAAC,KAAK,EAAP,IAAa,UAAd,GAA4B,MAA7B,KAAwC,EAArE,CADFA;IAEAF,CAAC,GACE,CAACA,CAAC,GAAG,MAAL,IAAe,UAAf,IACE,CAAE,CAACA,CAAC,KAAK,EAAP,IAAa,UAAd,GAA4B,MAA7B,KAAwC,EAD1C,CAAD,GAEAE,CAHFF;IAIAF,CAAC,IAAI,CAALA;IACA,EAAEG,CAAF;EACD;EAED,QAAQH,CAAR;IACE,KAAK,CAAL;MACEE,CAAC,IAAI,CAACJ,GAAG,CAACO,UAAJP,CAAeK,CAAC,GAAG,CAAnBL,CAAAA,GAAwB,IAAzB,KAAkC,EAAvCI;IAEF,KAAK,CAAL;MACEA,CAAC,IAAI,CAACJ,GAAG,CAACO,UAAJP,CAAeK,CAAC,GAAG,CAAnBL,CAAAA,GAAwB,IAAzB,KAAkC,CAAvCI;IAEF,KAAK,CAAL;MACEA,CAAC,IAAIJ,GAAG,CAACO,UAAJP,CAAeK,CAAfL,CAAAA,GAAoB,IAAzBI;MACAA,CAAC,GACC,CAACA,CAAC,GAAG,MAAL,IAAe,UAAf,IACC,CAAE,CAACA,CAAC,KAAK,EAAP,IAAa,UAAd,GAA4B,MAA7B,KAAwC,EADzC,CADFA;EAAAA;EAKJA,CAAC,IAAIA,CAAC,KAAK,EAAXA;EACAA,CAAC,GAAG,CAACA,CAAC,GAAG,MAAL,IAAe,UAAf,IAA6B,CAAE,CAACA,CAAC,KAAK,EAAP,IAAa,UAAd,GAA4B,MAA7B,KAAwC,EAArE,CAAJA;EACAA,CAAC,IAAIA,CAAC,KAAK,EAAXA;EACA,OAAOA,CAAC,KAAK,CAAb;AACD;AAED,IAAMI,IAAI,GAAG,SAASA,IAAT,CAAcR,GAAd,EAA2B;EACtC,OAAOD,iBAAiB,CAACC,GAAD,EAAM,CAAN,CAAjBD,CAA0BU,QAA1BV,CAAmC,EAAnCA,CAAP;AACD,CAFD;AAIA,eAAeS,IAAf","sourcesContent":["/* eslint-disable */\n//@ts-nocheck\n// This hash function is taken from react native web\n/**\n * JS Implementation of MurmurHash2\n *\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/murmurhash-js\n * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n * @see http://sites.google.com/site/murmurhash/\n *\n * @param {string} str ASCII only\n * @param {number} seed Positive integer only\n * @return {number} 32-bit positive integer hash\n */\nfunction murmurhash2_32_gc(str: string, seed: number) {\n  var l = str.length,\n    h = seed ^ l,\n    i = 0,\n    k;\n\n  while (l >= 4) {\n    k =\n      (str.charCodeAt(i) & 0xff) |\n      ((str.charCodeAt(++i) & 0xff) << 8) |\n      ((str.charCodeAt(++i) & 0xff) << 16) |\n      ((str.charCodeAt(++i) & 0xff) << 24);\n    k =\n      (k & 0xffff) * 0x5bd1e995 + ((((k >>> 16) * 0x5bd1e995) & 0xffff) << 16);\n    k ^= k >>> 24;\n    k =\n      (k & 0xffff) * 0x5bd1e995 + ((((k >>> 16) * 0x5bd1e995) & 0xffff) << 16);\n    h =\n      ((h & 0xffff) * 0x5bd1e995 +\n        ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16)) ^\n      k;\n    l -= 4;\n    ++i;\n  }\n\n  switch (l) {\n    case 3:\n      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;\n\n    case 2:\n      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;\n\n    case 1:\n      h ^= str.charCodeAt(i) & 0xff;\n      h =\n        (h & 0xffff) * 0x5bd1e995 +\n        ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16);\n  }\n\n  h ^= h >>> 13;\n  h = (h & 0xffff) * 0x5bd1e995 + ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16);\n  h ^= h >>> 15;\n  return h >>> 0;\n}\n\nconst hash = function hash(str: string) {\n  return murmurhash2_32_gc(str, 1).toString(36);\n};\n\nexport default hash;\n"]},"metadata":{},"sourceType":"module"}