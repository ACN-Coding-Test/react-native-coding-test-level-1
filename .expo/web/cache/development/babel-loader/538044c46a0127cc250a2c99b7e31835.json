{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"isDisabled\"],\n  _excluded2 = [\"numberInputValue\", \"step\", \"max\", \"handleChange\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport { NBStepper } from \"./NumberInputStepper\";\nimport { NumberInputContext } from \"./Context\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar NumberIncrementStepper = function NumberIncrementStepper(_ref, ref) {\n  var children = _ref.children,\n    pIsDisabled = _ref.isDisabled,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _React$useContext = React.useContext(NumberInputContext),\n    _React$useContext$num = _React$useContext.numberInputValue,\n    numberInputValue = _React$useContext$num === void 0 ? 0 : _React$useContext$num,\n    _React$useContext$ste = _React$useContext.step,\n    step = _React$useContext$ste === void 0 ? 1 : _React$useContext$ste,\n    _React$useContext$max = _React$useContext.max,\n    max = _React$useContext$max === void 0 ? +Infinity : _React$useContext$max,\n    handleChange = _React$useContext.handleChange,\n    context = _objectWithoutProperties(_React$useContext, _excluded2);\n  var isDisabled = pIsDisabled || context.isDisabled;\n  var pressHandler = function pressHandler() {\n    handleChange && handleChange(numberInputValue + step);\n  };\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return React.createElement(NBStepper, _extends({\n    isIncrement: true,\n    isDisabled: isDisabled,\n    pressHandler: pressHandler,\n    disablitityCheck: numberInputValue + step > max\n  }, props, {\n    ref: ref\n  }), children);\n};\nexport default React.memo(React.forwardRef(NumberIncrementStepper));","map":{"version":3,"sources":["NumberIncrementStepper.tsx"],"names":["React","NBStepper","NumberInputContext","useHasResponsiveProps","NumberIncrementStepper","children","isDisabled","pIsDisabled","props","ref","numberInputValue","step","max","Infinity","handleChange","context","useContext","pressHandler","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,SAAT;AACA,SAASC,kBAAT;AACA,SAASC,qBAAT;AAEA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAsB,OAE1BK,GAF6B,EAG1B;EAAA,IAFDJ,QAAF,QAAEA,QAAF;IAAwBE,WAAxB,QAAYD,UAAU;IAAkBE,KAAAA;EAGxC,wBAMyBR,KAAK,CAACgB,UAANhB,CAAiBE,kBAAjBF,CANzB;IAAA,0CACEU,gBAAgB;IAAhBA,gBAAgB,sCAAG,CADf;IAAA,0CAEJC,IAAI;IAAJA,IAAI,sCAAG,CAFH;IAAA,0CAGJC,GAAG;IAAHA,GAAG,sCAAG,CAACC,QAHH;IAIJC,YAJI,qBAIJA,YAJI;IAKDC,OAAAA;EAGL,IAAMT,UAAU,GAAGC,WAAW,IAAIQ,OAAO,CAACT,UAA1C;EACA,IAAMW,YAAY,GAAG,SAAfA,YAAY,GAAS;IACzBH,YAAY,IAAIA,YAAY,CAACJ,gBAAgB,GAAGC,IAApB,CAA5BG;EACD,CAZE;;EAcH,IAAIX,qBAAqB,CAACK,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EACD,OACE,KAAA,CAAA,aAAA,CAAC,SAAD,EAAA,QAAA,CAAA;IACE,WAAW,EAAA,IADb;IAEE,UAAU,EAAEF,UAFd;IAGE,YAAY,EAAEW,YAHhB;IAIE,gBAAgB,EAAEP,gBAAgB,GAAGC,IAAnBD,GAA0BE;EAJ9C,CAAA,EAKMJ,KALN,EAAA;IAME,GAAG,EAAEC;EANP,CAAA,CAAA,EAQGJ,QARH,CADF;AAYD,CAhCD;AAiCA,eAAeL,KAAK,CAACkB,IAANlB,CAAWA,KAAK,CAACmB,UAANnB,CAAiBI,sBAAjBJ,CAAXA,CAAf","sourcesContent":["import React from 'react';\nimport type { INumberInputContext, INumberInputStepperProps } from './types';\nimport { NBStepper } from './NumberInputStepper';\nimport { NumberInputContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst NumberIncrementStepper = (\n  { children, isDisabled: pIsDisabled, ...props }: INumberInputStepperProps,\n  ref?: any\n) => {\n  const {\n    numberInputValue = 0,\n    step = 1,\n    max = +Infinity,\n    handleChange,\n    ...context\n  }: INumberInputContext = React.useContext(NumberInputContext);\n\n  const isDisabled = pIsDisabled || context.isDisabled;\n  const pressHandler = () => {\n    handleChange && handleChange(numberInputValue + step);\n  };\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <NBStepper\n      isIncrement\n      isDisabled={isDisabled}\n      pressHandler={pressHandler}\n      disablitityCheck={numberInputValue + step > max}\n      {...props}\n      ref={ref}\n    >\n      {children}\n    </NBStepper>\n  );\n};\nexport default React.memo(React.forwardRef(NumberIncrementStepper));\n"]},"metadata":{},"sourceType":"module"}