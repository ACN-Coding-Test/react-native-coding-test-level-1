{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"id\", \"initialRouteName\", \"children\", \"screenListeners\", \"screenOptions\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { createNavigatorFactory, StackActions, StackRouter, useNavigationBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\nimport StackView from \"../views/Stack/StackView\";\nfunction StackNavigator(_ref) {\n  var id = _ref.id,\n    initialRouteName = _ref.initialRouteName,\n    children = _ref.children,\n    screenListeners = _ref.screenListeners,\n    screenOptions = _ref.screenOptions,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var mode = rest.mode;\n  warnOnce(mode != null, \"Stack Navigator: 'mode=\\\"\" + mode + \"\\\"' is deprecated. Use 'presentation: \\\"\" + mode + \"\\\"' in 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/stack-navigator#presentation for more details.\");\n  var headerMode = rest.headerMode;\n  warnOnce(headerMode === 'none', \"Stack Navigator: 'headerMode=\\\"none\\\"' is deprecated. Use 'headerShown: false' in 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#headershown for more details.\");\n  warnOnce(headerMode != null && headerMode !== 'none', \"Stack Navigator: 'headerMode' is moved to 'options'. Moved it to 'screenOptions' to keep current behavior.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#headermode for more details.\");\n  var keyboardHandlingEnabled = rest.keyboardHandlingEnabled;\n  warnOnce(keyboardHandlingEnabled !== undefined, \"Stack Navigator: 'keyboardHandlingEnabled' is moved to 'options'. Moved it to 'screenOptions' to keep current behavior.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#keyboardhandlingenabled for more details.\");\n  var defaultScreenOptions = {\n    presentation: mode,\n    headerShown: headerMode ? headerMode !== 'none' : true,\n    headerMode: headerMode && headerMode !== 'none' ? headerMode : undefined,\n    keyboardHandlingEnabled: keyboardHandlingEnabled\n  };\n  var _useNavigationBuilder = useNavigationBuilder(StackRouter, {\n      id: id,\n      initialRouteName: initialRouteName,\n      children: children,\n      screenListeners: screenListeners,\n      screenOptions: screenOptions,\n      defaultScreenOptions: defaultScreenOptions\n    }),\n    state = _useNavigationBuilder.state,\n    descriptors = _useNavigationBuilder.descriptors,\n    navigation = _useNavigationBuilder.navigation,\n    NavigationContent = _useNavigationBuilder.NavigationContent;\n  React.useEffect(function () {\n    var _navigation$addListen;\n    return (_navigation$addListen = navigation.addListener) === null || _navigation$addListen === void 0 ? void 0 : _navigation$addListen.call(navigation, 'tabPress', function (e) {\n      var isFocused = navigation.isFocused();\n      requestAnimationFrame(function () {\n        if (state.index > 0 && isFocused && !e.defaultPrevented) {\n          navigation.dispatch(_objectSpread(_objectSpread({}, StackActions.popToTop()), {}, {\n            target: state.key\n          }));\n        }\n      });\n    });\n  }, [navigation, state.index, state.key]);\n  return React.createElement(NavigationContent, null, React.createElement(StackView, _extends({}, rest, {\n    state: state,\n    descriptors: descriptors,\n    navigation: navigation\n  })));\n}\nexport default createNavigatorFactory(StackNavigator);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAAA,SACEA,sBAAsB,EAKtBC,YAAY,EAEZC,WAAW,EAEXC,oBAAoB,QACf,0BAA0B;AACjC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,QAAQ,MAAM,WAAW;AAQhC,OAAOC,SAAS;AAWhB,SAASC,cAAc,OAOb;EAAA,IANRC,EAAE,GAMIC,KANND,EAAE;IACFE,gBAAgB,GAKVD,KALNC,gBAAgB;IAChBC,QAAQ,GAIFF,KAJNE,QAAQ;IACRC,eAAe,GAGTH,KAHNG,eAAe;IACfC,aAAa,GAEPJ,KAFNI,aAAa;IACVC,gCACGL;EAEN,IAAMM,IAAI,GAAGD,IAAI,CAACC,IAAoC;EAEtDV,QAAQ,CACNU,IAAI,IAAI,IAAI,gCACeA,IAAK,gDAAwCA,IAAK,4HAC9E;EAGD,IAAMC,UAAU,GAAGF,IAAI,CAACE,UAAkD;EAE1EX,QAAQ,CACNW,UAAU,KAAK,MAAM,sMAEtB;EAEDX,QAAQ,CACNW,UAAU,IAAI,IAAI,IAAIA,UAAU,KAAK,MAAM,qMAE5C;EAGD,IAAMC,uBAAuB,GAAGH,IAAI,CAACG,uBAAuB;EAE5DZ,QAAQ,CACNY,uBAAuB,KAAKC,SAAS,+NAEtC;EAED,IAAMC,oBAA4C,GAAG;IACnDC,YAAY,EAAEL,IAAI;IAClBM,WAAW,EAAEL,UAAU,GAAGA,UAAU,KAAK,MAAM,GAAG,IAAI;IACtDA,UAAU,EAAEA,UAAU,IAAIA,UAAU,KAAK,MAAM,GAAGA,UAAU,GAAGE,SAAS;IACxED;EACF,CAAC;EAED,4BACEd,oBAAoB,CAMlBD,WAAW,EAAE;MACbM,EAAE,EAAFA,EAAE;MACFE,gBAAgB,EAAhBA,gBAAgB;MAChBC,QAAQ,EAARA,QAAQ;MACRC,eAAe,EAAfA,eAAe;MACfC,aAAa,EAAbA,aAAa;MACbM;IACF,CAAC,CAAC;IAdIG,KAAK,yBAALA,KAAK;IAAEC,WAAW,yBAAXA,WAAW;IAAEC,UAAU,yBAAVA,UAAU;IAAEC;EAgBxCrB,KAAK,CAACsB,SAAS,CACb;IAAA;IAAA,OACE,yBACAF,UAAU,CAACG,WAAW,0DAAtBC,qCAAU,EAAe,UAAU,EAAGC,WAAC,EAAK;MAC1C,IAAMC,SAAS,GAAGN,UAAU,CAACM,SAAS,EAAE;MAIxCC,qBAAqB,CAAC,YAAM;QAC1B,IACET,KAAK,CAACU,KAAK,GAAG,CAAC,IACfF,SAAS,IACT,CAAED,CAAC,CAA2CI,gBAAgB,EAC9D;UAGAT,UAAU,CAACU,QAAQ,iCACdjC,YAAY,CAACkC,QAAQ,EAAE;YAC1BC,MAAM,EAAEd,KAAK,CAACe;UAAAA,GACd;QACJ;MACF,CAAC,CAAC;IACJ,CAAC;EAAC,GACJ,CAACb,UAAU,EAAEF,KAAK,CAACU,KAAK,EAAEV,KAAK,CAACe,GAAG,CAAC,CACrC;EAED,OACEjC,oBAACqB,iBAAiB,QAChBrB,oBAACE,SAAS,eACJQ,IAAI;IACRQ,KAAK,EAAEA,KAAM;IACbC,WAAW,EAAEA,WAAY;IACzBC,UAAU,EAAEA;EAAW,GACvB,CACgB;AAExB;AAEA,eAAexB,sBAAsB,CAKnCO,cAAc,CAAC","names":["createNavigatorFactory","StackActions","StackRouter","useNavigationBuilder","React","warnOnce","StackView","StackNavigator","id","_ref","initialRouteName","children","screenListeners","screenOptions","rest","mode","headerMode","keyboardHandlingEnabled","undefined","defaultScreenOptions","presentation","headerShown","state","descriptors","navigation","NavigationContent","useEffect","addListener","_navigation$addListen","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","popToTop","target","key"],"sources":["C:\\Users\\sarah.anis.ismail\\OneDrive - Accenture\\Documents\\React Native\\react-native-coding-test-level-1\\node_modules\\@react-navigation\\stack\\src\\navigators\\createStackNavigator.tsx"],"sourcesContent":["import {\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  EventArg,\n  ParamListBase,\n  StackActionHelpers,\n  StackActions,\n  StackNavigationState,\n  StackRouter,\n  StackRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\n\nimport type {\n  StackHeaderMode,\n  StackNavigationConfig,\n  StackNavigationEventMap,\n  StackNavigationOptions,\n} from '../types';\nimport StackView from '../views/Stack/StackView';\n\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  StackNavigationState<ParamListBase>,\n  StackNavigationOptions,\n  StackNavigationEventMap\n> &\n  StackRouterOptions &\n  StackNavigationConfig;\n\nfunction StackNavigator({\n  id,\n  initialRouteName,\n  children,\n  screenListeners,\n  screenOptions,\n  ...rest\n}: Props) {\n  // @ts-expect-error: mode is deprecated\n  const mode = rest.mode as 'card' | 'modal' | undefined;\n\n  warnOnce(\n    mode != null,\n    `Stack Navigator: 'mode=\"${mode}\"' is deprecated. Use 'presentation: \"${mode}\"' in 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/stack-navigator#presentation for more details.`\n  );\n\n  // @ts-expect-error: headerMode='none' is deprecated\n  const headerMode = rest.headerMode as StackHeaderMode | 'none' | undefined;\n\n  warnOnce(\n    headerMode === 'none',\n    `Stack Navigator: 'headerMode=\"none\"' is deprecated. Use 'headerShown: false' in 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#headershown for more details.`\n  );\n\n  warnOnce(\n    headerMode != null && headerMode !== 'none',\n    `Stack Navigator: 'headerMode' is moved to 'options'. Moved it to 'screenOptions' to keep current behavior.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#headermode for more details.`\n  );\n\n  // @ts-expect-error: headerMode='none' is deprecated\n  const keyboardHandlingEnabled = rest.keyboardHandlingEnabled;\n\n  warnOnce(\n    keyboardHandlingEnabled !== undefined,\n    `Stack Navigator: 'keyboardHandlingEnabled' is moved to 'options'. Moved it to 'screenOptions' to keep current behavior.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#keyboardhandlingenabled for more details.`\n  );\n\n  const defaultScreenOptions: StackNavigationOptions = {\n    presentation: mode,\n    headerShown: headerMode ? headerMode !== 'none' : true,\n    headerMode: headerMode && headerMode !== 'none' ? headerMode : undefined,\n    keyboardHandlingEnabled,\n  };\n\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      StackNavigationState<ParamListBase>,\n      StackRouterOptions,\n      StackActionHelpers<ParamListBase>,\n      StackNavigationOptions,\n      StackNavigationEventMap\n    >(StackRouter, {\n      id,\n      initialRouteName,\n      children,\n      screenListeners,\n      screenOptions,\n      defaultScreenOptions,\n    });\n\n  React.useEffect(\n    () =>\n      // @ts-expect-error: there may not be a tab navigator in parent\n      navigation.addListener?.('tabPress', (e) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as unknown as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <NavigationContent>\n      <StackView\n        {...rest}\n        state={state}\n        descriptors={descriptors}\n        navigation={navigation}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState<ParamListBase>,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n  typeof StackNavigator\n>(StackNavigator);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}