{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as queryString from 'query-string';\nimport fromEntries from \"./fromEntries\";\nimport validatePathConfig from \"./validatePathConfig\";\nvar getActiveRoute = function getActiveRoute(state) {\n  var route = typeof state.index === 'number' ? state.routes[state.index] : state.routes[state.routes.length - 1];\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n  return route;\n};\n\nexport default function getPathFromState(state, options) {\n  if (state == null) {\n    throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");\n  }\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  var configs = options !== null && options !== void 0 && options.screens ? createNormalizedConfigs(options === null || options === void 0 ? void 0 : options.screens) : {};\n  var path = '/';\n  var current = state;\n  var allParams = {};\n  var _loop = function _loop() {\n    var index = typeof current.index === 'number' ? current.index : 0;\n    var route = current.routes[index];\n    var pattern = void 0;\n    var focusedParams = void 0;\n    var focusedRoute = getActiveRoute(state);\n    var currentOptions = configs;\n\n    var nestedRouteNames = [];\n    var hasNext = true;\n    while (route.name in currentOptions && hasNext) {\n      pattern = currentOptions[route.name].pattern;\n      nestedRouteNames.push(route.name);\n      if (route.params) {\n        (function () {\n          var stringify = (_currentOptions$route = currentOptions[route.name]) === null || _currentOptions$route === void 0 ? void 0 : _currentOptions$route.stringify;\n          var currentParams = fromEntries(Object.entries(route.params).map(function (_ref) {\n            var _ref3 = _slicedToArray(_ref, 2),\n              key = _ref3[0],\n              value = _ref3[1];\n            return [key, stringify !== null && stringify !== void 0 && stringify[key] ? stringify[key](value) : String(value)];\n          }));\n          if (pattern) {\n            _extends(allParams, currentParams);\n          }\n          if (focusedRoute === route) {\n            focusedParams = _objectSpread({}, currentParams);\n            (_pattern = pattern) === null || _pattern === void 0 ? void 0 : _pattern.split('/').filter(function (p) {\n              return p.startsWith(':');\n            }).forEach(function (p) {\n              var name = getParamName(p);\n\n              if (focusedParams) {\n                delete focusedParams[name];\n              }\n            });\n          }\n        })();\n      }\n\n      if (!currentOptions[route.name].screens || route.state === undefined) {\n        hasNext = false;\n      } else {\n        index = typeof route.state.index === 'number' ? route.state.index : route.state.routes.length - 1;\n        var nextRoute = route.state.routes[index];\n        var nestedConfig = currentOptions[route.name].screens;\n\n        if (nestedConfig && nextRoute.name in nestedConfig) {\n          route = nextRoute;\n          currentOptions = nestedConfig;\n        } else {\n          hasNext = false;\n        }\n      }\n    }\n    if (pattern === undefined) {\n      pattern = nestedRouteNames.join('/');\n    }\n    if (currentOptions[route.name] !== undefined) {\n      path += pattern.split('/').map(function (p) {\n        var name = getParamName(p);\n\n        if (p === '*') {\n          return route.name;\n        }\n\n        if (p.startsWith(':')) {\n          var value = allParams[name];\n          if (value === undefined && p.endsWith('?')) {\n            return '';\n          }\n          return encodeURIComponent(value);\n        }\n        return encodeURIComponent(p);\n      }).join('/');\n    } else {\n      path += encodeURIComponent(route.name);\n    }\n    if (!focusedParams) {\n      focusedParams = focusedRoute.params;\n    }\n    if (route.state) {\n      path += '/';\n    } else if (focusedParams) {\n      for (var param in focusedParams) {\n        if (focusedParams[param] === 'undefined') {\n          delete focusedParams[param];\n        }\n      }\n      var query = queryString.stringify(focusedParams, {\n        sort: false\n      });\n      if (query) {\n        path += \"?\" + query;\n      }\n    }\n    current = route.state;\n  };\n  while (current) {\n    var _currentOptions$route;\n    var _pattern;\n    _loop();\n  }\n\n  path = path.replace(/\\/+/g, '/');\n  path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n  return path;\n}\nvar getParamName = function getParamName(pattern) {\n  return pattern.replace(/^:/, '').replace(/\\?$/, '');\n};\nvar joinPaths = function joinPaths() {\n  var _ref4;\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n  return (_ref4 = []).concat.apply(_ref4, _toConsumableArray(paths.map(function (p) {\n    return p.split('/');\n  }))).filter(Boolean).join('/');\n};\nvar createConfigItem = function createConfigItem(config, parentPattern) {\n  var _pattern2;\n  if (typeof config === 'string') {\n    var _pattern3 = parentPattern ? joinPaths(parentPattern, config) : config;\n    return {\n      pattern: _pattern3\n    };\n  }\n\n  var pattern;\n  if (config.exact && config.path === undefined) {\n    throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n  }\n  pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n  var screens = config.screens ? createNormalizedConfigs(config.screens, pattern) : undefined;\n  return {\n    pattern: (_pattern2 = pattern) === null || _pattern2 === void 0 ? void 0 : _pattern2.split('/').filter(Boolean).join('/'),\n    stringify: config.stringify,\n    screens: screens\n  };\n};\nvar createNormalizedConfigs = function createNormalizedConfigs(options, pattern) {\n  return fromEntries(Object.entries(options).map(function (_ref2) {\n    var _ref5 = _slicedToArray(_ref2, 2),\n      name = _ref5[0],\n      c = _ref5[1];\n    var result = createConfigItem(c, pattern);\n    return [name, result];\n  }));\n};","map":{"version":3,"sources":["getPathFromState.tsx"],"names":["queryString","fromEntries","validatePathConfig","getActiveRoute","state","route","index","routes","length","getPathFromState","options","Error","configs","screens","createNormalizedConfigs","path","current","allParams","pattern","focusedParams","focusedRoute","currentOptions","nestedRouteNames","hasNext","name","push","params","stringify","currentParams","entries","map","key","value","String","Object","split","filter","p","startsWith","forEach","getParamName","undefined","nextRoute","nestedConfig","join","endsWith","encodeURIComponent","param","query","sort","replace","joinPaths","paths","concat","Boolean","createConfigItem","config","parentPattern","exact","c","result"],"mappings":"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","sourcesContent":["import type {\n  NavigationState,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as queryString from 'query-string';\n\nimport fromEntries from './fromEntries';\nimport type { PathConfig, PathConfigMap } from './types';\nimport validatePathConfig from './validatePathConfig';\n\ntype Options<ParamList> = {\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype State = NavigationState | Omit<PartialState<NavigationState>, 'stale'>;\n\ntype StringifyConfig = Record<string, (value: any) => string>;\n\ntype ConfigItem = {\n  pattern?: string;\n  stringify?: StringifyConfig;\n  screens?: Record<string, ConfigItem>;\n};\n\nconst getActiveRoute = (state: State): { name: string; params?: object } => {\n  const route =\n    typeof state.index === 'number'\n      ? state.routes[state.index]\n      : state.routes[state.routes.length - 1];\n\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n\n  return route;\n};\n\n/**\n * Utility to serialize a navigation state object to a path string.\n *\n * @example\n * ```js\n * getPathFromState(\n *   {\n *     routes: [\n *       {\n *         name: 'Chat',\n *         params: { author: 'Jane', id: 42 },\n *       },\n *     ],\n *   },\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         stringify: { author: author => author.toLowerCase() }\n *       }\n *     }\n *   }\n * )\n * ```\n *\n * @param state Navigation state to serialize.\n * @param options Extra options to fine-tune how to serialize the path.\n * @returns Path representing the state, e.g. /foo/bar?count=42.\n */\nexport default function getPathFromState<ParamList extends {}>(\n  state: State,\n  options?: Options<ParamList>\n): string {\n  if (state == null) {\n    throw Error(\n      \"Got 'undefined' for the navigation state. You must pass a valid state object.\"\n    );\n  }\n\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  // Create a normalized configs object which will be easier to use\n  const configs: Record<string, ConfigItem> = options?.screens\n    ? createNormalizedConfigs(options?.screens)\n    : {};\n\n  let path = '/';\n  let current: State | undefined = state;\n\n  const allParams: Record<string, any> = {};\n\n  while (current) {\n    let index = typeof current.index === 'number' ? current.index : 0;\n    let route = current.routes[index] as Route<string> & {\n      state?: State;\n    };\n\n    let pattern: string | undefined;\n\n    let focusedParams: Record<string, any> | undefined;\n    let focusedRoute = getActiveRoute(state);\n    let currentOptions = configs;\n\n    // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n    let nestedRouteNames = [];\n\n    let hasNext = true;\n\n    while (route.name in currentOptions && hasNext) {\n      pattern = currentOptions[route.name].pattern;\n\n      nestedRouteNames.push(route.name);\n\n      if (route.params) {\n        const stringify = currentOptions[route.name]?.stringify;\n\n        const currentParams = fromEntries(\n          Object.entries(route.params).map(([key, value]) => [\n            key,\n            stringify?.[key] ? stringify[key](value) : String(value),\n          ])\n        );\n\n        if (pattern) {\n          Object.assign(allParams, currentParams);\n        }\n\n        if (focusedRoute === route) {\n          // If this is the focused route, keep the params for later use\n          // We save it here since it's been stringified already\n          focusedParams = { ...currentParams };\n\n          pattern\n            ?.split('/')\n            .filter((p) => p.startsWith(':'))\n            // eslint-disable-next-line no-loop-func\n            .forEach((p) => {\n              const name = getParamName(p);\n\n              // Remove the params present in the pattern since we'll only use the rest for query string\n              if (focusedParams) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete focusedParams[name];\n              }\n            });\n        }\n      }\n\n      // If there is no `screens` property or no nested state, we return pattern\n      if (!currentOptions[route.name].screens || route.state === undefined) {\n        hasNext = false;\n      } else {\n        index =\n          typeof route.state.index === 'number'\n            ? route.state.index\n            : route.state.routes.length - 1;\n\n        const nextRoute = route.state.routes[index];\n        const nestedConfig = currentOptions[route.name].screens;\n\n        // if there is config for next route name, we go deeper\n        if (nestedConfig && nextRoute.name in nestedConfig) {\n          route = nextRoute as Route<string> & { state?: State };\n          currentOptions = nestedConfig;\n        } else {\n          // If not, there is no sense in going deeper in config\n          hasNext = false;\n        }\n      }\n    }\n\n    if (pattern === undefined) {\n      pattern = nestedRouteNames.join('/');\n    }\n\n    if (currentOptions[route.name] !== undefined) {\n      path += pattern\n        .split('/')\n        .map((p) => {\n          const name = getParamName(p);\n\n          // We don't know what to show for wildcard patterns\n          // Showing the route name seems ok, though whatever we show here will be incorrect\n          // Since the page doesn't actually exist\n          if (p === '*') {\n            return route.name;\n          }\n\n          // If the path has a pattern for a param, put the param in the path\n          if (p.startsWith(':')) {\n            const value = allParams[name];\n\n            if (value === undefined && p.endsWith('?')) {\n              // Optional params without value assigned in route.params should be ignored\n              return '';\n            }\n\n            return encodeURIComponent(value);\n          }\n\n          return encodeURIComponent(p);\n        })\n        .join('/');\n    } else {\n      path += encodeURIComponent(route.name);\n    }\n\n    if (!focusedParams) {\n      focusedParams = focusedRoute.params;\n    }\n\n    if (route.state) {\n      path += '/';\n    } else if (focusedParams) {\n      for (let param in focusedParams) {\n        if (focusedParams[param] === 'undefined') {\n          // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n          delete focusedParams[param];\n        }\n      }\n\n      const query = queryString.stringify(focusedParams, { sort: false });\n\n      if (query) {\n        path += `?${query}`;\n      }\n    }\n\n    current = route.state;\n  }\n\n  // Remove multiple as well as trailing slashes\n  path = path.replace(/\\/+/g, '/');\n  path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n\n  return path;\n}\n\nconst getParamName = (pattern: string) =>\n  pattern.replace(/^:/, '').replace(/\\?$/, '');\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst createConfigItem = (\n  config: PathConfig<object> | string,\n  parentPattern?: string\n): ConfigItem => {\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    return { pattern };\n  }\n\n  // If an object is specified as the value (e.g. Foo: { ... }),\n  // It can have `path` property and `screens` prop which has nested configs\n  let pattern: string | undefined;\n\n  if (config.exact && config.path === undefined) {\n    throw new Error(\n      \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n    );\n  }\n\n  pattern =\n    config.exact !== true\n      ? joinPaths(parentPattern || '', config.path || '')\n      : config.path || '';\n\n  const screens = config.screens\n    ? createNormalizedConfigs(config.screens, pattern)\n    : undefined;\n\n  return {\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern: pattern?.split('/').filter(Boolean).join('/'),\n    stringify: config.stringify,\n    screens,\n  };\n};\n\nconst createNormalizedConfigs = (\n  options: PathConfigMap<object>,\n  pattern?: string\n): Record<string, ConfigItem> =>\n  fromEntries(\n    Object.entries(options).map(([name, c]) => {\n      const result = createConfigItem(c, pattern);\n\n      return [name, result];\n    })\n  );\n"]},"metadata":{},"sourceType":"module"}