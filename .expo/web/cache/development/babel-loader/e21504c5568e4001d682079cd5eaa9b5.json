{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"key\", \"routeNames\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport checkDuplicateRouteNames from \"./checkDuplicateRouteNames\";\nimport checkSerializable from \"./checkSerializable\";\nimport { NOT_INITIALIZED_ERROR } from \"./createNavigationContainerRef\";\nimport EnsureSingleNavigator from \"./EnsureSingleNavigator\";\nimport findFocusedRoute from \"./findFocusedRoute\";\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport NavigationContainerRefContext from \"./NavigationContainerRefContext\";\nimport NavigationContext from \"./NavigationContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nimport NavigationStateContext from \"./NavigationStateContext\";\nimport UnhandledActionContext from \"./UnhandledActionContext\";\nimport useChildListeners from \"./useChildListeners\";\nimport useEventEmitter from \"./useEventEmitter\";\nimport useKeyedChildListeners from \"./useKeyedChildListeners\";\nimport useOptionsGetters from \"./useOptionsGetters\";\nimport { ScheduleUpdateContext } from \"./useScheduleUpdate\";\nimport useSyncState from \"./useSyncState\";\nvar serializableWarnings = [];\nvar duplicateNameWarnings = [];\n\nvar getPartialState = function getPartialState(state) {\n  if (state === undefined) {\n    return;\n  }\n\n  var key = state.key,\n    routeNames = state.routeNames,\n    partialState = _objectWithoutProperties(state, _excluded);\n  return _objectSpread(_objectSpread({}, partialState), {}, {\n    stale: true,\n    routes: state.routes.map(function (route) {\n      if (route.state === undefined) {\n        return route;\n      }\n      return _objectSpread(_objectSpread({}, route), {}, {\n        state: getPartialState(route.state)\n      });\n    })\n  });\n};\n\nvar BaseNavigationContainer = React.forwardRef(function BaseNavigationContainer(_ref, ref) {\n  var initialState = _ref.initialState,\n    onStateChange = _ref.onStateChange,\n    onUnhandledAction = _ref.onUnhandledAction,\n    independent = _ref.independent,\n    children = _ref.children;\n  var parent = React.useContext(NavigationStateContext);\n  if (!parent.isDefault && !independent) {\n    throw new Error(\"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitly. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\");\n  }\n  var _useSyncState = useSyncState(function () {\n      return getPartialState(initialState == null ? undefined : initialState);\n    }),\n    _useSyncState2 = _slicedToArray(_useSyncState, 5),\n    state = _useSyncState2[0],\n    getState = _useSyncState2[1],\n    setState = _useSyncState2[2],\n    scheduleUpdate = _useSyncState2[3],\n    flushUpdates = _useSyncState2[4];\n  var isFirstMountRef = React.useRef(true);\n  var navigatorKeyRef = React.useRef();\n  var getKey = React.useCallback(function () {\n    return navigatorKeyRef.current;\n  }, []);\n  var setKey = React.useCallback(function (key) {\n    navigatorKeyRef.current = key;\n  }, []);\n  var _useChildListeners = useChildListeners(),\n    listeners = _useChildListeners.listeners,\n    addListener = _useChildListeners.addListener;\n  var _useKeyedChildListene = useKeyedChildListeners(),\n    keyedListeners = _useKeyedChildListene.keyedListeners,\n    addKeyedListener = _useKeyedChildListene.addKeyedListener;\n  var dispatch = React.useCallback(function (action) {\n    if (listeners.focus[0] == null) {\n      console.error(NOT_INITIALIZED_ERROR);\n    } else {\n      listeners.focus[0](function (navigation) {\n        return navigation.dispatch(action);\n      });\n    }\n  }, [listeners.focus]);\n  var canGoBack = React.useCallback(function () {\n    if (listeners.focus[0] == null) {\n      return false;\n    }\n    var _listeners$focus$ = listeners.focus[0](function (navigation) {\n        return navigation.canGoBack();\n      }),\n      result = _listeners$focus$.result,\n      handled = _listeners$focus$.handled;\n    if (handled) {\n      return result;\n    } else {\n      return false;\n    }\n  }, [listeners.focus]);\n  var resetRoot = React.useCallback(function (state) {\n    var _state$key, _keyedListeners$getSt, _keyedListeners$getSt2;\n    var target = (_state$key = state === null || state === void 0 ? void 0 : state.key) !== null && _state$key !== void 0 ? _state$key : (_keyedListeners$getSt = (_keyedListeners$getSt2 = keyedListeners.getState).root) === null || _keyedListeners$getSt === void 0 ? void 0 : _keyedListeners$getSt.call(_keyedListeners$getSt2).key;\n    if (target == null) {\n      console.error(NOT_INITIALIZED_ERROR);\n    } else {\n      listeners.focus[0](function (navigation) {\n        return navigation.dispatch(_objectSpread(_objectSpread({}, CommonActions.reset(state)), {}, {\n          target: target\n        }));\n      });\n    }\n  }, [keyedListeners.getState, listeners.focus]);\n  var getRootState = React.useCallback(function () {\n    var _keyedListeners$getSt3, _keyedListeners$getSt4;\n    return (_keyedListeners$getSt3 = (_keyedListeners$getSt4 = keyedListeners.getState).root) === null || _keyedListeners$getSt3 === void 0 ? void 0 : _keyedListeners$getSt3.call(_keyedListeners$getSt4);\n  }, [keyedListeners.getState]);\n  var getCurrentRoute = React.useCallback(function () {\n    var state = getRootState();\n    if (state == null) {\n      return undefined;\n    }\n    var route = findFocusedRoute(state);\n    return route;\n  }, [getRootState]);\n  var emitter = useEventEmitter();\n  var _useOptionsGetters = useOptionsGetters({}),\n    addOptionsGetter = _useOptionsGetters.addOptionsGetter,\n    getCurrentOptions = _useOptionsGetters.getCurrentOptions;\n  var navigation = React.useMemo(function () {\n    return _objectSpread(_objectSpread(_objectSpread({}, Object.keys(CommonActions).reduce(function (acc, name) {\n      acc[name] = function () {\n        return (\n          dispatch(CommonActions[name].apply(CommonActions, arguments))\n        );\n      };\n      return acc;\n    }, {})), emitter.create('root')), {}, {\n      dispatch: dispatch,\n      resetRoot: resetRoot,\n      isFocused: function isFocused() {\n        return true;\n      },\n      canGoBack: canGoBack,\n      getParent: function getParent() {\n        return undefined;\n      },\n      getState: function getState() {\n        return stateRef.current;\n      },\n      getRootState: getRootState,\n      getCurrentRoute: getCurrentRoute,\n      getCurrentOptions: getCurrentOptions,\n      isReady: function isReady() {\n        return listeners.focus[0] != null;\n      }\n    });\n  }, [canGoBack, dispatch, emitter, getCurrentOptions, getCurrentRoute, getRootState, listeners.focus, resetRoot]);\n  React.useImperativeHandle(ref, function () {\n    return navigation;\n  }, [navigation]);\n  var onDispatchAction = React.useCallback(function (action, noop) {\n    emitter.emit({\n      type: '__unsafe_action__',\n      data: {\n        action: action,\n        noop: noop,\n        stack: stackRef.current\n      }\n    });\n  }, [emitter]);\n  var lastEmittedOptionsRef = React.useRef();\n  var onOptionsChange = React.useCallback(function (options) {\n    if (lastEmittedOptionsRef.current === options) {\n      return;\n    }\n    lastEmittedOptionsRef.current = options;\n    emitter.emit({\n      type: 'options',\n      data: {\n        options: options\n      }\n    });\n  }, [emitter]);\n  var stackRef = React.useRef();\n  var builderContext = React.useMemo(function () {\n    return {\n      addListener: addListener,\n      addKeyedListener: addKeyedListener,\n      onDispatchAction: onDispatchAction,\n      onOptionsChange: onOptionsChange,\n      stackRef: stackRef\n    };\n  }, [addListener, addKeyedListener, onDispatchAction, onOptionsChange]);\n  var scheduleContext = React.useMemo(function () {\n    return {\n      scheduleUpdate: scheduleUpdate,\n      flushUpdates: flushUpdates\n    };\n  }, [scheduleUpdate, flushUpdates]);\n  var isInitialRef = React.useRef(true);\n  var getIsInitial = React.useCallback(function () {\n    return isInitialRef.current;\n  }, []);\n  var context = React.useMemo(function () {\n    return {\n      state: state,\n      getState: getState,\n      setState: setState,\n      getKey: getKey,\n      setKey: setKey,\n      getIsInitial: getIsInitial,\n      addOptionsGetter: addOptionsGetter\n    };\n  }, [state, getState, setState, getKey, setKey, getIsInitial, addOptionsGetter]);\n  var onStateChangeRef = React.useRef(onStateChange);\n  var stateRef = React.useRef(state);\n  React.useEffect(function () {\n    isInitialRef.current = false;\n    onStateChangeRef.current = onStateChange;\n    stateRef.current = state;\n  });\n  React.useEffect(function () {\n    var hydratedState = getRootState();\n    if (process.env.NODE_ENV !== 'production') {\n      if (hydratedState !== undefined) {\n        var serializableResult = checkSerializable(hydratedState);\n        if (!serializableResult.serializable) {\n          var location = serializableResult.location,\n            reason = serializableResult.reason;\n          var path = '';\n          var pointer = hydratedState;\n          var params = false;\n          for (var i = 0; i < location.length; i++) {\n            var curr = location[i];\n            var prev = location[i - 1];\n            pointer = pointer[curr];\n            if (!params && curr === 'state') {\n              continue;\n            } else if (!params && curr === 'routes') {\n              if (path) {\n                path += ' > ';\n              }\n            } else if (!params && typeof curr === 'number' && prev === 'routes') {\n              var _pointer;\n              path += (_pointer = pointer) === null || _pointer === void 0 ? void 0 : _pointer.name;\n            } else if (!params) {\n              path += \" > \" + curr;\n              params = true;\n            } else {\n              if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                path += \"[\" + curr + \"]\";\n              } else if (/^[a-z$_]+$/i.test(curr)) {\n                path += \".\" + curr;\n              } else {\n                path += \"[\" + JSON.stringify(curr) + \"]\";\n              }\n            }\n          }\n          var message = \"Non-serializable values were found in the navigation state. Check:\\n\\n\" + path + \" (\" + reason + \")\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.\";\n          if (!serializableWarnings.includes(message)) {\n            serializableWarnings.push(message);\n            console.warn(message);\n          }\n        }\n        var duplicateRouteNamesResult = checkDuplicateRouteNames(hydratedState);\n        if (duplicateRouteNamesResult.length) {\n          var _message = \"Found screens with the same name nested inside one another. Check:\\n\" + duplicateRouteNamesResult.map(function (locations) {\n            return \"\\n\" + locations.join(', ');\n          }) + \"\\n\\nThis can cause confusing behavior during navigation. Consider using unique names for each screen instead.\";\n          if (!duplicateNameWarnings.includes(_message)) {\n            duplicateNameWarnings.push(_message);\n            console.warn(_message);\n          }\n        }\n      }\n    }\n    emitter.emit({\n      type: 'state',\n      data: {\n        state: state\n      }\n    });\n    if (!isFirstMountRef.current && onStateChangeRef.current) {\n      onStateChangeRef.current(hydratedState);\n    }\n    isFirstMountRef.current = false;\n  }, [getRootState, emitter, state]);\n  var defaultOnUnhandledAction = React.useCallback(function (action) {\n    if (process.env.NODE_ENV === 'production') {\n      return;\n    }\n    var payload = action.payload;\n    var message = \"The action '\" + action.type + \"'\" + (payload ? \" with payload \" + JSON.stringify(action.payload) : '') + \" was not handled by any navigator.\";\n    switch (action.type) {\n      case 'NAVIGATE':\n      case 'PUSH':\n      case 'REPLACE':\n      case 'JUMP_TO':\n        if (payload !== null && payload !== void 0 && payload.name) {\n          message += \"\\n\\nDo you have a screen named '\" + payload.name + \"'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.\";\n        } else {\n          message += \"\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.\";\n        }\n        break;\n      case 'GO_BACK':\n      case 'POP':\n      case 'POP_TO_TOP':\n        message += \"\\n\\nIs there any screen to go back to?\";\n        break;\n      case 'OPEN_DRAWER':\n      case 'CLOSE_DRAWER':\n      case 'TOGGLE_DRAWER':\n        message += \"\\n\\nIs your screen inside a Drawer navigator?\";\n        break;\n    }\n    message += \"\\n\\nThis is a development-only warning and won't be shown in production.\";\n    console.error(message);\n  }, []);\n  var element = React.createElement(NavigationContainerRefContext.Provider, {\n    value: navigation\n  }, React.createElement(ScheduleUpdateContext.Provider, {\n    value: scheduleContext\n  }, React.createElement(NavigationBuilderContext.Provider, {\n    value: builderContext\n  }, React.createElement(NavigationStateContext.Provider, {\n    value: context\n  }, React.createElement(UnhandledActionContext.Provider, {\n    value: onUnhandledAction !== null && onUnhandledAction !== void 0 ? onUnhandledAction : defaultOnUnhandledAction\n  }, React.createElement(EnsureSingleNavigator, null, children))))));\n  if (independent) {\n    element = React.createElement(NavigationRouteContext.Provider, {\n      value: undefined\n    }, React.createElement(NavigationContext.Provider, {\n      value: undefined\n    }, element));\n  }\n  return element;\n});\nexport default BaseNavigationContainer;","map":{"version":3,"sources":["BaseNavigationContainer.tsx"],"names":["CommonActions","React","checkDuplicateRouteNames","checkSerializable","NOT_INITIALIZED_ERROR","EnsureSingleNavigator","findFocusedRoute","NavigationBuilderContext","NavigationContainerRefContext","NavigationContext","NavigationRouteContext","NavigationStateContext","UnhandledActionContext","useChildListeners","useEventEmitter","useKeyedChildListeners","useOptionsGetters","ScheduleUpdateContext","useSyncState","serializableWarnings","duplicateNameWarnings","getPartialState","state","undefined","key","routeNames","partialState","stale","routes","map","route","BaseNavigationContainer","forwardRef","initialState","onStateChange","onUnhandledAction","independent","children","ref","parent","useContext","isDefault","Error","getState","setState","scheduleUpdate","flushUpdates","isFirstMountRef","useRef","navigatorKeyRef","getKey","useCallback","current","setKey","listeners","addListener","keyedListeners","addKeyedListener","dispatch","action","focus","console","error","navigation","canGoBack","result","handled","resetRoot","target","root","reset","getRootState","getCurrentRoute","emitter","addOptionsGetter","getCurrentOptions","useMemo","keys","reduce","acc","name","create","isFocused","getParent","stateRef","isReady","useImperativeHandle","onDispatchAction","noop","emit","type","data","stack","stackRef","lastEmittedOptionsRef","onOptionsChange","options","builderContext","scheduleContext","isInitialRef","getIsInitial","context","onStateChangeRef","useEffect","hydratedState","process","env","NODE_ENV","serializableResult","serializable","location","reason","path","pointer","params","i","length","curr","prev","test","JSON","stringify","message","includes","push","warn","duplicateRouteNamesResult","locations","join","defaultOnUnhandledAction","payload","element"],"mappings":"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","sourcesContent":["import {\n  CommonActions,\n  InitialState,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport checkDuplicateRouteNames from './checkDuplicateRouteNames';\nimport checkSerializable from './checkSerializable';\nimport { NOT_INITIALIZED_ERROR } from './createNavigationContainerRef';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport findFocusedRoute from './findFocusedRoute';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationContainerRefContext from './NavigationContainerRefContext';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport type {\n  NavigationContainerEventMap,\n  NavigationContainerProps,\n  NavigationContainerRef,\n} from './types';\nimport UnhandledActionContext from './UnhandledActionContext';\nimport useChildListeners from './useChildListeners';\nimport useEventEmitter from './useEventEmitter';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useOptionsGetters from './useOptionsGetters';\nimport { ScheduleUpdateContext } from './useScheduleUpdate';\nimport useSyncState from './useSyncState';\n\ntype State = NavigationState | PartialState<NavigationState> | undefined;\n\nconst serializableWarnings: string[] = [];\nconst duplicateNameWarnings: string[] = [];\n\n/**\n * Remove `key` and `routeNames` from the state objects recursively to get partial state.\n *\n * @param state Initial state object.\n */\nconst getPartialState = (\n  state: InitialState | undefined\n): PartialState<NavigationState> | undefined => {\n  if (state === undefined) {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { key, routeNames, ...partialState } = state;\n\n  return {\n    ...partialState,\n    stale: true,\n    routes: state.routes.map((route) => {\n      if (route.state === undefined) {\n        return route as Route<string> & {\n          state?: PartialState<NavigationState>;\n        };\n      }\n\n      return { ...route, state: getPartialState(route.state) };\n    }),\n  };\n};\n\n/**\n * Container component which holds the navigation state.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nconst BaseNavigationContainer = React.forwardRef(\n  function BaseNavigationContainer(\n    {\n      initialState,\n      onStateChange,\n      onUnhandledAction,\n      independent,\n      children,\n    }: NavigationContainerProps,\n    ref?: React.Ref<NavigationContainerRef<ParamListBase>>\n  ) {\n    const parent = React.useContext(NavigationStateContext);\n\n    if (!parent.isDefault && !independent) {\n      throw new Error(\n        \"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitly. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\"\n      );\n    }\n\n    const [state, getState, setState, scheduleUpdate, flushUpdates] =\n      useSyncState<State>(() =>\n        getPartialState(initialState == null ? undefined : initialState)\n      );\n\n    const isFirstMountRef = React.useRef<boolean>(true);\n\n    const navigatorKeyRef = React.useRef<string | undefined>();\n\n    const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n    const setKey = React.useCallback((key: string) => {\n      navigatorKeyRef.current = key;\n    }, []);\n\n    const { listeners, addListener } = useChildListeners();\n\n    const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n    const dispatch = React.useCallback(\n      (\n        action:\n          | NavigationAction\n          | ((state: NavigationState) => NavigationAction)\n      ) => {\n        if (listeners.focus[0] == null) {\n          console.error(NOT_INITIALIZED_ERROR);\n        } else {\n          listeners.focus[0]((navigation) => navigation.dispatch(action));\n        }\n      },\n      [listeners.focus]\n    );\n\n    const canGoBack = React.useCallback(() => {\n      if (listeners.focus[0] == null) {\n        return false;\n      }\n\n      const { result, handled } = listeners.focus[0]((navigation) =>\n        navigation.canGoBack()\n      );\n\n      if (handled) {\n        return result;\n      } else {\n        return false;\n      }\n    }, [listeners.focus]);\n\n    const resetRoot = React.useCallback(\n      (state?: PartialState<NavigationState> | NavigationState) => {\n        const target = state?.key ?? keyedListeners.getState.root?.().key;\n\n        if (target == null) {\n          console.error(NOT_INITIALIZED_ERROR);\n        } else {\n          listeners.focus[0]((navigation) =>\n            navigation.dispatch({\n              ...CommonActions.reset(state),\n              target,\n            })\n          );\n        }\n      },\n      [keyedListeners.getState, listeners.focus]\n    );\n\n    const getRootState = React.useCallback(() => {\n      return keyedListeners.getState.root?.();\n    }, [keyedListeners.getState]);\n\n    const getCurrentRoute = React.useCallback(() => {\n      const state = getRootState();\n\n      if (state == null) {\n        return undefined;\n      }\n\n      const route = findFocusedRoute(state);\n\n      return route as Route<string> | undefined;\n    }, [getRootState]);\n\n    const emitter = useEventEmitter<NavigationContainerEventMap>();\n\n    const { addOptionsGetter, getCurrentOptions } = useOptionsGetters({});\n\n    const navigation: NavigationContainerRef<ParamListBase> = React.useMemo(\n      () => ({\n        ...Object.keys(CommonActions).reduce<any>((acc, name) => {\n          acc[name] = (...args: any[]) =>\n            // @ts-expect-error: this is ok\n            dispatch(CommonActions[name](...args));\n          return acc;\n        }, {}),\n        ...emitter.create('root'),\n        dispatch,\n        resetRoot,\n        isFocused: () => true,\n        canGoBack,\n        getParent: () => undefined,\n        getState: () => stateRef.current,\n        getRootState,\n        getCurrentRoute,\n        getCurrentOptions,\n        isReady: () => listeners.focus[0] != null,\n      }),\n      [\n        canGoBack,\n        dispatch,\n        emitter,\n        getCurrentOptions,\n        getCurrentRoute,\n        getRootState,\n        listeners.focus,\n        resetRoot,\n      ]\n    );\n\n    React.useImperativeHandle(ref, () => navigation, [navigation]);\n\n    const onDispatchAction = React.useCallback(\n      (action: NavigationAction, noop: boolean) => {\n        emitter.emit({\n          type: '__unsafe_action__',\n          data: { action, noop, stack: stackRef.current },\n        });\n      },\n      [emitter]\n    );\n\n    const lastEmittedOptionsRef = React.useRef<object | undefined>();\n\n    const onOptionsChange = React.useCallback(\n      (options: object) => {\n        if (lastEmittedOptionsRef.current === options) {\n          return;\n        }\n\n        lastEmittedOptionsRef.current = options;\n\n        emitter.emit({\n          type: 'options',\n          data: { options },\n        });\n      },\n      [emitter]\n    );\n\n    const stackRef = React.useRef<string | undefined>();\n\n    const builderContext = React.useMemo(\n      () => ({\n        addListener,\n        addKeyedListener,\n        onDispatchAction,\n        onOptionsChange,\n        stackRef,\n      }),\n      [addListener, addKeyedListener, onDispatchAction, onOptionsChange]\n    );\n\n    const scheduleContext = React.useMemo(\n      () => ({ scheduleUpdate, flushUpdates }),\n      [scheduleUpdate, flushUpdates]\n    );\n\n    const isInitialRef = React.useRef(true);\n\n    const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n    const context = React.useMemo(\n      () => ({\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      }),\n      [\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      ]\n    );\n\n    const onStateChangeRef = React.useRef(onStateChange);\n    const stateRef = React.useRef(state);\n\n    React.useEffect(() => {\n      isInitialRef.current = false;\n      onStateChangeRef.current = onStateChange;\n      stateRef.current = state;\n    });\n\n    React.useEffect(() => {\n      const hydratedState = getRootState();\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (hydratedState !== undefined) {\n          const serializableResult = checkSerializable(hydratedState);\n\n          if (!serializableResult.serializable) {\n            const { location, reason } = serializableResult;\n\n            let path = '';\n            let pointer: Record<any, any> = hydratedState;\n            let params = false;\n\n            for (let i = 0; i < location.length; i++) {\n              const curr = location[i];\n              const prev = location[i - 1];\n\n              pointer = pointer[curr];\n\n              if (!params && curr === 'state') {\n                continue;\n              } else if (!params && curr === 'routes') {\n                if (path) {\n                  path += ' > ';\n                }\n              } else if (\n                !params &&\n                typeof curr === 'number' &&\n                prev === 'routes'\n              ) {\n                path += pointer?.name;\n              } else if (!params) {\n                path += ` > ${curr}`;\n                params = true;\n              } else {\n                if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                  path += `[${curr}]`;\n                } else if (/^[a-z$_]+$/i.test(curr)) {\n                  path += `.${curr}`;\n                } else {\n                  path += `[${JSON.stringify(curr)}]`;\n                }\n              }\n            }\n\n            const message = `Non-serializable values were found in the navigation state. Check:\\n\\n${path} (${reason})\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.`;\n\n            if (!serializableWarnings.includes(message)) {\n              serializableWarnings.push(message);\n              console.warn(message);\n            }\n          }\n\n          const duplicateRouteNamesResult =\n            checkDuplicateRouteNames(hydratedState);\n\n          if (duplicateRouteNamesResult.length) {\n            const message = `Found screens with the same name nested inside one another. Check:\\n${duplicateRouteNamesResult.map(\n              (locations) => `\\n${locations.join(', ')}`\n            )}\\n\\nThis can cause confusing behavior during navigation. Consider using unique names for each screen instead.`;\n\n            if (!duplicateNameWarnings.includes(message)) {\n              duplicateNameWarnings.push(message);\n              console.warn(message);\n            }\n          }\n        }\n      }\n\n      emitter.emit({ type: 'state', data: { state } });\n\n      if (!isFirstMountRef.current && onStateChangeRef.current) {\n        onStateChangeRef.current(hydratedState);\n      }\n\n      isFirstMountRef.current = false;\n    }, [getRootState, emitter, state]);\n\n    const defaultOnUnhandledAction = React.useCallback(\n      (action: NavigationAction) => {\n        if (process.env.NODE_ENV === 'production') {\n          return;\n        }\n\n        const payload: Record<string, any> | undefined = action.payload;\n\n        let message = `The action '${action.type}'${\n          payload ? ` with payload ${JSON.stringify(action.payload)}` : ''\n        } was not handled by any navigator.`;\n\n        switch (action.type) {\n          case 'NAVIGATE':\n          case 'PUSH':\n          case 'REPLACE':\n          case 'JUMP_TO':\n            if (payload?.name) {\n              message += `\\n\\nDo you have a screen named '${payload.name}'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.`;\n            } else {\n              message += `\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.`;\n            }\n\n            break;\n          case 'GO_BACK':\n          case 'POP':\n          case 'POP_TO_TOP':\n            message += `\\n\\nIs there any screen to go back to?`;\n            break;\n          case 'OPEN_DRAWER':\n          case 'CLOSE_DRAWER':\n          case 'TOGGLE_DRAWER':\n            message += `\\n\\nIs your screen inside a Drawer navigator?`;\n            break;\n        }\n\n        message += `\\n\\nThis is a development-only warning and won't be shown in production.`;\n\n        console.error(message);\n      },\n      []\n    );\n\n    let element = (\n      <NavigationContainerRefContext.Provider value={navigation}>\n        <ScheduleUpdateContext.Provider value={scheduleContext}>\n          <NavigationBuilderContext.Provider value={builderContext}>\n            <NavigationStateContext.Provider value={context}>\n              <UnhandledActionContext.Provider\n                value={onUnhandledAction ?? defaultOnUnhandledAction}\n              >\n                <EnsureSingleNavigator>{children}</EnsureSingleNavigator>\n              </UnhandledActionContext.Provider>\n            </NavigationStateContext.Provider>\n          </NavigationBuilderContext.Provider>\n        </ScheduleUpdateContext.Provider>\n      </NavigationContainerRefContext.Provider>\n    );\n\n    if (independent) {\n      // We need to clear any existing contexts for nested independent container to work correctly\n      element = (\n        <NavigationRouteContext.Provider value={undefined}>\n          <NavigationContext.Provider value={undefined}>\n            {element}\n          </NavigationContext.Provider>\n        </NavigationRouteContext.Provider>\n      );\n    }\n\n    return element;\n  }\n);\n\nexport default BaseNavigationContainer;\n"]},"metadata":{},"sourceType":"module"}