{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport Box from \"../../primitives/Box\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar AvatarBadge = memo(forwardRef(function (props, ref) {\n  var resolvedProps = usePropsResolution('AvatarBadge', props);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return React.createElement(Box, _extends({}, resolvedProps, {\n    ref: ref\n  }));\n}));\nAvatarBadge.displayName = 'AvatarBadge';\nexport default AvatarBadge;","map":{"version":3,"sources":["Badge.tsx"],"names":["React","memo","forwardRef","Box","usePropsResolution","useHasResponsiveProps","AvatarBadge","props","ref","resolvedProps","displayName"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,OAAOC,GAAP;AACA,SAASC,kBAAT;AAEA,SAASC,qBAAT;AAEA,IAAMC,WAAW,GAAGL,IAAI,CACtBC,UAAU,CAAC,UAACK,KAAD,EAA2BC,GAA3B,EAAyC;EAClD,IAAMC,aAAa,GAAGL,kBAAkB,CAAC,aAAD,EAAgBG,KAAhB,CADU;;EAGlD,IAAIF,qBAAqB,CAACE,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EACD,OAAO,KAAA,CAAA,aAAA,CAAC,GAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EAASE,aAAT,EAAA;IAAwB,GAAG,EAAED;EAA7B,CAAA,CAAA,CAAP;AACD,CAPS,CADY,CAAxB;AAWAF,WAAW,CAACI,WAAZJ,GAA0B,aAA1BA;AACA,eAAeA,WAAf","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IAvatarBadgeProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AvatarBadge = memo(\n  forwardRef((props: IAvatarBadgeProps, ref?: any) => {\n    const resolvedProps = usePropsResolution('AvatarBadge', props);\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(props)) {\n      return null;\n    }\n    return <Box {...resolvedProps} ref={ref} />;\n  })\n);\n\nAvatarBadge.displayName = 'AvatarBadge';\nexport default AvatarBadge as (props: IAvatarBadgeProps, ref?: any) => any;\n"]},"metadata":{},"sourceType":"module"}