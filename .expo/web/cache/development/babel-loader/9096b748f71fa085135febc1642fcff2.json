{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"columns\", \"space\", \"spacingX\", \"spacingY\", \"minChildWidth\", \"children\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport { Box, HStack, VStack } from \"../../primitives\";\nimport { useThemeProps } from \"../../../hooks/useThemeProps\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar DEBUG_STYLES = false ? {\n  rows: {\n    borderWidth: '1px'\n  },\n  cols: {\n    borderWidth: '1px'\n  }\n} : {\n  rows: {},\n  cols: {}\n};\nvar SimpleGrid = function SimpleGrid(props, ref) {\n  var _useThemeProps = useThemeProps('SimpleGrid', props),\n    columns = _useThemeProps.columns,\n    space = _useThemeProps.space,\n    spacingX = _useThemeProps.spacingX,\n    spacingY = _useThemeProps.spacingY,\n    minChildWidth = _useThemeProps.minChildWidth,\n    children = _useThemeProps.children,\n    remainingProps = _objectWithoutProperties(_useThemeProps, _excluded);\n\n  if (useHasResponsiveProps(props)) {\n    return React.createElement(React.Fragment, null);\n  }\n  var cellSpacing = space !== null && space !== void 0 ? space : 0;\n  var cellSpacingX = spacingX !== null && spacingX !== void 0 ? spacingX : cellSpacing;\n  var cellSpacingY = spacingY !== null && spacingY !== void 0 ? spacingY : cellSpacing;\n  var childrenArray = React.Children.toArray(children);\n  if (columns) {\n    var rowSlices = [];\n    for (var i = 0; i < childrenArray.length; i = i + columns) {\n      rowSlices.push(childrenArray.slice(i, i + columns));\n    }\n    return React.createElement(VStack, _extends({}, DEBUG_STYLES.rows, {\n      space: cellSpacingY\n    }, remainingProps, {\n      ref: ref\n    }), rowSlices.map(function (row, rowIndex) {\n      return React.createElement(HStack, {\n        space: cellSpacingX,\n        key: rowIndex\n      }, row.map(function (col) {\n        return React.createElement(Box, _extends({}, DEBUG_STYLES.cols, {\n          key: col.key\n        }), col);\n      }));\n    }));\n  }\n  else if (minChildWidth) {\n    return React.createElement(Box, _extends({\n      flexDirection: \"row\",\n      flexWrap: \"wrap\",\n      justifyContent: \"center\"\n    }, remainingProps, {\n      ref: ref\n    }), childrenArray.map(function (col) {\n      return React.createElement(Box, _extends({}, DEBUG_STYLES.cols, {\n        mx: cellSpacingX,\n        my: cellSpacingY,\n        key: col.key,\n        minWidth: minChildWidth\n      }), col);\n    }));\n  }\n  return React.createElement(React.Fragment, null);\n};\nexport default React.memo(React.forwardRef(SimpleGrid));","map":{"version":3,"sources":["SimpleGrid.tsx"],"names":["React","Box","HStack","VStack","useThemeProps","useHasResponsiveProps","DEBUG_STYLES","rows","borderWidth","cols","SimpleGrid","props","ref","columns","space","spacingX","spacingY","minChildWidth","children","remainingProps","cellSpacing","cellSpacingX","cellSpacingY","childrenArray","Children","toArray","rowSlices","i","length","push","slice","map","row","rowIndex","col","key","memo","forwardRef"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Box, HStack, VStack } from '../../primitives';\nimport type { ISimpleGridProps } from './types';\n// const isDebug = process.env.NODE_ENV !== 'production';\nimport { useThemeProps } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst DEBUG_STYLES = false\n  ? {\n      rows: {\n        borderWidth: '1px',\n      },\n      cols: {\n        borderWidth: '1px',\n      },\n    }\n  : {\n      rows: {},\n      cols: {},\n    };\n\nconst SimpleGrid = (props: ISimpleGridProps, ref?: any): JSX.Element => {\n  const {\n    columns,\n    space,\n    spacingX,\n    spacingY,\n    minChildWidth,\n    children,\n    ...remainingProps\n  } = useThemeProps('SimpleGrid', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return <></>;\n  }\n  let cellSpacing = space ?? 0;\n  let cellSpacingX = spacingX ?? cellSpacing;\n  let cellSpacingY = spacingY ?? cellSpacing;\n\n  const childrenArray = React.Children.toArray(children);\n\n  if (columns) {\n    let rowSlices = [];\n    for (let i = 0; i < childrenArray.length; i = i + columns) {\n      rowSlices.push(childrenArray.slice(i, i + columns));\n    }\n\n    return (\n      <VStack\n        {...DEBUG_STYLES.rows}\n        space={cellSpacingY}\n        {...remainingProps}\n        ref={ref}\n      >\n        {rowSlices.map((row, rowIndex) => {\n          return (\n            <HStack space={cellSpacingX} key={rowIndex}>\n              {row.map((col: any) => {\n                return (\n                  <Box {...DEBUG_STYLES.cols} key={col.key}>\n                    {col}\n                  </Box>\n                );\n              })}\n            </HStack>\n          );\n        })}\n      </VStack>\n    );\n  }\n  // Needs more work for empty spacing i.e. auto-fit. Current workaround is to use wrap and let the columns be created dynamically\n  // https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/\n  else if (minChildWidth) {\n    return (\n      <Box\n        flexDirection=\"row\"\n        flexWrap=\"wrap\"\n        justifyContent=\"center\"\n        {...remainingProps}\n        ref={ref}\n      >\n        {childrenArray.map((col: any) => {\n          return (\n            <Box\n              {...DEBUG_STYLES.cols}\n              mx={cellSpacingX}\n              my={cellSpacingY}\n              key={col.key}\n              minWidth={minChildWidth}\n            >\n              {col}\n            </Box>\n          );\n        })}\n      </Box>\n    );\n  }\n\n  return <></>;\n};\nexport default React.memo(React.forwardRef(SimpleGrid));\n"]},"metadata":{},"sourceType":"module"}