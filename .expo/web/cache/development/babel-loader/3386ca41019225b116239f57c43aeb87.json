{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useRef, useState } from \"react\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport { clamp, snapValueToStep } from \"@react-aria/utils\";\nvar $dcc38d2f5fc04b76254f325fa36d$var$DEFAULT_MIN_VALUE = 0;\nvar $dcc38d2f5fc04b76254f325fa36d$var$DEFAULT_MAX_VALUE = 100;\nvar $dcc38d2f5fc04b76254f325fa36d$var$DEFAULT_STEP_VALUE = 1;\n\nexport function useSliderState(props) {\n  var _props$defaultValue;\n  var isDisabled = props.isDisabled,\n    _props$minValue = props.minValue,\n    minValue = _props$minValue === void 0 ? $dcc38d2f5fc04b76254f325fa36d$var$DEFAULT_MIN_VALUE : _props$minValue,\n    _props$maxValue = props.maxValue,\n    maxValue = _props$maxValue === void 0 ? $dcc38d2f5fc04b76254f325fa36d$var$DEFAULT_MAX_VALUE : _props$maxValue,\n    formatter = props.numberFormatter,\n    _props$step = props.step,\n    step = _props$step === void 0 ? $dcc38d2f5fc04b76254f325fa36d$var$DEFAULT_STEP_VALUE : _props$step;\n  var _useControlledState = useControlledState(props.value, (_props$defaultValue = props.defaultValue) != null ? _props$defaultValue : [minValue], props.onChange),\n    _useControlledState2 = _slicedToArray(_useControlledState, 2),\n    values = _useControlledState2[0],\n    setValues = _useControlledState2[1];\n  var _useState = useState(new Array(values.length).fill(false)),\n    _useState2 = _slicedToArray(_useState, 2),\n    isDraggings = _useState2[0],\n    setDraggings = _useState2[1];\n  var isEditablesRef = useRef(new Array(values.length).fill(true));\n  var _useState3 = useState(undefined),\n    _useState4 = _slicedToArray(_useState3, 2),\n    focusedIndex = _useState4[0],\n    setFocusedIndex = _useState4[1];\n  var valuesRef = useRef(null);\n  valuesRef.current = values;\n  var isDraggingsRef = useRef(null);\n  isDraggingsRef.current = isDraggings;\n  function getValuePercent(value) {\n    return (value - minValue) / (maxValue - minValue);\n  }\n  function getThumbMinValue(index) {\n    return index === 0 ? minValue : values[index - 1];\n  }\n  function getThumbMaxValue(index) {\n    return index === values.length - 1 ? maxValue : values[index + 1];\n  }\n  function isThumbEditable(index) {\n    return isEditablesRef.current[index];\n  }\n  function setThumbEditable(index, editable) {\n    isEditablesRef.current[index] = editable;\n  }\n  function updateValue(index, value) {\n    if (isDisabled || !isThumbEditable(index)) {\n      return;\n    }\n    var thisMin = getThumbMinValue(index);\n    var thisMax = getThumbMaxValue(index);\n\n    value = snapValueToStep(value, thisMin, thisMax, step);\n    valuesRef.current = $dcc38d2f5fc04b76254f325fa36d$var$replaceIndex(valuesRef.current, index, value);\n    setValues(valuesRef.current);\n  }\n  function updateDragging(index, dragging) {\n    if (isDisabled || !isThumbEditable(index)) {\n      return;\n    }\n    var wasDragging = isDraggingsRef.current[index];\n    isDraggingsRef.current = $dcc38d2f5fc04b76254f325fa36d$var$replaceIndex(isDraggingsRef.current, index, dragging);\n    setDraggings(isDraggingsRef.current);\n\n    if (props.onChangeEnd && wasDragging && !isDraggingsRef.current.some(Boolean)) {\n      props.onChangeEnd(valuesRef.current);\n    }\n  }\n  function getFormattedValue(value) {\n    return formatter.format(value);\n  }\n  function setThumbPercent(index, percent) {\n    updateValue(index, getPercentValue(percent));\n  }\n  function getRoundedValue(value) {\n    return Math.round((value - minValue) / step) * step + minValue;\n  }\n  function getPercentValue(percent) {\n    var val = percent * (maxValue - minValue) + minValue;\n    return clamp(getRoundedValue(val), minValue, maxValue);\n  }\n  return {\n    values: values,\n    getThumbValue: function getThumbValue(index) {\n      return values[index];\n    },\n    setThumbValue: updateValue,\n    setThumbPercent: setThumbPercent,\n    isThumbDragging: function isThumbDragging(index) {\n      return isDraggings[index];\n    },\n    setThumbDragging: updateDragging,\n    focusedThumb: focusedIndex,\n    setFocusedThumb: setFocusedIndex,\n    getThumbPercent: function getThumbPercent(index) {\n      return getValuePercent(values[index]);\n    },\n    getValuePercent: getValuePercent,\n    getThumbValueLabel: function getThumbValueLabel(index) {\n      return getFormattedValue(values[index]);\n    },\n    getFormattedValue: getFormattedValue,\n    getThumbMinValue: getThumbMinValue,\n    getThumbMaxValue: getThumbMaxValue,\n    getPercentValue: getPercentValue,\n    isThumbEditable: isThumbEditable,\n    setThumbEditable: setThumbEditable,\n    step: step\n  };\n}\nfunction $dcc38d2f5fc04b76254f325fa36d$var$replaceIndex(array, index, value) {\n  if (array[index] === value) {\n    return array;\n  }\n  return [].concat(_toConsumableArray(array.slice(0, index)), [value], _toConsumableArray(array.slice(index + 1)));\n}","map":{"version":3,"sources":["packages/@react-stately/slider/src/useSliderState.ts"],"names":["DEFAULT_MIN_VALUE","DEFAULT_MAX_VALUE","DEFAULT_STEP_VALUE","useSliderState","props","isDisabled","minValue","maxValue","numberFormatter","formatter","step","values","setValues","useControlledState","value","defaultValue","onChange","isDraggings","setDraggings","useState","Array","length","fill","isEditablesRef","useRef","focusedIndex","setFocusedIndex","undefined","valuesRef","current","isDraggingsRef","getValuePercent","getThumbMinValue","index","getThumbMaxValue","isThumbEditable","setThumbEditable","editable","updateValue","thisMin","thisMax","snapValueToStep","replaceIndex","updateDragging","dragging","wasDragging","onChangeEnd","some","Boolean","getFormattedValue","format","setThumbPercent","percent","getPercentValue","getRoundedValue","Math","round","val","clamp","getThumbValue","setThumbValue","isThumbDragging","setThumbDragging","focusedThumb","setFocusedThumb","getThumbPercent","getThumbValueLabel","array","slice"],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {clamp, snapValueToStep} from '@react-aria/utils';\nimport {SliderProps} from '@react-types/slider';\nimport {useControlledState} from '@react-stately/utils';\nimport {useRef, useState} from 'react';\n\nexport interface SliderState {\n  /**\n   * Values managed by the slider by thumb index.\n   */\n  readonly values: number[],\n  /**\n   * Get the value for the specified thumb.\n   * @param index\n   */\n  getThumbValue(index: number): number,\n\n  /**\n   * Sets the value for the specified thumb.\n   * The actual value set will be clamped and rounded according to min/max/step.\n   * @param index\n   * @param value\n   */\n  setThumbValue(index: number, value: number): void,\n\n  /**\n   * Sets value for the specified thumb by percent offset (between 0 and 1).\n   * @param index\n   * @param percent\n   */\n  setThumbPercent(index: number, percent: number): void,\n\n  /**\n   * Whether the specific thumb is being dragged.\n   * @param index\n   */\n  isThumbDragging(index: number): boolean,\n  /**\n   * Set is dragging on the specified thumb.\n   * @param index\n   * @param dragging\n   */\n  setThumbDragging(index: number, dragging: boolean): void,\n\n  /**\n   * Currently-focused thumb index.\n   */\n  readonly focusedThumb: number | undefined,\n  /**\n   * Set focused true on specified thumb. This will remove focus from\n   * any thumb that had it before.\n   * @param index\n   */\n  setFocusedThumb(index: number | undefined): void,\n\n  /**\n   * Returns the specified thumb's value as a percentage from 0 to 1.\n   * @param index\n   */\n  getThumbPercent(index: number): number,\n\n  /**\n   * Returns the value as a percent between the min and max of the slider.\n   * @param index\n   */\n  getValuePercent(value: number): number,\n\n  /**\n   * Returns the string label for the specified thumb's value, per props.formatOptions.\n   * @param index\n   */\n  getThumbValueLabel(index: number): string,\n\n  /**\n   * Returns the string label for the value, per props.formatOptions.\n   * @param index\n   */\n  getFormattedValue(value: number): string,\n\n  /**\n   * Returns the min allowed value for the specified thumb.\n   * @param index\n   */\n  getThumbMinValue(index: number): number,\n\n  /**\n   * Returns the max allowed value for the specified thumb.\n   * @param index\n   */\n  getThumbMaxValue(index: number): number,\n\n  /**\n   * Converts a percent along track (between 0 and 1) to the corresponding value.\n   * @param percent\n   */\n  getPercentValue(percent: number): number,\n\n  /**\n   * Returns if the specified thumb is editable.\n   * @param index\n   */\n  isThumbEditable(index: number): boolean,\n\n  /**\n   * Set the specified thumb's editable state.\n   * @param index\n   * @param editable\n   */\n  setThumbEditable(index: number, editable: boolean): void,\n\n  /**\n   * The step amount for the slider.\n   */\n  readonly step: number\n}\n\nconst DEFAULT_MIN_VALUE = 0;\nconst DEFAULT_MAX_VALUE = 100;\nconst DEFAULT_STEP_VALUE = 1;\n\ninterface SliderStateOptions extends SliderProps {\n  numberFormatter: Intl.NumberFormat\n}\n\n/**\n * Provides state management for a slider component. Stores values for all thumbs,\n * formats values for localization, and provides methods to update the position\n * of any thumbs.\n * @param props\n */\nexport function useSliderState(props: SliderStateOptions): SliderState {\n  const {isDisabled, minValue = DEFAULT_MIN_VALUE, maxValue = DEFAULT_MAX_VALUE, numberFormatter: formatter, step = DEFAULT_STEP_VALUE} = props;\n\n  const [values, setValues] = useControlledState<number[]>(\n    props.value as any,\n    props.defaultValue ?? [minValue] as any,\n    props.onChange as any\n  );\n  const [isDraggings, setDraggings] = useState<boolean[]>(new Array(values.length).fill(false));\n  const isEditablesRef = useRef<boolean[]>(new Array(values.length).fill(true));\n  const [focusedIndex, setFocusedIndex] = useState<number | undefined>(undefined);\n\n  const valuesRef = useRef<number[]>(null);\n  valuesRef.current = values;\n  const isDraggingsRef = useRef<boolean[]>(null);\n  isDraggingsRef.current = isDraggings;\n\n  function getValuePercent(value: number) {\n    return (value - minValue) / (maxValue - minValue);\n  }\n\n  function getThumbMinValue(index: number) {\n    return index === 0 ? minValue : values[index - 1];\n  }\n  function getThumbMaxValue(index: number) {\n    return index === values.length - 1 ? maxValue : values[index + 1];\n  }\n\n  function isThumbEditable(index: number) {\n    return isEditablesRef.current[index];\n  }\n\n  function setThumbEditable(index: number, editable: boolean) {\n    isEditablesRef.current[index] = editable;\n  }\n\n  function updateValue(index: number, value: number) {\n    if (isDisabled || !isThumbEditable(index)) {\n      return;\n    }\n    const thisMin = getThumbMinValue(index);\n    const thisMax = getThumbMaxValue(index);\n\n    // Round value to multiple of step, clamp value between min and max\n    value = snapValueToStep(value, thisMin, thisMax, step);\n    valuesRef.current = replaceIndex(valuesRef.current, index, value);\n    setValues(valuesRef.current);\n  }\n\n  function updateDragging(index: number, dragging: boolean) {\n    if (isDisabled || !isThumbEditable(index)) {\n      return;\n    }\n\n    const wasDragging = isDraggingsRef.current[index];\n    isDraggingsRef.current = replaceIndex(isDraggingsRef.current, index, dragging);\n    setDraggings(isDraggingsRef.current);\n\n    // Call onChangeEnd if no handles are dragging.\n    if (props.onChangeEnd && wasDragging && !isDraggingsRef.current.some(Boolean)) {\n      props.onChangeEnd(valuesRef.current);\n    }\n  }\n\n  function getFormattedValue(value: number) {\n    return formatter.format(value);\n  }\n\n  function setThumbPercent(index: number, percent: number) {\n    updateValue(index, getPercentValue(percent));\n  }\n\n  function getRoundedValue(value: number) {\n    return Math.round((value - minValue) / step) * step + minValue;\n  }\n\n  function getPercentValue(percent: number) {\n    const val = percent * (maxValue - minValue) + minValue;\n    return clamp(getRoundedValue(val), minValue, maxValue);\n  }\n\n  return {\n    values: values,\n    getThumbValue: (index: number) => values[index],\n    setThumbValue: updateValue,\n    setThumbPercent,\n    isThumbDragging: (index: number) => isDraggings[index],\n    setThumbDragging: updateDragging,\n    focusedThumb: focusedIndex,\n    setFocusedThumb: setFocusedIndex,\n    getThumbPercent: (index: number) => getValuePercent(values[index]),\n    getValuePercent,\n    getThumbValueLabel: (index: number) => getFormattedValue(values[index]),\n    getFormattedValue,\n    getThumbMinValue,\n    getThumbMaxValue,\n    getPercentValue,\n    isThumbEditable,\n    setThumbEditable,\n    step\n  };\n}\n\nfunction replaceIndex<T>(array: T[], index: number, value: T) {\n  if (array[index] === value) {\n    return array;\n  }\n\n  return [...array.slice(0, index), value, ...array.slice(index + 1)];\n}\n"]},"metadata":{},"sourceType":"module"}