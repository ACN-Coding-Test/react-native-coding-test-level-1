{"ast":null,"code":"import React from 'react';\nimport Text from \"../components/primitives/Text\";\nexport var wrapStringChild = function wrapStringChild(children, textProps) {\n  return React.Children.map(children, function (child) {\n    var _child$props, _child$props2;\n    return typeof child === 'string' || typeof child === 'number' || (child === null || child === void 0 ? void 0 : child.type) === React.Fragment && (typeof ((_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.children) === 'string' || typeof ((_child$props2 = child.props) === null || _child$props2 === void 0 ? void 0 : _child$props2.children) === 'number') ? React.createElement(Text, textProps, child) : child;\n  });\n};","map":{"version":3,"sources":["wrapStringChild.tsx"],"names":["React","Text","wrapStringChild","children","textProps","Children","map","child","type","Fragment","props"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP;AAEA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAe,CAAIC,QAAD,EAAgBC,SAAhB,EAAmC;EAChE,OAAO,KAAK,CAACC,QAAN,CAAeC,GAAf,CAAmBH,QAAnB,EAA8BI,UAAAA,KAAD,EAAW;IAAA,IAAA,YAAA,EAAA,aAAA;IAC7C,OAAO,OAAOA,KAAP,KAAiB,QAAjB,IACL,OAAOA,KAAP,KAAiB,QADZ,IAEJ,CAAA,KAAK,KAAA,IAAL,IAAA,KAAK,KAAA,KAAA,CAAL,GAAA,KAAA,CAAA,GAAA,KAAK,CAAEC,IAAP,MAAgBR,KAAK,CAACS,QAAtB,KACE,QAAA,CAAA,YAAA,GAAOF,KAAK,CAACG,KAAb,MAAA,IAAA,IAAA,YAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAOH,YAAAA,CAAaJ,QAApB,CAAA,KAAiC,QAAjC,IACC,QAAA,CAAA,aAAA,GAAOI,KAAK,CAACG,KAAb,MAAA,IAAA,IAAA,aAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAOH,aAAAA,CAAaJ,QAApB,CAAA,KAAiC,QAFpC,CAFI,GAKL,KAAA,CAAA,aAAA,CAAC,IAAD,EAAUC,SAAV,EAAsBG,KAAtB,CALK,GAOLA,KAPF;EASD,CAVM,CAAP;AAWD,CAZM","sourcesContent":["import React from 'react';\nimport Text from '../components/primitives/Text';\n\nexport const wrapStringChild = (children: any, textProps: any) => {\n  return React.Children.map(children, (child) => {\n    return typeof child === 'string' ||\n      typeof child === 'number' ||\n      (child?.type === React.Fragment &&\n        (typeof child.props?.children === 'string' ||\n          typeof child.props?.children === 'number')) ? (\n      <Text {...textProps}>{child}</Text>\n    ) : (\n      child\n    );\n  });\n};\n"]},"metadata":{},"sourceType":"module"}