{"ast":null,"code":"import { useSlotId as $iD7q0$useSlotId, mergeProps as $iD7q0$mergeProps, useId as $iD7q0$useId, useLabels as $iD7q0$useLabels } from \"@react-aria/utils\";\nfunction $d191a55c9702f145$export$8467354a121f1b9f(props) {\n  var id = props.id,\n    label = props.label,\n    ariaLabelledby = props['aria-labelledby'],\n    ariaLabel = props['aria-label'],\n    _props$labelElementTy = props.labelElementType,\n    labelElementType = _props$labelElementTy === void 0 ? 'label' : _props$labelElementTy;\n  id = $iD7q0$useId(id);\n  var labelId = $iD7q0$useId();\n  var labelProps = {};\n  if (label) {\n    ariaLabelledby = ariaLabelledby ? ariaLabelledby + \" \" + labelId : labelId;\n    labelProps = {\n      id: labelId,\n      htmlFor: labelElementType === 'label' ? id : undefined\n    };\n  } else if (!ariaLabelledby && !ariaLabel) console.warn('If you do not provide a visible label, you must specify an aria-label or aria-labelledby attribute for accessibility');\n  var fieldProps = $iD7q0$useLabels({\n    id: id,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby\n  });\n  return {\n    labelProps: labelProps,\n    fieldProps: fieldProps\n  };\n}\nfunction $2baaea4c71418dea$export$294aa081a6c6f55d(props) {\n  var description = props.description,\n    errorMessage = props.errorMessage,\n    validationState = props.validationState;\n  var _$d191a55c9702f145$ex = $d191a55c9702f145$export$8467354a121f1b9f(props),\n    labelProps = _$d191a55c9702f145$ex.labelProps,\n    fieldProps = _$d191a55c9702f145$ex.fieldProps;\n  var descriptionId = $iD7q0$useSlotId([Boolean(description), Boolean(errorMessage), validationState]);\n  var errorMessageId = $iD7q0$useSlotId([Boolean(description), Boolean(errorMessage), validationState]);\n  fieldProps = $iD7q0$mergeProps(fieldProps, {\n    'aria-describedby': [descriptionId,\n    errorMessageId, props['aria-describedby']].filter(Boolean).join(' ') || undefined\n  });\n  return {\n    labelProps: labelProps,\n    fieldProps: fieldProps,\n    descriptionProps: {\n      id: descriptionId\n    },\n    errorMessageProps: {\n      id: errorMessageId\n    }\n  };\n}\nexport { $2baaea4c71418dea$export$294aa081a6c6f55d as useField, $d191a55c9702f145$export$8467354a121f1b9f as useLabel };","map":{"version":3,"sources":["packages/@react-aria/label/src/useField.ts","packages/@react-aria/label/src/useLabel.ts"],"names":[],"mappings":";SCoCgB,yCAAQ,CAAC,KAAqB,EAAa;EACzD,IACE,EAAE,GAKA,KAAK,CANJ,EAAA;IAEH,KAAK,GAIH,KAAK,CALL,KAAA;IAEiB,cAAc,GAG/B,KAAK,CAHP,iBAAiB;IACH,SAAS,GAErB,KAAK,CAFP,YAAY;IAAA,wBAEV,KAAK,CAFgB,gBAAA;IACvB,gBAAgB,sCAAG,OAAO;EAG5B,EAAE,GAAG,YAAK,CAAC,EAAE,CAAA;EACb,IAAI,OAAO,GAAG,YAAK,EAAA;EACnB,IAAI,UAAU,GAAG,CAAC,CAAC;EACnB,IAAI,KAAK,EAAE;IACT,cAAc,GAAG,cAAc,GAAM,cAAc,SAAI,OAAO,GAAK,OAAO;IAC1E,UAAU,GAAG;MACX,EAAE,EAAE,OAAO;MACX,OAAO,EAAE,gBAAgB,KAAK,OAAO,GAAG,EAAE,GAAG;IAC/C,CAAC;EACH,CAAC,MAAM,IAAE,CAAG,cAAc,IAAA,CAAK,SAAS,EACtC,OAAO,CAAC,IAAI,CAAC,sHAAsH,CAAA;EAGrI,IAAI,UAAU,GAAG,gBAAS,CAAC;QACzB,EAAE;IACF,YAAY,EAAE,SAAS;IACvB,iBAAiB,EAAE;EACrB,CAAC,CAAA;EAED,OAAO;gBACL,UAAU;gBACV;EACF,CAAC;AACH;SDtCgB,yCAAQ,CAAC,KAAqB,EAAa;EACzD,IAAK,WAAW,GAAmC,KAAK,CAAnD,WAAA;IAAa,YAAY,GAAqB,KAAK,CAAxC,YAAA;IAAgB,eAAe,GAAI,KAAK,CAA1B,eAAA;EAC9B,4BAA+B,yCAAQ,CAAC,KAAK,CAAA;IAAxC,UAAU,yBAAV,UAAA;IAAY,UAAU,yBAAZ,UAAA;EAEf,IAAI,aAAa,GAAG,gBAAS,CAAC,CAAC,OAAO,CAAC,WAAW,CAAA,EAAG,OAAO,CAAC,YAAY,CAAA,EAAG,eAAe,CAAC,CAAA;EAC5F,IAAI,cAAc,GAAG,gBAAS,CAAC,CAAC,OAAO,CAAC,WAAW,CAAA,EAAG,OAAO,CAAC,YAAY,CAAA,EAAG,eAAe,CAAC,CAAA;EAE7F,UAAU,GAAG,iBAAU,CAAC,UAAU,EAAE;IAClC,kBAAkB,EAAE,CAClB,aAAa;IAEb,cAAc,EACd,KAAK,CAAC,kBAAkB,CAAA,CACzB,CAAC,MAAM,CAAC,OAAO,CAAA,CAAE,IAAI,CAAC,GAAG,CAAA,IAAK;EACjC,CAAC,CAAA;EAED,OAAO;gBACL,UAAU;gBACV,UAAU;IACV,gBAAgB,EAAE;MAChB,EAAE,EAAE;IACN,CAAC;IACD,iBAAiB,EAAE;MACjB,EAAE,EAAE;IACN;EACF,CAAC;AACH","sourcesContent":["/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, HelpTextProps, Validation} from '@react-types/shared';\nimport {LabelAria, LabelAriaProps, useLabel} from './useLabel';\nimport {mergeProps, useSlotId} from '@react-aria/utils';\n\nexport interface AriaFieldProps extends LabelAriaProps, HelpTextProps, Omit<Validation, 'isRequired'> {}\n\nexport interface FieldAria extends LabelAria {\n  /** Props for the description element, if any. */\n  descriptionProps: DOMAttributes,\n  /** Props for the error message element, if any. */\n  errorMessageProps: DOMAttributes\n}\n\n/**\n * Provides the accessibility implementation for input fields.\n * Fields accept user input, gain context from their label, and may display a description or error message.\n * @param props - Props for the Field.\n */\nexport function useField(props: AriaFieldProps): FieldAria {\n  let {description, errorMessage, validationState} = props;\n  let {labelProps, fieldProps} = useLabel(props);\n\n  let descriptionId = useSlotId([Boolean(description), Boolean(errorMessage), validationState]);\n  let errorMessageId = useSlotId([Boolean(description), Boolean(errorMessage), validationState]);\n\n  fieldProps = mergeProps(fieldProps, {\n    'aria-describedby': [\n      descriptionId,\n      // Use aria-describedby for error message because aria-errormessage is unsupported using VoiceOver or NVDA. See https://github.com/adobe/react-spectrum/issues/1346#issuecomment-740136268\n      errorMessageId,\n      props['aria-describedby']\n    ].filter(Boolean).join(' ') || undefined\n  });\n\n  return {\n    labelProps,\n    fieldProps,\n    descriptionProps: {\n      id: descriptionId\n    },\n    errorMessageProps: {\n      id: errorMessageId\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLabelingProps, DOMAttributes, DOMProps, LabelableProps} from '@react-types/shared';\nimport {ElementType, LabelHTMLAttributes} from 'react';\nimport {useId, useLabels} from '@react-aria/utils';\n\nexport interface LabelAriaProps extends LabelableProps, DOMProps, AriaLabelingProps {\n  /**\n   * The HTML element used to render the label, e.g. 'label', or 'span'.\n   * @default 'label'\n   */\n  labelElementType?: ElementType\n}\n\nexport interface LabelAria {\n  /** Props to apply to the label container element. */\n  labelProps: DOMAttributes | LabelHTMLAttributes<HTMLLabelElement>,\n  /** Props to apply to the field container element being labeled. */\n  fieldProps: AriaLabelingProps & DOMProps\n}\n\n/**\n * Provides the accessibility implementation for labels and their associated elements.\n * Labels provide context for user inputs.\n * @param props - The props for labels and fields.\n */\nexport function useLabel(props: LabelAriaProps): LabelAria {\n  let {\n    id,\n    label,\n    'aria-labelledby': ariaLabelledby,\n    'aria-label': ariaLabel,\n    labelElementType = 'label'\n  } = props;\n\n  id = useId(id);\n  let labelId = useId();\n  let labelProps = {};\n  if (label) {\n    ariaLabelledby = ariaLabelledby ? `${ariaLabelledby} ${labelId}` : labelId;\n    labelProps = {\n      id: labelId,\n      htmlFor: labelElementType === 'label' ? id : undefined\n    };\n  } else if (!ariaLabelledby && !ariaLabel) {\n    console.warn('If you do not provide a visible label, you must specify an aria-label or aria-labelledby attribute for accessibility');\n  }\n\n  let fieldProps = useLabels({\n    id,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby\n  });\n\n  return {\n    labelProps,\n    fieldProps\n  };\n}\n"]},"metadata":{},"sourceType":"module"}