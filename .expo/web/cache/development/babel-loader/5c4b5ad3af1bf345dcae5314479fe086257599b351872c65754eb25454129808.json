{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"styleInterpolator\", \"interpolationIndex\", \"current\", \"gesture\", \"next\", \"layout\", \"insets\", \"overlay\", \"overlayEnabled\", \"shadowEnabled\", \"gestureEnabled\", \"gestureDirection\", \"pageOverflowEnabled\", \"headerDarkContent\", \"children\", \"containerStyle\", \"contentStyle\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport Color from 'color';\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { forModalPresentationIOS } from \"../../TransitionConfigs/CardStyleInterpolators\";\nimport CardAnimationContext from \"../../utils/CardAnimationContext\";\nimport getDistanceForDirection from \"../../utils/getDistanceForDirection\";\nimport getInvertedMultiplier from \"../../utils/getInvertedMultiplier\";\nimport memoize from \"../../utils/memoize\";\nimport { GestureState, PanGestureHandler } from \"../GestureHandler\";\nimport ModalStatusBarManager from \"../ModalStatusBarManager\";\nimport CardSheet from \"./CardSheet\";\nvar GESTURE_VELOCITY_IMPACT = 0.3;\nvar TRUE = 1;\nvar FALSE = 0;\nvar GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nvar GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\nvar useNativeDriver = Platform.OS !== 'web';\nvar hasOpacityStyle = function hasOpacityStyle(style) {\n  if (style) {\n    var flattenedStyle = StyleSheet.flatten(style);\n    return flattenedStyle.opacity != null;\n  }\n  return false;\n};\nvar Card = function (_React$Component) {\n  _inherits(Card, _React$Component);\n  var _super = _createSuper(Card);\n  function Card() {\n    var _this;\n    _classCallCheck(this, Card);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.isCurrentlyMounted = false;\n    _this.isClosing = new Animated.Value(FALSE);\n    _this.inverted = new Animated.Value(getInvertedMultiplier(_this.props.gestureDirection));\n    _this.layout = {\n      width: new Animated.Value(_this.props.layout.width),\n      height: new Animated.Value(_this.props.layout.height)\n    };\n    _this.isSwiping = new Animated.Value(FALSE);\n    _this.animate = function (_ref2) {\n      var closing = _ref2.closing,\n        velocity = _ref2.velocity;\n      var _this$props = _this.props,\n        gesture = _this$props.gesture,\n        transitionSpec = _this$props.transitionSpec,\n        onOpen = _this$props.onOpen,\n        onClose = _this$props.onClose,\n        onTransition = _this$props.onTransition;\n      var toValue = _this.getAnimateToValue(_objectSpread(_objectSpread({}, _this.props), {}, {\n        closing: closing\n      }));\n      _this.lastToValue = toValue;\n      _this.isClosing.setValue(closing ? TRUE : FALSE);\n      var spec = closing ? transitionSpec.close : transitionSpec.open;\n      var animation = spec.animation === 'spring' ? Animated.spring : Animated.timing;\n      _this.setPointerEventsEnabled(!closing);\n      _this.handleStartInteraction();\n      clearTimeout(_this.pendingGestureCallback);\n      onTransition === null || onTransition === void 0 ? void 0 : onTransition({\n        closing: closing,\n        gesture: velocity !== undefined\n      });\n      animation(gesture, _objectSpread(_objectSpread({}, spec.config), {}, {\n        velocity: velocity,\n        toValue: toValue,\n        useNativeDriver: useNativeDriver,\n        isInteraction: false\n      })).start(function (_ref3) {\n        var finished = _ref3.finished;\n        _this.handleEndInteraction();\n        clearTimeout(_this.pendingGestureCallback);\n        if (finished) {\n          if (closing) {\n            onClose();\n          } else {\n            onOpen();\n          }\n          if (_this.isCurrentlyMounted) {\n            _this.forceUpdate();\n          }\n        }\n      });\n    };\n    _this.getAnimateToValue = function (_ref4) {\n      var closing = _ref4.closing,\n        layout = _ref4.layout,\n        gestureDirection = _ref4.gestureDirection;\n      if (!closing) {\n        return 0;\n      }\n      return getDistanceForDirection(layout, gestureDirection);\n    };\n    _this.setPointerEventsEnabled = function (enabled) {\n      var _this$ref$current;\n      var pointerEvents = enabled ? 'box-none' : 'none';\n      (_this$ref$current = _this.ref.current) === null || _this$ref$current === void 0 ? void 0 : _this$ref$current.setPointerEvents(pointerEvents);\n    };\n    _this.handleStartInteraction = function () {\n      if (_this.interactionHandle === undefined) {\n        _this.interactionHandle = InteractionManager.createInteractionHandle();\n      }\n    };\n    _this.handleEndInteraction = function () {\n      if (_this.interactionHandle !== undefined) {\n        InteractionManager.clearInteractionHandle(_this.interactionHandle);\n        _this.interactionHandle = undefined;\n      }\n    };\n    _this.handleGestureStateChange = function (_ref5) {\n      var nativeEvent = _ref5.nativeEvent;\n      var _this$props2 = _this.props,\n        layout = _this$props2.layout,\n        onClose = _this$props2.onClose,\n        onGestureBegin = _this$props2.onGestureBegin,\n        onGestureCanceled = _this$props2.onGestureCanceled,\n        onGestureEnd = _this$props2.onGestureEnd,\n        gestureDirection = _this$props2.gestureDirection,\n        gestureVelocityImpact = _this$props2.gestureVelocityImpact;\n      switch (nativeEvent.state) {\n        case GestureState.ACTIVE:\n          _this.isSwiping.setValue(TRUE);\n          _this.handleStartInteraction();\n          onGestureBegin === null || onGestureBegin === void 0 ? void 0 : onGestureBegin();\n          break;\n        case GestureState.CANCELLED:\n          {\n            _this.isSwiping.setValue(FALSE);\n            _this.handleEndInteraction();\n            var velocity = gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? nativeEvent.velocityY : nativeEvent.velocityX;\n            _this.animate({\n              closing: _this.props.closing,\n              velocity: velocity\n            });\n            onGestureCanceled === null || onGestureCanceled === void 0 ? void 0 : onGestureCanceled();\n            break;\n          }\n        case GestureState.END:\n          {\n            _this.isSwiping.setValue(FALSE);\n            var distance;\n            var translation;\n            var _velocity;\n            if (gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted') {\n              distance = layout.height;\n              translation = nativeEvent.translationY;\n              _velocity = nativeEvent.velocityY;\n            } else {\n              distance = layout.width;\n              translation = nativeEvent.translationX;\n              _velocity = nativeEvent.velocityX;\n            }\n            var closing = (translation + _velocity * gestureVelocityImpact) * getInvertedMultiplier(gestureDirection) > distance / 2 ? _velocity !== 0 || translation !== 0 : _this.props.closing;\n            _this.animate({\n              closing: closing,\n              velocity: _velocity\n            });\n            if (closing) {\n              _this.pendingGestureCallback = setTimeout(function () {\n                onClose();\n                _this.forceUpdate();\n              }, 32);\n            }\n            onGestureEnd === null || onGestureEnd === void 0 ? void 0 : onGestureEnd();\n            break;\n          }\n      }\n    };\n    _this.getInterpolatedStyle = memoize(function (styleInterpolator, animation) {\n      return styleInterpolator(animation);\n    });\n    _this.getCardAnimation = memoize(function (interpolationIndex, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) {\n      return {\n        index: interpolationIndex,\n        current: {\n          progress: current\n        },\n        next: next && {\n          progress: next\n        },\n        closing: _this.isClosing,\n        swiping: _this.isSwiping,\n        inverted: _this.inverted,\n        layouts: {\n          screen: layout\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft\n        }\n      };\n    });\n    _this.ref = React.createRef();\n    return _this;\n  }\n  _createClass(Card, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.animate({\n        closing: this.props.closing\n      });\n      this.isCurrentlyMounted = true;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props3 = this.props,\n        layout = _this$props3.layout,\n        gestureDirection = _this$props3.gestureDirection,\n        closing = _this$props3.closing;\n      var width = layout.width,\n        height = layout.height;\n      if (width !== prevProps.layout.width) {\n        this.layout.width.setValue(width);\n      }\n      if (height !== prevProps.layout.height) {\n        this.layout.height.setValue(height);\n      }\n      if (gestureDirection !== prevProps.gestureDirection) {\n        this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n      }\n      var toValue = this.getAnimateToValue(this.props);\n      if (this.getAnimateToValue(prevProps) !== toValue || this.lastToValue !== toValue) {\n        this.animate({\n          closing: closing\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.gesture.stopAnimation();\n      this.isCurrentlyMounted = false;\n      this.handleEndInteraction();\n    }\n  }, {\n    key: \"gestureActivationCriteria\",\n    value: function gestureActivationCriteria() {\n      var _this$props4 = this.props,\n        layout = _this$props4.layout,\n        gestureDirection = _this$props4.gestureDirection,\n        gestureResponseDistance = _this$props4.gestureResponseDistance;\n      var enableTrackpadTwoFingerGesture = true;\n      var distance = gestureResponseDistance !== undefined ? gestureResponseDistance : gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? GESTURE_RESPONSE_DISTANCE_VERTICAL : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n      if (gestureDirection === 'vertical') {\n        return {\n          maxDeltaX: 15,\n          minOffsetY: 5,\n          hitSlop: {\n            bottom: -layout.height + distance\n          },\n          enableTrackpadTwoFingerGesture: enableTrackpadTwoFingerGesture\n        };\n      } else if (gestureDirection === 'vertical-inverted') {\n        return {\n          maxDeltaX: 15,\n          minOffsetY: -5,\n          hitSlop: {\n            top: -layout.height + distance\n          },\n          enableTrackpadTwoFingerGesture: enableTrackpadTwoFingerGesture\n        };\n      } else {\n        var hitSlop = -layout.width + distance;\n        var invertedMultiplier = getInvertedMultiplier(gestureDirection);\n        if (invertedMultiplier === 1) {\n          return {\n            minOffsetX: 5,\n            maxDeltaY: 20,\n            hitSlop: {\n              right: hitSlop\n            },\n            enableTrackpadTwoFingerGesture: enableTrackpadTwoFingerGesture\n          };\n        } else {\n          return {\n            minOffsetX: -5,\n            maxDeltaY: 20,\n            hitSlop: {\n              left: hitSlop\n            },\n            enableTrackpadTwoFingerGesture: enableTrackpadTwoFingerGesture\n          };\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n        styleInterpolator = _this$props5.styleInterpolator,\n        interpolationIndex = _this$props5.interpolationIndex,\n        current = _this$props5.current,\n        gesture = _this$props5.gesture,\n        next = _this$props5.next,\n        layout = _this$props5.layout,\n        insets = _this$props5.insets,\n        overlay = _this$props5.overlay,\n        overlayEnabled = _this$props5.overlayEnabled,\n        shadowEnabled = _this$props5.shadowEnabled,\n        gestureEnabled = _this$props5.gestureEnabled,\n        gestureDirection = _this$props5.gestureDirection,\n        pageOverflowEnabled = _this$props5.pageOverflowEnabled,\n        headerDarkContent = _this$props5.headerDarkContent,\n        children = _this$props5.children,\n        customContainerStyle = _this$props5.containerStyle,\n        contentStyle = _this$props5.contentStyle,\n        rest = _objectWithoutProperties(_this$props5, _excluded);\n      var interpolationProps = this.getCardAnimation(interpolationIndex, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);\n      var interpolatedStyle = this.getInterpolatedStyle(styleInterpolator, interpolationProps);\n      var containerStyle = interpolatedStyle.containerStyle,\n        cardStyle = interpolatedStyle.cardStyle,\n        overlayStyle = interpolatedStyle.overlayStyle,\n        shadowStyle = interpolatedStyle.shadowStyle;\n      var handleGestureEvent = gestureEnabled ? Animated.event([{\n        nativeEvent: gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? {\n          translationY: gesture\n        } : {\n          translationX: gesture\n        }\n      }], {\n        useNativeDriver: useNativeDriver\n      }) : undefined;\n      var _StyleSheet$flatten = StyleSheet.flatten(contentStyle || {}),\n        backgroundColor = _StyleSheet$flatten.backgroundColor;\n      var isTransparent = typeof backgroundColor === 'string' ? Color(backgroundColor).alpha() === 0 : false;\n      return React.createElement(CardAnimationContext.Provider, {\n        value: interpolationProps\n      }, Platform.OS === 'ios' && overlayEnabled && next && getIsModalPresentation(styleInterpolator) ? React.createElement(ModalStatusBarManager, {\n        dark: headerDarkContent,\n        layout: layout,\n        insets: insets,\n        style: cardStyle\n      }) : null, React.createElement(Animated.View, {\n        style: {\n          opacity: current\n        },\n        collapsable: false\n      }), React.createElement(View, _extends({\n        pointerEvents: \"box-none\"\n      }, rest), overlayEnabled ? React.createElement(View, {\n        pointerEvents: \"box-none\",\n        style: StyleSheet.absoluteFill\n      }, overlay({\n        style: overlayStyle\n      })) : null, React.createElement(Animated.View, {\n        style: [styles.container, containerStyle, customContainerStyle],\n        pointerEvents: \"box-none\"\n      }, React.createElement(PanGestureHandler, _extends({\n        enabled: layout.width !== 0 && gestureEnabled,\n        onGestureEvent: handleGestureEvent,\n        onHandlerStateChange: this.handleGestureStateChange\n      }, this.gestureActivationCriteria()), React.createElement(Animated.View, {\n        needsOffscreenAlphaCompositing: hasOpacityStyle(cardStyle),\n        style: [styles.container, cardStyle]\n      }, shadowEnabled && shadowStyle && !isTransparent ? React.createElement(Animated.View, {\n        style: [styles.shadow, gestureDirection === 'horizontal' ? [styles.shadowHorizontal, styles.shadowLeft] : gestureDirection === 'horizontal-inverted' ? [styles.shadowHorizontal, styles.shadowRight] : gestureDirection === 'vertical' ? [styles.shadowVertical, styles.shadowTop] : [styles.shadowVertical, styles.shadowBottom], {\n          backgroundColor: backgroundColor\n        }, shadowStyle],\n        pointerEvents: \"none\"\n      }) : null, React.createElement(CardSheet, {\n        ref: this.ref,\n        enabled: pageOverflowEnabled,\n        layout: layout,\n        style: contentStyle\n      }, children))))));\n    }\n  }]);\n  return Card;\n}(React.Component);\nCard.defaultProps = {\n  shadowEnabled: false,\n  gestureEnabled: true,\n  gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n  overlay: function overlay(_ref) {\n    var style = _ref.style;\n    return style ? React.createElement(Animated.View, {\n      pointerEvents: \"none\",\n      style: [styles.overlay, style]\n    }) : null;\n  }\n};\nexport { Card as default };\nexport var getIsModalPresentation = function getIsModalPresentation(cardStyleInterpolator) {\n  return cardStyleInterpolator === forModalPresentationIOS || cardStyleInterpolator.name === 'forModalPresentationIOS';\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000'\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: {\n      width: -1,\n      height: 1\n    }\n  },\n  shadowLeft: {\n    left: 0\n  },\n  shadowRight: {\n    right: 0\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: {\n      width: 1,\n      height: -1\n    }\n  },\n  shadowTop: {\n    top: 0\n  },\n  shadowBottom: {\n    bottom: 0\n  }\n});","map":{"version":3,"mappings":"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","names":["Color","React","forModalPresentationIOS","CardAnimationContext","getDistanceForDirection","getInvertedMultiplier","memoize","GestureState","PanGestureHandler","ModalStatusBarManager","CardSheet","GESTURE_VELOCITY_IMPACT","TRUE","FALSE","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","useNativeDriver","Platform","OS","hasOpacityStyle","style","flattenedStyle","StyleSheet","flatten","opacity","Card","isCurrentlyMounted","isClosing","Animated","Value","inverted","props","gestureDirection","layout","width","height","isSwiping","animate","closing","_ref2","velocity","gesture","transitionSpec","onOpen","onClose","onTransition","toValue","getAnimateToValue","lastToValue","setValue","spec","close","open","animation","spring","timing","setPointerEventsEnabled","handleStartInteraction","clearTimeout","pendingGestureCallback","undefined","config","isInteraction","start","finished","_ref3","handleEndInteraction","forceUpdate","_ref4","enabled","pointerEvents","ref","current","_this$ref$current","setPointerEvents","interactionHandle","InteractionManager","createInteractionHandle","clearInteractionHandle","handleGestureStateChange","nativeEvent","_ref5","onGestureBegin","onGestureCanceled","onGestureEnd","gestureVelocityImpact","state","ACTIVE","CANCELLED","velocityY","velocityX","END","distance","translation","translationY","translationX","setTimeout","getInterpolatedStyle","styleInterpolator","getCardAnimation","interpolationIndex","next","insetTop","insetRight","insetBottom","insetLeft","index","progress","swiping","layouts","screen","insets","top","right","bottom","left","createRef","componentDidMount","componentDidUpdate","prevProps","componentWillUnmount","stopAnimation","gestureActivationCriteria","gestureResponseDistance","enableTrackpadTwoFingerGesture","maxDeltaX","minOffsetY","hitSlop","invertedMultiplier","minOffsetX","maxDeltaY","render","overlay","overlayEnabled","shadowEnabled","gestureEnabled","pageOverflowEnabled","headerDarkContent","children","customContainerStyle","containerStyle","contentStyle","rest","interpolationProps","interpolatedStyle","cardStyle","overlayStyle","shadowStyle","handleGestureEvent","event","backgroundColor","isTransparent","alpha","Provider","value","getIsModalPresentation","dark","View","collapsable","absoluteFill","styles","container","onGestureEvent","onHandlerStateChange","needsOffscreenAlphaCompositing","shadow","shadowHorizontal","shadowLeft","shadowRight","shadowVertical","shadowTop","shadowBottom","Component","defaultProps","_ref","cardStyleInterpolator","name","create","flex","position","shadowRadius","shadowColor","shadowOpacity","shadowOffset"],"sources":["C:\\Users\\sarah.anis.ismail\\OneDrive - Accenture\\Documents\\React Native\\react-native-coding-test-level-1\\node_modules\\@react-navigation\\stack\\src\\views\\Stack\\Card.tsx"],"sourcesContent":["import Color from 'color';\nimport * as React from 'react';\nimport {\n  Animated,\n  InteractionManager,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewProps,\n  ViewStyle,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport { forModalPresentationIOS } from '../../TransitionConfigs/CardStyleInterpolators';\nimport type {\n  GestureDirection,\n  Layout,\n  StackCardInterpolationProps,\n  StackCardStyleInterpolator,\n  TransitionSpec,\n} from '../../types';\nimport CardAnimationContext from '../../utils/CardAnimationContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport getInvertedMultiplier from '../../utils/getInvertedMultiplier';\nimport memoize from '../../utils/memoize';\nimport {\n  GestureState,\n  PanGestureHandler,\n  PanGestureHandlerGestureEvent,\n} from '../GestureHandler';\nimport ModalStatusBarManager from '../ModalStatusBarManager';\nimport CardSheet, { CardSheetRef } from './CardSheet';\n\ntype Props = ViewProps & {\n  interpolationIndex: number;\n  closing: boolean;\n  next?: Animated.AnimatedInterpolation;\n  current: Animated.AnimatedInterpolation;\n  gesture: Animated.Value;\n  layout: Layout;\n  insets: EdgeInsets;\n  headerDarkContent: boolean | undefined;\n  pageOverflowEnabled: boolean;\n  gestureDirection: GestureDirection;\n  onOpen: () => void;\n  onClose: () => void;\n  onTransition: (props: { closing: boolean; gesture: boolean }) => void;\n  onGestureBegin: () => void;\n  onGestureCanceled: () => void;\n  onGestureEnd: () => void;\n  children: React.ReactNode;\n  overlay: (props: {\n    style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  }) => React.ReactNode;\n  overlayEnabled: boolean;\n  shadowEnabled: boolean;\n  gestureEnabled: boolean;\n  gestureResponseDistance?: number;\n  gestureVelocityImpact: number;\n  transitionSpec: {\n    open: TransitionSpec;\n    close: TransitionSpec;\n  };\n  styleInterpolator: StackCardStyleInterpolator;\n  containerStyle?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n};\n\nconst GESTURE_VELOCITY_IMPACT = 0.3;\n\nconst TRUE = 1;\nconst FALSE = 0;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\nconst hasOpacityStyle = (style: any) => {\n  if (style) {\n    const flattenedStyle = StyleSheet.flatten(style);\n    return flattenedStyle.opacity != null;\n  }\n\n  return false;\n};\n\nexport default class Card extends React.Component<Props> {\n  static defaultProps = {\n    shadowEnabled: false,\n    gestureEnabled: true,\n    gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n    overlay: ({\n      style,\n    }: {\n      style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n    }) =>\n      style ? (\n        <Animated.View pointerEvents=\"none\" style={[styles.overlay, style]} />\n      ) : null,\n  };\n\n  componentDidMount() {\n    this.animate({ closing: this.props.closing });\n    this.isCurrentlyMounted = true;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { layout, gestureDirection, closing } = this.props;\n    const { width, height } = layout;\n\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n    }\n\n    const toValue = this.getAnimateToValue(this.props);\n\n    if (\n      this.getAnimateToValue(prevProps) !== toValue ||\n      this.lastToValue !== toValue\n    ) {\n      // We need to trigger the animation when route was closed\n      // Thr route might have been closed by a `POP` action or by a gesture\n      // When route was closed due to a gesture, the animation would've happened already\n      // It's still important to trigger the animation so that `onClose` is called\n      // If `onClose` is not called, cleanup step won't be performed for gestures\n      this.animate({ closing });\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.gesture.stopAnimation();\n    this.isCurrentlyMounted = false;\n    this.handleEndInteraction();\n  }\n\n  private isCurrentlyMounted = false;\n\n  private isClosing = new Animated.Value(FALSE);\n\n  private inverted = new Animated.Value(\n    getInvertedMultiplier(this.props.gestureDirection)\n  );\n\n  private layout = {\n    width: new Animated.Value(this.props.layout.width),\n    height: new Animated.Value(this.props.layout.height),\n  };\n\n  private isSwiping = new Animated.Value(FALSE);\n\n  private interactionHandle: number | undefined;\n\n  private pendingGestureCallback: number | undefined;\n\n  private lastToValue: number | undefined;\n\n  private animate = ({\n    closing,\n    velocity,\n  }: {\n    closing: boolean;\n    velocity?: number;\n  }) => {\n    const { gesture, transitionSpec, onOpen, onClose, onTransition } =\n      this.props;\n\n    const toValue = this.getAnimateToValue({\n      ...this.props,\n      closing,\n    });\n\n    this.lastToValue = toValue;\n\n    this.isClosing.setValue(closing ? TRUE : FALSE);\n\n    const spec = closing ? transitionSpec.close : transitionSpec.open;\n\n    const animation =\n      spec.animation === 'spring' ? Animated.spring : Animated.timing;\n\n    this.setPointerEventsEnabled(!closing);\n    this.handleStartInteraction();\n\n    clearTimeout(this.pendingGestureCallback);\n\n    onTransition?.({ closing, gesture: velocity !== undefined });\n    animation(gesture, {\n      ...spec.config,\n      velocity,\n      toValue,\n      useNativeDriver,\n      isInteraction: false,\n    }).start(({ finished }) => {\n      this.handleEndInteraction();\n\n      clearTimeout(this.pendingGestureCallback);\n\n      if (finished) {\n        if (closing) {\n          onClose();\n        } else {\n          onOpen();\n        }\n\n        if (this.isCurrentlyMounted) {\n          // Make sure to re-open screen if it wasn't removed\n          this.forceUpdate();\n        }\n      }\n    });\n  };\n\n  private getAnimateToValue = ({\n    closing,\n    layout,\n    gestureDirection,\n  }: {\n    closing?: boolean;\n    layout: Layout;\n    gestureDirection: GestureDirection;\n  }) => {\n    if (!closing) {\n      return 0;\n    }\n\n    return getDistanceForDirection(layout, gestureDirection);\n  };\n\n  private setPointerEventsEnabled = (enabled: boolean) => {\n    const pointerEvents = enabled ? 'box-none' : 'none';\n\n    this.ref.current?.setPointerEvents(pointerEvents);\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleGestureStateChange = ({\n    nativeEvent,\n  }: PanGestureHandlerGestureEvent) => {\n    const {\n      layout,\n      onClose,\n      onGestureBegin,\n      onGestureCanceled,\n      onGestureEnd,\n      gestureDirection,\n      gestureVelocityImpact,\n    } = this.props;\n\n    switch (nativeEvent.state) {\n      case GestureState.ACTIVE:\n        this.isSwiping.setValue(TRUE);\n        this.handleStartInteraction();\n        onGestureBegin?.();\n        break;\n      case GestureState.CANCELLED: {\n        this.isSwiping.setValue(FALSE);\n        this.handleEndInteraction();\n\n        const velocity =\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n            ? nativeEvent.velocityY\n            : nativeEvent.velocityX;\n\n        this.animate({ closing: this.props.closing, velocity });\n\n        onGestureCanceled?.();\n        break;\n      }\n      case GestureState.END: {\n        this.isSwiping.setValue(FALSE);\n\n        let distance;\n        let translation;\n        let velocity;\n\n        if (\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n        ) {\n          distance = layout.height;\n          translation = nativeEvent.translationY;\n          velocity = nativeEvent.velocityY;\n        } else {\n          distance = layout.width;\n          translation = nativeEvent.translationX;\n          velocity = nativeEvent.velocityX;\n        }\n\n        const closing =\n          (translation + velocity * gestureVelocityImpact) *\n            getInvertedMultiplier(gestureDirection) >\n          distance / 2\n            ? velocity !== 0 || translation !== 0\n            : this.props.closing;\n\n        this.animate({ closing, velocity });\n\n        if (closing) {\n          // We call onClose with a delay to make sure that the animation has already started\n          // This will make sure that the state update caused by this doesn't affect start of animation\n          this.pendingGestureCallback = setTimeout(() => {\n            onClose();\n\n            // Trigger an update after we dispatch the action to remove the screen\n            // This will make sure that we check if the screen didn't get removed so we can cancel the animation\n            this.forceUpdate();\n          }, 32) as any as number;\n        }\n\n        onGestureEnd?.();\n        break;\n      }\n    }\n  };\n\n  // Memoize this to avoid extra work on re-render\n  private getInterpolatedStyle = memoize(\n    (\n      styleInterpolator: StackCardStyleInterpolator,\n      animation: StackCardInterpolationProps\n    ) => styleInterpolator(animation)\n  );\n\n  // Keep track of the animation context when deps changes.\n  private getCardAnimation = memoize(\n    (\n      interpolationIndex: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) => ({\n      index: interpolationIndex,\n      current: { progress: current },\n      next: next && { progress: next },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout,\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft,\n      },\n    })\n  );\n\n  private gestureActivationCriteria() {\n    const { layout, gestureDirection, gestureResponseDistance } = this.props;\n    const enableTrackpadTwoFingerGesture = true;\n\n    const distance =\n      gestureResponseDistance !== undefined\n        ? gestureResponseDistance\n        : gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n        ? GESTURE_RESPONSE_DISTANCE_VERTICAL\n        : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: { bottom: -layout.height + distance },\n        enableTrackpadTwoFingerGesture,\n      };\n    } else if (gestureDirection === 'vertical-inverted') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: -5,\n        hitSlop: { top: -layout.height + distance },\n        enableTrackpadTwoFingerGesture,\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n      const invertedMultiplier = getInvertedMultiplier(gestureDirection);\n\n      if (invertedMultiplier === 1) {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: { right: hitSlop },\n          enableTrackpadTwoFingerGesture,\n        };\n      } else {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: { left: hitSlop },\n          enableTrackpadTwoFingerGesture,\n        };\n      }\n    }\n  }\n\n  private ref = React.createRef<CardSheetRef>();\n\n  render() {\n    const {\n      styleInterpolator,\n      interpolationIndex,\n      current,\n      gesture,\n      next,\n      layout,\n      insets,\n      overlay,\n      overlayEnabled,\n      shadowEnabled,\n      gestureEnabled,\n      gestureDirection,\n      pageOverflowEnabled,\n      headerDarkContent,\n      children,\n      containerStyle: customContainerStyle,\n      contentStyle,\n      ...rest\n    } = this.props;\n\n    const interpolationProps = this.getCardAnimation(\n      interpolationIndex,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const interpolatedStyle = this.getInterpolatedStyle(\n      styleInterpolator,\n      interpolationProps\n    );\n\n    const { containerStyle, cardStyle, overlayStyle, shadowStyle } =\n      interpolatedStyle;\n\n    const handleGestureEvent = gestureEnabled\n      ? Animated.event(\n          [\n            {\n              nativeEvent:\n                gestureDirection === 'vertical' ||\n                gestureDirection === 'vertical-inverted'\n                  ? { translationY: gesture }\n                  : { translationX: gesture },\n            },\n          ],\n          { useNativeDriver }\n        )\n      : undefined;\n\n    const { backgroundColor } = StyleSheet.flatten(contentStyle || {});\n    const isTransparent =\n      typeof backgroundColor === 'string'\n        ? Color(backgroundColor).alpha() === 0\n        : false;\n\n    return (\n      <CardAnimationContext.Provider value={interpolationProps}>\n        {\n          // StatusBar messes with translucent status bar on Android\n          // So we should only enable it on iOS\n          Platform.OS === 'ios' &&\n          overlayEnabled &&\n          next &&\n          getIsModalPresentation(styleInterpolator) ? (\n            <ModalStatusBarManager\n              dark={headerDarkContent}\n              layout={layout}\n              insets={insets}\n              style={cardStyle}\n            />\n          ) : null\n        }\n        <Animated.View\n          style={{\n            // This is a dummy style that doesn't actually change anything visually.\n            // Animated needs the animated value to be used somewhere, otherwise things don't update properly.\n            // If we disable animations and hide header, it could end up making the value unused.\n            // So we have this dummy style that will always be used regardless of what else changed.\n            opacity: current,\n          }}\n          // Make sure that this view isn't removed. If this view is removed, our style with animated value won't apply\n          collapsable={false}\n        />\n        <View pointerEvents=\"box-none\" {...rest}>\n          {overlayEnabled ? (\n            <View pointerEvents=\"box-none\" style={StyleSheet.absoluteFill}>\n              {overlay({ style: overlayStyle })}\n            </View>\n          ) : null}\n          <Animated.View\n            style={[styles.container, containerStyle, customContainerStyle]}\n            pointerEvents=\"box-none\"\n          >\n            <PanGestureHandler\n              enabled={layout.width !== 0 && gestureEnabled}\n              onGestureEvent={handleGestureEvent}\n              onHandlerStateChange={this.handleGestureStateChange}\n              {...this.gestureActivationCriteria()}\n            >\n              <Animated.View\n                needsOffscreenAlphaCompositing={hasOpacityStyle(cardStyle)}\n                style={[styles.container, cardStyle]}\n              >\n                {shadowEnabled && shadowStyle && !isTransparent ? (\n                  <Animated.View\n                    style={[\n                      styles.shadow,\n                      gestureDirection === 'horizontal'\n                        ? [styles.shadowHorizontal, styles.shadowLeft]\n                        : gestureDirection === 'horizontal-inverted'\n                        ? [styles.shadowHorizontal, styles.shadowRight]\n                        : gestureDirection === 'vertical'\n                        ? [styles.shadowVertical, styles.shadowTop]\n                        : [styles.shadowVertical, styles.shadowBottom],\n                      { backgroundColor },\n                      shadowStyle,\n                    ]}\n                    pointerEvents=\"none\"\n                  />\n                ) : null}\n                <CardSheet\n                  ref={this.ref}\n                  enabled={pageOverflowEnabled}\n                  layout={layout}\n                  style={contentStyle}\n                >\n                  {children}\n                </CardSheet>\n              </Animated.View>\n            </PanGestureHandler>\n          </Animated.View>\n        </View>\n      </CardAnimationContext.Provider>\n    );\n  }\n}\n\nexport const getIsModalPresentation = (\n  cardStyleInterpolator: StackCardStyleInterpolator\n) => {\n  return (\n    cardStyleInterpolator === forModalPresentationIOS ||\n    // Handle custom modal presentation interpolators as well\n    cardStyleInterpolator.name === 'forModalPresentationIOS'\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000',\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3,\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: { width: -1, height: 1 },\n  },\n  shadowLeft: {\n    left: 0,\n  },\n  shadowRight: {\n    right: 0,\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: { width: 1, height: -1 },\n  },\n  shadowTop: {\n    top: 0,\n  },\n  shadowBottom: {\n    bottom: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}