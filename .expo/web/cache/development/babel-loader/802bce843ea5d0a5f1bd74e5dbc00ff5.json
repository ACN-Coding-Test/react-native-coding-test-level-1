{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar linkToHREF = function linkToHREF(URL) {\n  Linking.openURL(URL).catch(function (err) {\n    return console.error('An error occurred', err);\n  });\n};\nvar addOnPressFunctionality = function addOnPressFunctionality(href, callback) {\n  href ? linkToHREF(href) : '';\n  callback ? callback() : function () {};\n};\nexport function useLink(props) {\n  var href = props.href,\n    isExternal = props.isExternal,\n    _onPress = props.onPress,\n    _ref = props._ref;\n  var platformLinkProps = {};\n  if (Platform.OS === 'web') {\n    platformLinkProps = {\n      href: href,\n      onClick: _onPress\n    };\n\n    if (isExternal && _ref.current) {\n      _ref.current.target = '_blank';\n    }\n  } else {\n    platformLinkProps = {\n      onPress: function onPress() {\n        addOnPressFunctionality(href, _onPress);\n      }\n    };\n  }\n  return {\n    linkProps: _objectSpread(_objectSpread({}, platformLinkProps), {}, {\n      accessibilityRole: 'link',\n      accessible: true\n    })\n  };\n}","map":{"version":3,"sources":["useLink.ts"],"names":["linkToHREF","URL","Linking","openURL","catch","err","console","error","addOnPressFunctionality","href","callback","useLink","props","isExternal","onPress","_ref","platformLinkProps","Platform","OS","onClick","current","target","linkProps","accessibilityRole","accessible"],"mappings":";;;;;AAIA,IAAMA,UAAU,GAAIC,SAAdD,UAAU,CAAIC,GAAD,EAAiB;EAClCC,OAAO,CAACC,OAARD,CAAgBD,GAAhBC,CAAAA,CAAqBE,KAArBF,CAA4BG,UAAAA,GAAD;IAAA,OAASC,OAAO,CAACC,KAARD,CAAc,mBAAdA,EAAmCD,GAAnCC,CAApCJ;EAAAA,EAAAA;AACD,CAFD;AAIA,IAAMM,uBAAuB,GAAG,SAA1BA,uBAAuB,CAAIC,IAAD,EAAqBC,QAArB,EAAuC;EACrED,IAAI,GAAGT,UAAU,CAACS,IAAD,CAAb,GAAsB,EAA1BA;EACAC,QAAQ,GAAGA,QAAQ,EAAX,GAAgB,YAAM,CAAE,CAAhCA;AACD,CAHD;AAKA,OAAO,SAASC,OAAT,CAAiBC,KAAjB,EAAsC;EAC3C,IAAQH,IAAF,GAAsCG,KAA5C,CAAQH,IAAF;IAAQI,UAAR,GAAsCD,KAA5C,CAAcC,UAAR;IAAoBC,QAApB,GAAsCF,KAA5C,CAA0BE,OAApB;IAA6BC,IAAAA,GAASH,KAA5C,CAAmCG,IAAAA;EAEnC,IAAIC,iBAAiB,GAAG,CAAA,CAAxB;EAEA,IAAIC,QAAQ,CAACC,EAATD,KAAgB,KAApB,EAA2B;IACzBD,iBAAiB,GAAG;MAClBP,IADkB,EAClBA,IADkB;MAElBU,OAAO,EAAEL;IAFS,CADK;;IAMzB,IAAID,UAAU,IAAIE,IAAI,CAACK,OAAvB,EAAgC;MAC9BL,IAAI,CAACK,OAALL,CAAaM,MAAbN,GAAsB,QAAtBA;IACD;EACF,CATD,MASO;IACLC,iBAAiB,GAAG;MAClBF,OAAO,EAAE,mBAAM;QACbN,uBAAuB,CAACC,IAAD,EAAOK,QAAP,CAAvBN;MACD;IAHiB,CAApBQ;EAKD;EAED,OAAO;IACLM,SAAS,kCACJN,iBADM;MAETO,iBAAiB,EAAE,MAFV;MAGTC,UAAU,EAAE;IAAA;EAJT,CAAP;AAOD","sourcesContent":["import { Linking, Platform } from 'react-native';\nimport type { IUseLinkProp } from './types';\nimport type { AccessibilityRole } from 'react-native';\n\nconst linkToHREF = (URL: string) => {\n  Linking.openURL(URL).catch((err) => console.error('An error occurred', err));\n};\n\nconst addOnPressFunctionality = (href: string | any, callback: any) => {\n  href ? linkToHREF(href) : '';\n  callback ? callback() : () => {};\n};\n\nexport function useLink(props: IUseLinkProp) {\n  const { href, isExternal, onPress, _ref } = props;\n\n  let platformLinkProps = {};\n\n  if (Platform.OS === 'web') {\n    platformLinkProps = {\n      href,\n      onClick: onPress,\n    };\n    // Adding target to a tag created by RN-Web\n    if (isExternal && _ref.current) {\n      _ref.current.target = '_blank';\n    }\n  } else {\n    platformLinkProps = {\n      onPress: () => {\n        addOnPressFunctionality(href, onPress);\n      },\n    };\n  }\n\n  return {\n    linkProps: {\n      ...platformLinkProps,\n      accessibilityRole: 'link' as AccessibilityRole,\n      accessible: true,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}