{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"];\nimport { memo } from 'react';\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useBreakpointValue, useTheme, useToken } from \"../../../hooks\";\nimport { useColorMode } from \"../../../core/color-mode/hooks\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport function Hidden(_ref) {\n  var children = _ref.children,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _usePropsResolution = usePropsResolution('Hidden', props, {}, {\n      ignoreProps: ['only', 'platform']\n    }),\n    from = _usePropsResolution.from,\n    till = _usePropsResolution.till,\n    only = _usePropsResolution.only,\n    platform = _usePropsResolution.platform,\n    colorMode = _usePropsResolution.colorMode;\n  var _useTheme = useTheme(),\n    breakpoints = _useTheme.breakpoints;\n  var currentColorMode = useColorMode();\n  var breakpointValueObject = Object.keys(breakpoints).reduce(function (obj, val) {\n    obj[val] = val;\n    return obj;\n  }, {});\n  var breakpointValue = useBreakpointValue(breakpointValueObject);\n  var _useToken = useToken('breakpoints', [breakpointValue]),\n    _useToken2 = _slicedToArray(_useToken, 1),\n    currentBreakpointValue = _useToken2[0];\n  var _useToken3 = useToken('breakpoints', [from]),\n    _useToken4 = _slicedToArray(_useToken3, 1),\n    fromBreakPointValue = _useToken4[0];\n  var _useToken5 = useToken('breakpoints', [till]),\n    _useToken6 = _slicedToArray(_useToken5, 1),\n    tillBreakPointValue = _useToken6[0];\n\n  if (!from && !till && !only && !colorMode && !platform) {\n    return null;\n  } else if (from && till && currentBreakpointValue >= fromBreakPointValue && currentBreakpointValue < tillBreakPointValue) {\n    return null;\n  } else if (from && !till && currentBreakpointValue >= fromBreakPointValue) {\n    return null;\n  } else if (till && !from && currentBreakpointValue < tillBreakPointValue) {\n    return null;\n  }\n  else if (Array.isArray(only) && only.includes(breakpointValue) || only === breakpointValue) {\n    return null;\n  }\n  else if (Array.isArray(platform) && platform.includes(Platform.OS) || platform === Platform.OS) {\n    return null;\n  } else if (colorMode === currentColorMode.colorMode) {\n    return null;\n  }\n  return children;\n}\nexport default memo(Hidden);","map":{"version":3,"sources":["index.tsx"],"names":["memo","usePropsResolution","useBreakpointValue","useTheme","useToken","useColorMode","Hidden","children","props","from","till","only","platform","colorMode","ignoreProps","breakpoints","currentColorMode","breakpointValueObject","keys","reduce","obj","val","breakpointValue","currentBreakpointValue","fromBreakPointValue","tillBreakPointValue","Array","isArray","includes","Platform","OS"],"mappings":";;;AAAA,SAASA,IAAT,QAAqB,OAArB;AAEA,SAASC,kBAAT;AACA,SAASC,kBAAT,EAA6BC,QAA7B,EAAuCC,QAAvC;AACA,SAASC,YAAT;AAAA;AAGA,OAAO,SAASC,MAAT,OAAsD;EAAA,IAApCC,QAAF,QAAEA,QAAF;IAAeC,KAAAA;EACpC,0BAAkDP,kBAAkB,CAClE,QADkE,EAElEO,KAFkE,EAGlE,CAAA,CAHkE,EAIlE;MACEM,WAAW,EAAE,CAAC,MAAD,EAAS,UAAT;IADf,CAJkE,CAApE;IAAQL,IAAF,uBAAEA,IAAF;IAAQC,IAAR,uBAAQA,IAAR;IAAcC,IAAd,uBAAcA,IAAd;IAAoBC,QAApB,uBAAoBA,QAApB;IAA8BC,SAAAA,uBAAAA,SAAAA;EAQpC,gBAAwBV,QAAQ,EAAhC;IAAQY,WAAAA,aAAAA,WAAAA;EACR,IAAMC,gBAAgB,GAAGX,YAAY,EAArC;EAEA,IAAMY,qBAAqB,GAAG,MAAM,CAACC,IAAP,CAAYH,WAAZ,CAAA,CAAyBI,MAAzB,CAC5B,UAACC,GAAD,EAAWC,GAAX,EAA2B;IACzBD,GAAG,CAACC,GAAD,CAAHD,GAAWC,GAAXD;IACA,OAAOA,GAAP;EACD,CAJ2B,EAK5B,CAAA,CAL4B,CAA9B;EAOA,IAAME,eAAe,GAAGpB,kBAAkB,CAACe,qBAAD,CAA1C;EACA,gBAAiCb,QAAQ,CAAC,aAAD,EAAgB,CAACkB,eAAD,CAAhB,CAAzC;IAAA;IAAOC,sBAAD;EACN,iBAA8BnB,QAAQ,CAAC,aAAD,EAAgB,CAACK,IAAD,CAAhB,CAAtC;IAAA;IAAOe,mBAAD;EACN,iBAA8BpB,QAAQ,CAAC,aAAD,EAAgB,CAACM,IAAD,CAAhB,CAtBqB;IAAA;IAsBpDe,mBAAD;;EAGN,IAAI,CAAChB,IAAD,IAAS,CAACC,IAAV,IAAkB,CAACC,IAAnB,IAA2B,CAACE,SAA5B,IAAyC,CAACD,QAA9C,EAAwD;IACtD,OAAO,IAAP;EACD,CAFD,MAKK,IACHH,IAAI,IACJC,IADAD,IAEAc,sBAAsB,IAAIC,mBAF1Bf,IAGAc,sBAAsB,GAAGE,mBAJtB,EAKH;IACA,OAAO,IAAP;EACD,CAPI,MAUA,IAAIhB,IAAI,IAAI,CAACC,IAATD,IAAiBc,sBAAsB,IAAIC,mBAA/C,EAAoE;IACvE,OAAO,IAAP;EACD,CAFI,MAKA,IAAId,IAAI,IAAI,CAACD,IAATC,IAAiBa,sBAAsB,GAAGE,mBAA9C,EAAmE;IACtE,OAAO,IAAP;EACD;EAFI,KAMA,IACFC,KAAK,CAACC,OAAND,CAAcf,IAAde,CAAAA,IAAuBf,IAAI,CAACiB,QAALjB,CAAcW,eAAdX,CAAxB,IACAA,IAAI,KAAKW,eAFN,EAGH;IACA,OAAO,IAAP;EACD;EALI,KAQA,IACFI,KAAK,CAACC,OAAND,CAAcd,QAAdc,CAAAA,IAA2Bd,QAAQ,CAACgB,QAAThB,CAAkBiB,QAAQ,CAACC,EAA3BlB,CAA5B,IACAA,QAAQ,KAAKiB,QAAQ,CAACC,EAFnB,EAGH;IACA,OAAO,IAAP;EACD,CALI,MAOA,IAAIjB,SAAS,KAAKG,gBAAgB,CAACH,SAAnC,EAA8C;IACjD,OAAO,IAAP;EACD;EACD,OAAON,QAAP;AACD;AAED,eAAeP,IAAI,CAACM,MAAD,CAAnB","sourcesContent":["import { memo } from 'react';\nimport type { IHiddenProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useBreakpointValue, useTheme, useToken } from '../../../hooks';\nimport { useColorMode } from '../../../core/color-mode/hooks';\nimport { Platform } from 'react-native';\n\nexport function Hidden({ children, ...props }: IHiddenProps) {\n  const { from, till, only, platform, colorMode } = usePropsResolution(\n    'Hidden',\n    props,\n    {},\n    {\n      ignoreProps: ['only', 'platform'],\n    }\n  );\n  const { breakpoints } = useTheme();\n  const currentColorMode = useColorMode();\n\n  const breakpointValueObject = Object.keys(breakpoints).reduce(\n    (obj: any, val: string) => {\n      obj[val] = val;\n      return obj;\n    },\n    {}\n  );\n  const breakpointValue = useBreakpointValue(breakpointValueObject);\n  const [currentBreakpointValue] = useToken('breakpoints', [breakpointValue]);\n  const [fromBreakPointValue] = useToken('breakpoints', [from]);\n  const [tillBreakPointValue] = useToken('breakpoints', [till]);\n\n  //if no prop is passed, it will hide the element wrapped with hidden\n  if (!from && !till && !only && !colorMode && !platform) {\n    return null;\n  }\n\n  //if from and till prop exists, it will hide the element wrapped accordingly\n  else if (\n    from &&\n    till &&\n    currentBreakpointValue >= fromBreakPointValue &&\n    currentBreakpointValue < tillBreakPointValue\n  ) {\n    return null;\n  }\n\n  //if from prop exists, it will hide the element wrapped starting from that breakpoint.\n  else if (from && !till && currentBreakpointValue >= fromBreakPointValue) {\n    return null;\n  }\n\n  //if till prop exists, it will hide the element wrapped starting from  0 till that breakpoint.\n  else if (till && !from && currentBreakpointValue < tillBreakPointValue) {\n    return null;\n  }\n\n  //if only prop exists and is array, check that array consists current breakpoint value, and if that exists, hide on that breakpoint to next breakpoint.\n  // if only prop is string, hide on that breakpoint to next breakpoint.\n  else if (\n    (Array.isArray(only) && only.includes(breakpointValue)) ||\n    only === breakpointValue\n  ) {\n    return null;\n  }\n  //if platform prop exists and is array, check that array consists current platform value, and if that exists, hide on that platform.\n  // if platform prop is string, hide on that platform.\n  else if (\n    (Array.isArray(platform) && platform.includes(Platform.OS)) ||\n    platform === Platform.OS\n  ) {\n    return null;\n  }\n  //if colormode prop is valid string, hide on that colormode.\n  else if (colorMode === currentColorMode.colorMode) {\n    return null;\n  }\n  return children;\n}\n\nexport default memo(Hidden);\nexport type { IHiddenProps };\n"]},"metadata":{},"sourceType":"module"}