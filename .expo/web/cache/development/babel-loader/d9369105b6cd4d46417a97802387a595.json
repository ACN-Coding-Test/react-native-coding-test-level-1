{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nexport function useControllableProp(prop, state) {\n  var _React$useRef = React.useRef(prop !== undefined),\n    isControlled = _React$useRef.current;\n  var value = isControlled && typeof prop !== 'undefined' ? prop : state;\n  return [isControlled, value];\n}\n\nexport function useControllableState(props) {\n  var valueProp = props.value,\n    defaultValue = props.defaultValue,\n    onChange = props.onChange;\n  var _React$useState = React.useState(defaultValue),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    valueState = _React$useState2[0],\n    setValue = _React$useState2[1];\n  var isControlled = valueProp !== undefined;\n  var value = isControlled ? valueProp : valueState;\n  var updateValue = React.useCallback(function (next) {\n    var nextValue = typeof next === 'function' ? next(value) : next;\n    if (!isControlled) {\n      setValue(nextValue);\n    }\n    onChange && onChange(nextValue);\n  }, [isControlled, onChange, value]);\n  return [value, updateValue];\n}","map":{"version":3,"sources":["useControllableProp.ts"],"names":["React","useControllableProp","prop","state","current","isControlled","useRef","undefined","value","useControllableState","props","valueProp","defaultValue","onChange","valueState","setValue","useState","updateValue","useCallback","next","nextValue"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,SAASC,mBAAT,CAAgCC,IAAhC,EAAqDC,KAArD,EAA+D;EACpE,oBAAkCH,KAAK,CAACM,MAANN,CAAaE,IAAI,KAAKK,SAAtBP,CAAlC;IAAiBK,YAAAA,iBAATD,OAAO;EACf,IAAMI,KAAK,GAAGH,YAAY,IAAI,OAAOH,IAAP,KAAgB,WAAhCG,GAA8CH,IAA9CG,GAAqDF,KAAnE;EACA,OAAO,CAACE,YAAD,EAAeG,KAAf,CAAP;AACD;;AAyBD,OAAO,SAASC,oBAAT,CAAiCC,KAAjC,EAAsE;EAC3E,IAAeC,SAAT,GAA+CD,KAArD,CAAQF,KAAK;IAAaI,YAApB,GAA+CF,KAArD,CAA0BE,YAApB;IAAkCC,QAAAA,GAAaH,KAArD,CAAwCG,QAAAA;EAExC,sBAA+Bb,KAAK,CAACgB,QAANhB,CAAeY,YAAfZ,CAA/B;IAAA;IAAOc,UAAD;IAAaC,QAAb;EACN,IAAMV,YAAY,GAAGM,SAAS,KAAKJ,SAAnC;EAEA,IAAMC,KAAK,GAAGH,YAAY,GAAIM,SAAJ,GAAsBG,UAAhD;EAEA,IAAMG,WAAW,GAAG,KAAK,CAACC,WAAN,CACjBC,UAAAA,IAAD,EAAe;IACb,IAAMC,SAAS,GAAG,OAAOD,IAAP,KAAgB,UAAhB,GAA6BA,IAAI,CAACX,KAAD,CAAjC,GAA2CW,IAA7D;IACA,IAAI,CAACd,YAAL,EAAmB;MACjBU,QAAQ,CAACK,SAAD,CAARL;IACD;IACDF,QAAQ,IAAIA,QAAQ,CAACO,SAAD,CAApBP;EACD,CAPiB,EAQlB,CAACR,YAAD,EAAeQ,QAAf,EAAyBL,KAAzB,CARkB,CAApB;EAWA,OAAO,CAACA,KAAD,EAAQS,WAAR,CAAP;AACD","sourcesContent":["import React from 'react';\n\nexport function useControllableProp<T>(prop: T | undefined, state: T) {\n  const { current: isControlled } = React.useRef(prop !== undefined);\n  const value = isControlled && typeof prop !== 'undefined' ? prop : state;\n  return [isControlled, value] as const;\n}\n\nexport interface UseControllableStateProps<T> {\n  /**\n   * The value to used in controlled mode\n   */\n  value?: T;\n  /**\n   * The initial value to be used, in uncontrolled mode\n   */\n  defaultValue?: T | (() => T);\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?: (value: T) => void;\n  /**\n   * The component name (for warnings)\n   */\n  name?: string;\n}\n\n/**\n * React hook for using controlling component state.\n * @param props\n */\nexport function useControllableState<T>(props: UseControllableStateProps<T>) {\n  const { value: valueProp, defaultValue, onChange } = props;\n\n  const [valueState, setValue] = React.useState(defaultValue as T);\n  const isControlled = valueProp !== undefined;\n\n  const value = isControlled ? (valueProp as T) : valueState;\n\n  const updateValue = React.useCallback(\n    (next: any) => {\n      const nextValue = typeof next === 'function' ? next(value) : next;\n      if (!isControlled) {\n        setValue(nextValue);\n      }\n      onChange && onChange(nextValue);\n    },\n    [isControlled, onChange, value]\n  );\n\n  return [value, updateValue] as [T, React.Dispatch<React.SetStateAction<T>>];\n}\n"]},"metadata":{},"sourceType":"module"}