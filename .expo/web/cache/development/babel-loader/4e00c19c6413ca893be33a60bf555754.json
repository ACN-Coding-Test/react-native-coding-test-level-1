{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { useEffect } from 'react';\nimport { useFocusWithin } from '@react-aria/interactions';\nvar visibleOverlays = [];\n\nexport function useOverlay(props, ref) {\n  var onClose = props.onClose,\n    shouldCloseOnBlur = props.shouldCloseOnBlur,\n    isOpen = props.isOpen,\n    _props$isKeyboardDism = props.isKeyboardDismissDisabled,\n    isKeyboardDismissDisabled = _props$isKeyboardDism === void 0 ? false : _props$isKeyboardDism;\n\n  useEffect(function () {\n    if (isOpen) {\n      visibleOverlays.push(ref);\n    }\n    return function () {\n      var index = visibleOverlays.indexOf(ref);\n      if (index >= 0) {\n        visibleOverlays.splice(index, 1);\n      }\n    };\n  }, [isOpen, ref]);\n\n  var onHide = function onHide() {\n    if (visibleOverlays[visibleOverlays.length - 1] === ref && onClose) {\n      onClose();\n    }\n  };\n\n  var onKeyDown = function onKeyDown(e) {\n    if (e.key === 'Escape' && !isKeyboardDismissDisabled) {\n      e.preventDefault();\n      onHide();\n    }\n  };\n\n  var _useFocusWithin = useFocusWithin({\n      isDisabled: !shouldCloseOnBlur,\n      onBlurWithin: function onBlurWithin() {\n        onClose && onClose();\n      }\n    }),\n    focusWithinProps = _useFocusWithin.focusWithinProps;\n  return {\n    overlayProps: _objectSpread({\n      onKeyDown: onKeyDown\n    }, focusWithinProps)\n  };\n}","map":{"version":3,"sources":["useOverlay.web.ts"],"names":["useEffect","useFocusWithin","visibleOverlays","useOverlay","props","ref","onClose","shouldCloseOnBlur","isOpen","isKeyboardDismissDisabled","push","index","indexOf","splice","onHide","length","onKeyDown","e","key","preventDefault","focusWithinProps","isDisabled","onBlurWithin","overlayProps"],"mappings":";;;AAAA,SAAoCA,SAApC,QAAqD,OAArD;AACA,SAASC,cAAT,QAA+B,0BAA/B;AAsCA,IAAMC,eAAyC,GAAG,EAAlD;;AAOA,OAAO,SAASC,UAAT,CACLC,KADK,EAELC,GAFK,EAGQ;EACb,IACEC,OADE,GAKAF,KANS,CAEXE,OADE;IAEFC,iBAFE,GAKAH,KANS,CAGXG,iBAFE;IAGFC,MAHE,GAKAJ,KANS,CAIXI,MAHE;IAAA,wBAKAJ,KANS,CAKXK,yBAAyB;IAAzBA,yBAAyB,sCAAG,KAAA;;EAI9BT,SAAS,CAAC,YAAM;IACd,IAAIQ,MAAJ,EAAY;MACVN,eAAe,CAACQ,IAAhBR,CAAqBG,GAArBH,CAAAA;IACD;IAED,OAAO,YAAM;MACX,IAAIS,KAAK,GAAGT,eAAe,CAACU,OAAhBV,CAAwBG,GAAxBH,CAAZ;MACA,IAAIS,KAAK,IAAI,CAAb,EAAgB;QACdT,eAAe,CAACW,MAAhBX,CAAuBS,KAAvBT,EAA8B,CAA9BA,CAAAA;MACD;IACF,CALD;EAMD,CAXQ,EAWN,CAACM,MAAD,EAASH,GAAT,CAXM,CATI;;EAuBb,IAAIS,MAAM,GAAG,SAATA,MAAM,GAAS;IACjB,IAAIZ,eAAe,CAACA,eAAe,CAACa,MAAhBb,GAAyB,CAA1B,CAAfA,KAAgDG,GAAhDH,IAAuDI,OAA3D,EAAoE;MAClEA,OAAO,EAAA;IACR;EACF,CA3BY;;EA8Bb,IAAIU,SAAS,GAAIC,SAAbD,SAAS,CAAIC,CAAD,EAAY;IAC1B,IAAIA,CAAC,CAACC,GAAFD,KAAU,QAAVA,IAAsB,CAACR,yBAA3B,EAAsD;MACpDQ,CAAC,CAACE,cAAFF,EAAAA;MACAH,MAAM,EAAA;IACP;EACF,CAnCY;;EAuCb,sBAA2Bb,cAAc,CAAC;MACxCoB,UAAU,EAAE,CAACd,iBAD2B;MAExCe,YAAY,EAAE,wBAAM;QAClBhB,OAAO,IAAIA,OAAO,EAAlBA;MACD;IAJuC,CAAD,CAAzC;IAAMc,gBAAAA,mBAAAA,gBAAAA;EAON,OAAO;IACLG,YAAY;MACVP,SADY,EACZA;IADY,GAETI,gBAAAA;EAHA,CAAP;AAMD","sourcesContent":["import { HTMLAttributes, RefObject, useEffect } from 'react';\nimport { useFocusWithin } from '@react-aria/interactions';\n\ninterface OverlayProps {\n  /** Whether the overlay is currently open. */\n  isOpen?: boolean;\n\n  /** Handler that is called when the overlay should close. */\n  onClose?: () => void;\n\n  /**\n   * Whether to close the overlay when the user interacts outside it.\n   * @default false\n   */\n  isDismissable?: boolean;\n\n  /** Whether the overlay should close when focus is lost or moves outside it. */\n  shouldCloseOnBlur?: boolean;\n\n  /**\n   * Whether pressing the escape key to close the overlay should be disabled.\n   * @default false\n   */\n  isKeyboardDismissDisabled?: boolean;\n\n  /**\n   * When user interacts with the argument element outside of the overlay ref,\n   * return true if onClose should be called.  This gives you a chance to filter\n   * out interaction with elements that should not dismiss the overlay.\n   * By default, onClose will always be called on interaction outside the overlay ref.\n   */\n  shouldCloseOnInteractOutside?: (element: HTMLElement) => boolean;\n}\n\ninterface OverlayAria {\n  /** Props to apply to the overlay container element. */\n  overlayProps: HTMLAttributes<HTMLElement>;\n}\n\nconst visibleOverlays: RefObject<HTMLElement>[] = [];\n\n/**\n * Provides the behavior for overlays such as dialogs, popovers, and menus.\n * Hides the overlay when the user interacts outside it, when the Escape key is pressed,\n * or optionally, on blur. Only the top-most overlay will close at once.\n */\nexport function useOverlay(\n  props: OverlayProps,\n  ref: RefObject<HTMLElement>\n): OverlayAria {\n  let {\n    onClose,\n    shouldCloseOnBlur,\n    isOpen,\n    isKeyboardDismissDisabled = false,\n  } = props;\n\n  // Add the overlay ref to the stack of visible overlays on mount, and remove on unmount.\n  useEffect(() => {\n    if (isOpen) {\n      visibleOverlays.push(ref);\n    }\n\n    return () => {\n      let index = visibleOverlays.indexOf(ref);\n      if (index >= 0) {\n        visibleOverlays.splice(index, 1);\n      }\n    };\n  }, [isOpen, ref]);\n\n  // Only hide the overlay when it is the topmost visible overlay in the stack.\n  let onHide = () => {\n    if (visibleOverlays[visibleOverlays.length - 1] === ref && onClose) {\n      onClose();\n    }\n  };\n\n  // Handle the escape key\n  let onKeyDown = (e: any) => {\n    if (e.key === 'Escape' && !isKeyboardDismissDisabled) {\n      e.preventDefault();\n      onHide();\n    }\n  };\n\n  // Handle clicking outside the overlay to close it\n\n  let { focusWithinProps } = useFocusWithin({\n    isDisabled: !shouldCloseOnBlur,\n    onBlurWithin: () => {\n      onClose && onClose();\n    },\n  });\n\n  return {\n    overlayProps: {\n      onKeyDown,\n      ...focusWithinProps,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}