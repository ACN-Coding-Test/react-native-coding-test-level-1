{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"],\n  _excluded2 = [\"status\", \"variant\", \"_icon\", \"colorScheme\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport Box from \"../../primitives/Box\";\n\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { AlertContext } from \"./Context\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar Alert = function Alert(_ref, ref) {\n  var children = _ref.children,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _usePropsResolution = usePropsResolution('Alert', props),\n    status = _usePropsResolution.status,\n    variant = _usePropsResolution.variant,\n    _icon = _usePropsResolution._icon,\n    colorScheme = _usePropsResolution.colorScheme,\n    newProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return React.createElement(AlertContext.Provider, {\n    value: {\n      status: status,\n      variant: variant,\n      _icon: _icon,\n      colorScheme: colorScheme\n    }\n  }, React.createElement(Box, _extends({}, newProps, {\n    ref: ref\n  }), children));\n};\nexport default memo(forwardRef(Alert));","map":{"version":3,"sources":["Alert.tsx"],"names":["React","memo","forwardRef","Box","usePropsResolution","AlertContext","useHasResponsiveProps","Alert","children","props","ref","status","variant","_icon","colorScheme","newProps"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,OAAOC,GAAP;;AAEA,SAASC,kBAAT;AAEA,SAASC,YAAT;AACA,SAASC,qBAAT;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAK,OAAyCG,GAAtC,EAAoD;EAAA,IAAjDF,QAAF,QAAEA,QAAF;IAAeC,KAAAA;EAC5B,0BAMIL,kBAAkB,CAAC,OAAD,EAAUK,KAAV,CAP0C;IAE9DE,MADI,uBACJA,MADI;IAEJC,OAFI,uBAEJA,OAFI;IAGJC,KAHI,uBAGJA,KAHI;IAIJC,WAJI,uBAIJA,WAJI;IAKDC,QAAAA;;EAGL,IAAIT,qBAAqB,CAACG,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EACD,OACE,KAAA,CAAA,aAAA,CAAC,YAAD,CAAc,QAAd,EAAA;IACE,KAAK,EAAE;MACLE,MADK,EACLA,MADK;MAELC,OAFK,EAELA,OAFK;MAGLC,KAHK,EAGLA,KAHK;MAILC,WAAAA,EAAAA;IAJK;EADT,CAAA,EAQE,KAAA,CAAA,aAAA,CAAC,GAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EAASC,QAAT,EAAA;IAAmB,GAAG,EAAEL;EAAxB,CAAA,CAAA,EACGF,QADH,CARF,CADF;AAcD,CA1BD;AA4BA,eAAeP,IAAI,CAACC,UAAU,CAACK,KAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\n// import { HStack } from '../../primitives/Stack';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IAlertProps } from './types';\nimport { AlertContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Alert = ({ children, ...props }: IAlertProps, ref?: any) => {\n  const {\n    status,\n    variant,\n    _icon,\n    colorScheme,\n    ...newProps\n  } = usePropsResolution('Alert', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <AlertContext.Provider\n      value={{\n        status,\n        variant,\n        _icon,\n        colorScheme,\n      }}\n    >\n      <Box {...newProps} ref={ref}>\n        {children}\n      </Box>\n    </AlertContext.Provider>\n  );\n};\n\nexport default memo(forwardRef(Alert));\n"]},"metadata":{},"sourceType":"module"}