{"ast":null,"code":"import { nanoid } from 'nanoid/non-secure';\nexport default function createMemoryHistory() {\n  var index = 0;\n  var items = [];\n\n  var pending = [];\n  var interrupt = function interrupt() {\n    pending.forEach(function (it) {\n      var cb = it.cb;\n      it.cb = function () {\n        return cb(true);\n      };\n    });\n  };\n  var history = {\n    get index() {\n      var _window$history$state;\n\n      var id = (_window$history$state = window.history.state) === null || _window$history$state === void 0 ? void 0 : _window$history$state.id;\n      if (id) {\n        var _index = items.findIndex(function (item) {\n          return item.id === id;\n        });\n        return _index > -1 ? _index : 0;\n      }\n      return 0;\n    },\n    get: function get(index) {\n      return items[index];\n    },\n    backIndex: function backIndex(_ref) {\n      var path = _ref.path;\n\n      for (var i = index - 1; i >= 0; i--) {\n        var item = items[i];\n        if (item.path === path) {\n          return i;\n        }\n      }\n      return -1;\n    },\n    push: function push(_ref2) {\n      var path = _ref2.path,\n        state = _ref2.state;\n      interrupt();\n      var id = nanoid();\n\n      items = items.slice(0, index + 1);\n      items.push({\n        path: path,\n        state: state,\n        id: id\n      });\n      index = items.length - 1;\n\n      window.history.pushState({\n        id: id\n      }, '', path);\n    },\n    replace: function replace(_ref3) {\n      var _window$history$state2, _window$history$state3;\n      var path = _ref3.path,\n        state = _ref3.state;\n      interrupt();\n      var id = (_window$history$state2 = (_window$history$state3 = window.history.state) === null || _window$history$state3 === void 0 ? void 0 : _window$history$state3.id) !== null && _window$history$state2 !== void 0 ? _window$history$state2 : nanoid();\n      if (!items.length || items.findIndex(function (item) {\n        return item.id === id;\n      }) < 0) {\n        items = [{\n          path: path,\n          state: state,\n          id: id\n        }];\n        index = 0;\n      } else {\n        items[index] = {\n          path: path,\n          state: state,\n          id: id\n        };\n      }\n      window.history.replaceState({\n        id: id\n      }, '', path);\n    },\n    go: function go(n) {\n      interrupt();\n\n      var nextIndex = index + n;\n      var lastItemIndex = items.length - 1;\n      if (n < 0 && !items[nextIndex]) {\n        n = -index;\n        index = 0;\n      } else if (n > 0 && nextIndex > lastItemIndex) {\n        n = lastItemIndex - index;\n        index = lastItemIndex;\n      } else {\n        index = nextIndex;\n      }\n      if (n === 0) {\n        return;\n      }\n\n      return new Promise(function (resolve, reject) {\n        var done = function done(interrupted) {\n          clearTimeout(timer);\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          }\n\n          var title = window.document.title;\n          window.document.title = '';\n          window.document.title = title;\n          resolve();\n        };\n        pending.push({\n          ref: done,\n          cb: done\n        });\n\n        var timer = setTimeout(function () {\n          var index = pending.findIndex(function (it) {\n            return it.ref === done;\n          });\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n        var onPopState = function onPopState() {\n          var _window$history$state4;\n          var id = (_window$history$state4 = window.history.state) === null || _window$history$state4 === void 0 ? void 0 : _window$history$state4.id;\n          var currentIndex = items.findIndex(function (item) {\n            return item.id === id;\n          });\n\n          index = Math.max(currentIndex, 0);\n          var last = pending.pop();\n          window.removeEventListener('popstate', onPopState);\n          last === null || last === void 0 ? void 0 : last.cb();\n        };\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n    listen: function listen(listener) {\n      var onPopState = function onPopState() {\n        if (pending.length) {\n          return;\n        }\n        listener();\n      };\n      window.addEventListener('popstate', onPopState);\n      return function () {\n        return window.removeEventListener('popstate', onPopState);\n      };\n    }\n  };\n  return history;\n}","map":{"version":3,"sources":["createMemoryHistory.tsx"],"names":["nanoid","createMemoryHistory","index","items","pending","interrupt","forEach","it","cb","history","id","window","state","findIndex","item","get","backIndex","path","i","push","slice","length","pushState","replace","replaceState","go","n","nextIndex","lastItemIndex","Promise","resolve","reject","done","interrupted","clearTimeout","timer","Error","title","document","ref","setTimeout","splice","onPopState","currentIndex","Math","max","last","pop","removeEventListener","addEventListener","listen","listener"],"mappings":"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","sourcesContent":["import type { NavigationState } from '@react-navigation/core';\nimport { nanoid } from 'nanoid/non-secure';\n\ntype HistoryRecord = {\n  // Unique identifier for this record to match it with window.history.state\n  id: string;\n  // Navigation state object for the history entry\n  state: NavigationState;\n  // Path of the history entry\n  path: string;\n};\n\nexport default function createMemoryHistory() {\n  let index = 0;\n  let items: HistoryRecord[] = [];\n\n  // Pending callbacks for `history.go(n)`\n  // We might modify the callback stored if it was interrupted, so we have a ref to identify it\n  const pending: { ref: unknown; cb: (interrupted?: boolean) => void }[] = [];\n\n  const interrupt = () => {\n    // If another history operation was performed we need to interrupt existing ones\n    // This makes sure that calls such as `history.replace` after `history.go` don't happen\n    // Since otherwise it won't be correct if something else has changed\n    pending.forEach((it) => {\n      const cb = it.cb;\n      it.cb = () => cb(true);\n    });\n  };\n\n  const history = {\n    get index(): number {\n      // We store an id in the state instead of an index\n      // Index could get out of sync with in-memory values if page reloads\n      const id = window.history.state?.id;\n\n      if (id) {\n        const index = items.findIndex((item) => item.id === id);\n\n        return index > -1 ? index : 0;\n      }\n\n      return 0;\n    },\n\n    get(index: number) {\n      return items[index];\n    },\n\n    backIndex({ path }: { path: string }) {\n      // We need to find the index from the element before current to get closest path to go back to\n      for (let i = index - 1; i >= 0; i--) {\n        const item = items[i];\n\n        if (item.path === path) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    push({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = nanoid();\n\n      // When a new entry is pushed, all the existing entries after index will be inaccessible\n      // So we remove any existing entries after the current index to clean them up\n      items = items.slice(0, index + 1);\n\n      items.push({ path, state, id });\n      index = items.length - 1;\n\n      // We pass empty string for title because it's ignored in all browsers except safari\n      // We don't store state object in history.state because:\n      // - browsers have limits on how big it can be, and we don't control the size\n      // - while not recommended, there could be non-serializable data in state\n      window.history.pushState({ id }, '', path);\n    },\n\n    replace({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = window.history.state?.id ?? nanoid();\n\n      if (!items.length || items.findIndex((item) => item.id === id) < 0) {\n        // There are two scenarios for creating an array with only one history record:\n        // - When loaded id not found in the items array, this function by default will replace\n        //   the first item. We need to keep only the new updated object, otherwise it will break\n        //   the page when navigating forward in history.\n        // - This is the first time any state modifications are done\n        //   So we need to push the entry as there's nothing to replace\n        items = [{ path, state, id }];\n        index = 0;\n      } else {\n        items[index] = { path, state, id };\n      }\n\n      window.history.replaceState({ id }, '', path);\n    },\n\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n    go(n: number) {\n      interrupt();\n\n      // To guard against unexpected navigation out of the app we will assume that browser history is only as deep as the length of our memory\n      // history. If we don't have an item to navigate to then update our index and navigate as far as we can without taking the user out of the app.\n      const nextIndex = index + n;\n      const lastItemIndex = items.length - 1;\n      if (n < 0 && !items[nextIndex]) {\n        // Attempted to navigate beyond the first index. Negating the current index will align the browser history with the first item.\n        n = -index;\n        index = 0;\n      } else if (n > 0 && nextIndex > lastItemIndex) {\n        // Attempted to navigate past the last index. Calculate how many indices away from the last index and go there.\n        n = lastItemIndex - index;\n        index = lastItemIndex;\n      } else {\n        index = nextIndex;\n      }\n\n      if (n === 0) {\n        return;\n      }\n\n      // When we call `history.go`, `popstate` will fire when there's history to go back to\n      // So we need to somehow handle following cases:\n      // - There's history to go back, `history.go` is called, and `popstate` fires\n      // - `history.go` is called multiple times, we need to resolve on respective `popstate`\n      // - No history to go back, but `history.go` was called, browser has no API to detect it\n      return new Promise<void>((resolve, reject) => {\n        const done = (interrupted?: boolean) => {\n          clearTimeout(timer);\n\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          }\n\n          // There seems to be a bug in Chrome regarding updating the title\n          // If we set a title just before calling `history.go`, the title gets lost\n          // However the value of `document.title` is still what we set it to\n          // It's just not displayed in the tab bar\n          // To update the tab bar, we need to reset the title to something else first (e.g. '')\n          // And set the title to what it was before so it gets applied\n          // It won't work without setting it to empty string coz otherwise title isn't changing\n          // Which means that the browser won't do anything after setting the title\n          const { title } = window.document;\n\n          window.document.title = '';\n          window.document.title = title;\n\n          resolve();\n        };\n\n        pending.push({ ref: done, cb: done });\n\n        // If navigation didn't happen within 100ms, assume that it won't happen\n        // This may not be accurate, but hopefully it won't take so much time\n        // In Chrome, navigation seems to happen instantly in next microtask\n        // But on Firefox, it seems to take much longer, around 50ms from our testing\n        // We're using a hacky timeout since there doesn't seem to be way to know for sure\n        const timer = setTimeout(() => {\n          const index = pending.findIndex((it) => it.ref === done);\n\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n\n        const onPopState = () => {\n          const id = window.history.state?.id;\n          const currentIndex = items.findIndex((item) => item.id === id);\n\n          // Fix createMemoryHistory.index variable's value\n          // as it may go out of sync when navigating in the browser.\n          index = Math.max(currentIndex, 0);\n\n          const last = pending.pop();\n\n          window.removeEventListener('popstate', onPopState);\n          last?.cb();\n        };\n\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n    listen(listener: () => void) {\n      const onPopState = () => {\n        if (pending.length) {\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\n          return;\n        }\n\n        listener();\n      };\n\n      window.addEventListener('popstate', onPopState);\n\n      return () => window.removeEventListener('popstate', onPopState);\n    },\n  };\n\n  return history;\n}\n"]},"metadata":{},"sourceType":"module"}