{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"inputProps\", \"combinedProps\", \"children\", \"wrapperRef\", \"isHovered\", \"isPressed\", \"isFocused\", \"isFocusVisible\"],\n  _excluded2 = [\"_interactionBox\", \"_icon\", \"_stack\", \"_text\"],\n  _excluded3 = [\"icon\", \"children\", \"wrapperRef\", \"isHovered\", \"isPressed\", \"isFocused\", \"isFocusVisible\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\n\nimport stableHash from 'stable-hash';\nimport Box from \"../Box\";\nimport { Stack } from \"../Stack\";\nimport { Center } from \"../../composites/Center\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { wrapStringChild } from \"../../../utils/wrapStringChild\";\nimport { mergeRefs } from \"./../../../utils\";\nimport { useHover } from '@react-native-aria/interactions';\nimport { useRadio } from '@react-native-aria/radio';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { RadioContext } from \"./RadioGroup\";\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { CircleIcon } from \"../Icon/Icons\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { combineContextAndProps, isEmptyObj } from \"../../../utils\";\nimport { useFormControlContext } from \"../../composites/FormControl\";\nvar RadioComponent = memo(forwardRef(function (_ref2, ref) {\n  var icon = _ref2.icon,\n    inputProps = _ref2.inputProps,\n    combinedProps = _ref2.combinedProps,\n    children = _ref2.children,\n    wrapperRef = _ref2.wrapperRef,\n    isHoveredProp = _ref2.isHovered,\n    isPressedProp = _ref2.isPressed,\n    isFocusedProp = _ref2.isFocused,\n    isFocusVisibleProp = _ref2.isFocusVisible,\n    props = _objectWithoutProperties(_ref2, _excluded);\n  var isInvalid = combinedProps.isInvalid,\n    isReadOnly = combinedProps.isReadOnly,\n    isIndeterminate = combinedProps.isIndeterminate;\n  var isDisabled = inputProps.disabled,\n    isChecked = inputProps.checked;\n  var _ref = React.useRef(null);\n  var _useHover = useHover({}, _ref),\n    isHovered = _useHover.isHovered;\n  var mergedRefs = mergeRefs([_ref, wrapperRef]);\n  var _useFocusRing = useFocusRing(),\n    focusProps = _useFocusRing.focusProps,\n    isFocusVisible = _useFocusRing.isFocusVisible;\n  var _React$useState = React.useState(isFocusedProp),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isFocused = _React$useState2[0],\n    setFocused = _React$useState2[1];\n  var _React$useState3 = React.useState(isPressedProp),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    isPressed = _React$useState4[0],\n    setPressed = _React$useState4[1];\n  var handleFocus = function handleFocus() {\n    setFocused(true);\n  };\n  var handleBlur = function handleBlur() {\n    isFocusedProp ? setFocused(true) : setFocused(false);\n  };\n  var handlePressIn = function handlePressIn() {\n    setPressed(true);\n  };\n  var handlePressOut = function handlePressOut() {\n    isPressedProp ? setPressed(true) : setPressed(false);\n  };\n  var _usePropsResolution = usePropsResolution('Radio', combinedProps, {\n      isInvalid: isInvalid,\n      isReadOnly: isReadOnly,\n      isFocusVisible: isFocusVisibleProp || isFocused || isFocusVisible,\n      isDisabled: isDisabled,\n      isIndeterminate: isIndeterminate,\n      isChecked: isChecked,\n      isHovered: isHoveredProp || isHovered,\n      isPressed: isPressed,\n      isFocused: isFocused\n    }),\n    _interactionBox = _usePropsResolution._interactionBox,\n    _icon = _usePropsResolution._icon,\n    _stack = _usePropsResolution._stack,\n    _text = _usePropsResolution._text,\n    resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var sizedIcon = function sizedIcon() {\n    return (\n      React.cloneElement(icon, _objectSpread({}, _icon))\n    );\n  };\n  var component = React.createElement(Stack, _stack, React.createElement(Center, null, React.createElement(Box, _interactionBox), React.createElement(Center, resolvedProps, icon && sizedIcon && isChecked ? sizedIcon() : React.createElement(CircleIcon, _extends({}, _icon, {\n    opacity: isChecked ? 1 : 0\n  })))), wrapStringChild(children, _text));\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return React.createElement(Box, {\n    accessibilityRole: \"label\",\n    ref: mergedRefs\n  }, React.createElement(\"div\", {\n    onMouseDown: handlePressIn,\n    onMouseUp: handlePressOut\n  }, React.createElement(VisuallyHidden, null, React.createElement(\"input\", _extends({}, inputProps, focusProps, {\n    ref: ref,\n    onFocus: handleFocus,\n    onBlur: handleBlur\n  }))), component));\n}));\nvar Radio = function Radio(_ref3, ref) {\n  var icon = _ref3.icon,\n    children = _ref3.children,\n    wrapperRef = _ref3.wrapperRef,\n    isHoveredProp = _ref3.isHovered,\n    isPressed = _ref3.isPressed,\n    isFocusedProp = _ref3.isFocused,\n    isFocusVisibleProp = _ref3.isFocusVisible,\n    props = _objectWithoutProperties(_ref3, _excluded3);\n  var _contextState$state;\n  var formControlContext = useFormControlContext();\n  var contextState = React.useContext(RadioContext);\n  var combinedProps = combineContextAndProps(_objectSpread(_objectSpread({}, formControlContext), contextState), props);\n  var inputRef = React.useRef(null);\n  var radioState = useRadio(_objectSpread(_objectSpread({}, combinedProps), {}, {\n    'aria-label': props.accessibilityLabel,\n    children: children\n  }), (_contextState$state = contextState.state) !== null && _contextState$state !== void 0 ? _contextState$state : {}, inputRef);\n\n  var inputProps = React.useMemo(function () {\n    return radioState.inputProps;\n  }, [radioState.inputProps.checked, radioState.inputProps.disabled]);\n  var contextCombinedProps = React.useMemo(function () {\n    return _objectSpread({}, combinedProps);\n  }, [stableHash(combinedProps)]);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (isEmptyObj(contextState)) {\n    console.error('Error: Radio must be wrapped inside a Radio.Group');\n    return React.createElement(React.Fragment, null);\n  }\n  return React.createElement(RadioComponent, {\n    inputProps: inputProps,\n    combinedProps: contextCombinedProps,\n    children: children,\n    ref: ref,\n    icon: icon,\n    wrapperRef: wrapperRef,\n    isHovered: isHoveredProp,\n    isPressed: isPressed,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp\n  });\n};\nexport default memo(forwardRef(Radio));","map":{"version":3,"sources":["Radio.web.tsx"],"names":["React","memo","forwardRef","stableHash","Box","Stack","Center","usePropsResolution","wrapStringChild","mergeRefs","useHover","useRadio","VisuallyHidden","RadioContext","useFocusRing","CircleIcon","useHasResponsiveProps","combineContextAndProps","isEmptyObj","useFormControlContext","RadioComponent","icon","inputProps","combinedProps","children","wrapperRef","isHovered","isHoveredProp","isPressed","isPressedProp","isFocused","isFocusedProp","isFocusVisible","isFocusVisibleProp","props","ref","isInvalid","isReadOnly","isIndeterminate","disabled","isDisabled","checked","isChecked","_ref","useRef","mergedRefs","focusProps","setFocused","useState","setPressed","handleFocus","handleBlur","handlePressIn","handlePressOut","_interactionBox","_icon","_stack","_text","resolvedProps","sizedIcon","cloneElement","component","Radio","formControlContext","contextState","useContext","inputRef","radioState","accessibilityLabel","state","useMemo","contextCombinedProps","console","error"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\n//@ts-ignore\nimport stableHash from 'stable-hash';\nimport Box from '../Box';\nimport { Stack } from '../Stack';\nimport { Center } from '../../composites/Center';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\nimport type { IRadioProps } from './types';\nimport { mergeRefs } from './../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useRadio } from '@react-native-aria/radio';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { RadioContext } from './RadioGroup';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { CircleIcon } from '../Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps, isEmptyObj } from '../../../utils';\nimport { useFormControlContext } from '../../composites/FormControl';\nconst RadioComponent = memo(\n  forwardRef(\n    (\n      {\n        icon,\n        inputProps,\n        combinedProps,\n        children,\n        wrapperRef,\n        isHovered: isHoveredProp,\n        isPressed: isPressedProp,\n        isFocused: isFocusedProp,\n        isFocusVisible: isFocusVisibleProp,\n        ...props\n      }: any,\n      ref: any\n    ) => {\n      const { isInvalid, isReadOnly, isIndeterminate } = combinedProps;\n      const { disabled: isDisabled, checked: isChecked } = inputProps;\n      const _ref = React.useRef(null);\n      const { isHovered } = useHover({}, _ref);\n      const mergedRefs = mergeRefs([_ref, wrapperRef]);\n      const { focusProps, isFocusVisible } = useFocusRing();\n      const [isFocused, setFocused] = React.useState(isFocusedProp);\n      const [isPressed, setPressed] = React.useState(isPressedProp);\n      const handleFocus = () => {\n        setFocused(true);\n      };\n      const handleBlur = () => {\n        isFocusedProp ? setFocused(true) : setFocused(false);\n      };\n      const handlePressIn = () => {\n        setPressed(true);\n      };\n\n      const handlePressOut = () => {\n        isPressedProp ? setPressed(true) : setPressed(false);\n      };\n      const {\n        _interactionBox,\n        _icon,\n        _stack,\n        _text,\n        ...resolvedProps\n      } = usePropsResolution('Radio', combinedProps, {\n        isInvalid,\n        isReadOnly,\n        isFocusVisible: isFocusVisibleProp || isFocused || isFocusVisible,\n        isDisabled,\n        isIndeterminate,\n        isChecked,\n        isHovered: isHoveredProp || isHovered,\n        isPressed,\n        isFocused,\n      });\n\n      // only calling below function when icon exist.\n      const sizedIcon = () =>\n        //@ts-ignore\n        React.cloneElement(icon, {\n          ..._icon,\n        });\n\n      const component = (\n        <Stack {..._stack}>\n          <Center>\n            {/* Interaction Box */}\n            <Box {..._interactionBox} />\n            {/* Radio */}\n            <Center {...resolvedProps}>\n              {icon && sizedIcon && isChecked ? (\n                sizedIcon()\n              ) : (\n                <CircleIcon {..._icon} opacity={isChecked ? 1 : 0} />\n              )}\n            </Center>\n          </Center>\n          {wrapStringChild(children, _text)}\n        </Stack>\n      );\n      //TODO: refactor for responsive prop\n      if (useHasResponsiveProps(props)) {\n        return null;\n      }\n\n      return (\n        <Box\n          // @ts-ignore - RN web supports accessibilityRole=\"label\"\n          accessibilityRole=\"label\"\n          ref={mergedRefs}\n        >\n          <div onMouseDown={handlePressIn} onMouseUp={handlePressOut}>\n            <VisuallyHidden>\n              <input\n                {...inputProps}\n                {...focusProps}\n                ref={ref}\n                onFocus={handleFocus}\n                onBlur={handleBlur}\n              />\n            </VisuallyHidden>\n            {component}\n          </div>\n        </Box>\n      );\n    }\n  )\n);\n\nconst Radio = (\n  {\n    icon,\n    children,\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isPressed,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: IRadioProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const contextState = React.useContext(RadioContext);\n\n  const combinedProps = combineContextAndProps(\n    { ...formControlContext, ...contextState },\n    props\n  );\n\n  const inputRef = React.useRef(null);\n  const radioState = useRadio(\n    { ...combinedProps, 'aria-label': props.accessibilityLabel, children },\n    contextState.state ?? {},\n    inputRef\n  );\n\n  //@ts-ignore\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => radioState.inputProps, [\n    radioState.inputProps.checked,\n    radioState.inputProps.disabled,\n  ]);\n\n  const contextCombinedProps = React.useMemo(() => {\n    return { ...combinedProps };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [stableHash(combinedProps)]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (isEmptyObj(contextState)) {\n    console.error('Error: Radio must be wrapped inside a Radio.Group');\n    return <></>;\n  }\n\n  return (\n    <RadioComponent\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      children={children}\n      ref={ref}\n      icon={icon}\n      wrapperRef={wrapperRef}\n      isHovered={isHoveredProp}\n      isPressed={isPressed}\n      isFocused={isFocusedProp}\n      isFocusVisible={isFocusVisibleProp}\n    />\n  );\n};\n\nexport default memo(forwardRef(Radio));\n"]},"metadata":{},"sourceType":"module"}