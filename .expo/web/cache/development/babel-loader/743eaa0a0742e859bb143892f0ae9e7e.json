{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"align\", \"justify\", \"wrap\", \"basis\", \"grow\", \"shrink\", \"direction\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport Box from \"../Box\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar Flex = function Flex(props, ref) {\n  var _usePropsResolution = usePropsResolution('Flex', props),\n    align = _usePropsResolution.align,\n    justify = _usePropsResolution.justify,\n    wrap = _usePropsResolution.wrap,\n    basis = _usePropsResolution.basis,\n    grow = _usePropsResolution.grow,\n    shrink = _usePropsResolution.shrink,\n    direction = _usePropsResolution.direction,\n    resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return React.createElement(Box, _extends({}, resolvedProps, {\n    flexDirection: direction || resolvedProps.flexDirection,\n    alignItems: align || resolvedProps.alignItems,\n    justifyContent: justify || resolvedProps.justifyContent,\n    flexGrow: grow || resolvedProps.flexGrow,\n    flexBasis: basis || resolvedProps.flexBasis,\n    flexShrink: shrink || resolvedProps.flexShrink,\n    flexWrap: wrap || resolvedProps.flexWrap,\n    ref: ref\n  }));\n};\n\nexport var Spacer = function Spacer(props) {\n  var resolvedProps = usePropsResolution('Spacer', props);\n  return React.createElement(Box, resolvedProps);\n};\nexport default memo(forwardRef(Flex));","map":{"version":3,"sources":["index.tsx"],"names":["React","memo","forwardRef","Box","usePropsResolution","useHasResponsiveProps","Flex","props","ref","align","justify","wrap","basis","grow","shrink","direction","resolvedProps","flexDirection","alignItems","justifyContent","flexGrow","flexBasis","flexShrink","flexWrap","Spacer"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,OAAOC,GAAP;AAEA,SAASC,kBAAT;AACA,SAASC,qBAAT;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAI,CAAIC,KAAD,EAAoBC,GAApB,EAAiC;EAC5C,0BASIJ,kBAAkB,CAAC,MAAD,EAASG,KAAT,CAVsB;IAE1CE,KADI,uBACJA,KADI;IAEJC,OAFI,uBAEJA,OAFI;IAGJC,IAHI,uBAGJA,IAHI;IAIJC,KAJI,uBAIJA,KAJI;IAKJC,IALI,uBAKJA,IALI;IAMJC,MANI,uBAMJA,MANI;IAOJC,SAPI,uBAOJA,SAPI;IAQDC,aAAAA;;EAIL,IAAIX,qBAAqB,CAACE,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EAED,OACE,KAAA,CAAA,aAAA,CAAC,GAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EACMS,aADN,EAAA;IAEE,aAAa,EAAED,SAAS,IAAIC,aAAa,CAACC,aAF5C;IAGE,UAAU,EAAER,KAAK,IAAIO,aAAa,CAACE,UAHrC;IAIE,cAAc,EAAER,OAAO,IAAIM,aAAa,CAACG,cAJ3C;IAKE,QAAQ,EAAEN,IAAI,IAAIG,aAAa,CAACI,QALlC;IAME,SAAS,EAAER,KAAK,IAAII,aAAa,CAACK,SANpC;IAOE,UAAU,EAAEP,MAAM,IAAIE,aAAa,CAACM,UAPtC;IAQE,QAAQ,EAAEX,IAAI,IAAIK,aAAa,CAACO,QARlC;IASE,GAAG,EAAEf;EATP,CAAA,CAAA,CADF;AAaD,CA9BD;;AAiCA,OAAO,IAAMgB,MAAM,GAAIjB,SAAViB,MAAM,CAAIjB,KAAD,EAAgB;EACpC,IAAMS,aAAa,GAAGZ,kBAAkB,CAAC,QAAD,EAAWG,KAAX,CAAxC;EAEA,OAAO,KAAA,CAAA,aAAA,CAAC,GAAD,EAASS,aAAT,CAAP;AACD,CAJM;AAOP,eAAef,IAAI,CAACC,UAAU,CAACI,IAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../Box';\nimport type { IFlexProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Flex = (props: IFlexProps, ref: any) => {\n  const {\n    align,\n    justify,\n    wrap,\n    basis,\n    grow,\n    shrink,\n    direction,\n    ...resolvedProps\n  } = usePropsResolution('Flex', props);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box\n      {...resolvedProps}\n      flexDirection={direction || resolvedProps.flexDirection}\n      alignItems={align || resolvedProps.alignItems}\n      justifyContent={justify || resolvedProps.justifyContent}\n      flexGrow={grow || resolvedProps.flexGrow}\n      flexBasis={basis || resolvedProps.flexBasis}\n      flexShrink={shrink || resolvedProps.flexShrink}\n      flexWrap={wrap || resolvedProps.flexWrap}\n      ref={ref}\n    />\n  );\n};\n\n//Spacer Component that adds space between components where it is placed\nexport const Spacer = (props: any) => {\n  const resolvedProps = usePropsResolution('Spacer', props);\n\n  return <Box {...resolvedProps} />;\n};\n\nexport type { IFlexProps };\nexport default memo(forwardRef(Flex));\n"]},"metadata":{},"sourceType":"module"}