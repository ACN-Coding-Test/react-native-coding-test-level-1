{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React from 'react';\nvar ariaToAccessibilityMap = {\n  'aria-activedescendant': 'accessibilityActiveDescendant',\n  'aria-atomic': 'accessibilityAtomic',\n  'aria-autocomplete': 'accessibilityAutoComplete',\n  'aria-busy': 'accessibilityBusy',\n  'aria-checked': 'accessibilityChecked',\n  'aria-colcount': 'accessibilityColumnCount',\n  'aria-colindex': 'accessibilityColumnIndex',\n  'aria-colspan': 'accessibilityColumnSpan',\n  'aria-controls': 'accessibilityControls',\n  'aria-describedby': 'accessibilityDescribedBy',\n  'aria-details': 'accessibilityDetails',\n  'aria-disabled': 'accessibilityDisabled',\n  'aria-errormessage': 'accessibilityErrorMessage',\n  'aria-expanded': 'accessibilityExpanded',\n  'aria-flowto': 'accessibilityFlowTo',\n  'aria-haspopup': 'accessibilityHasPopup',\n  'aria-hidden': 'accessibilityHidden',\n  'aria-invalid': 'accessibilityInvalid',\n  'aria-keyshortcuts': 'accessibilityKeyShortcuts',\n  'aria-label': 'accessibilityLabel',\n  'aria-labelledby': 'accessibilityLabelledBy',\n  'aria-live': 'accessibilityLiveRegion',\n  'aria-modal': 'accessibilityModal',\n  'aria-multiline': 'accessibilityMultiline',\n  'aria-multiselectable': 'accessibilityMultiSelectable',\n  'aria-orientation': 'accessibilityOrientation',\n  'aria-owns': 'accessibilityOwns',\n  'aria-placeholder': 'accessibilityPlaceholder',\n  'aria-posinset': 'accessibilityPosInSet',\n  'aria-pressed': 'accessibilityPressed',\n  'aria-readonly': 'accessibilityReadOnly',\n  'aria-required': 'accessibilityRequired',\n  'aria-roledescription': 'accessibilityRoleDescription',\n  'aria-rowcount': 'accessibilityRowCount',\n  'aria-rowindex': 'accessibilityRowIndex',\n  'aria-rowspan': 'accessibilityRowSpan',\n  'aria-selected': 'accessibilitySelected',\n  'aria-setsize': 'accessibilitySetSize',\n  'aria-sort': 'accessibilitySort',\n  'aria-valuemax': 'accessibilityValueMax',\n  'aria-valuemin': 'accessibilityValueMin',\n  'aria-valuenow': 'accessibilityValueNow',\n  'aria-valuetext': 'accessibilityValueText'\n};\n\nexport var mapDomPropsToRN = function mapDomPropsToRN(props) {\n  var newProps = _objectSpread({}, props);\n  if (props.tabIndex === '0' || props.tabIndex === 0) {\n    newProps.focusable = true;\n  }\n\n  if (props.role) {\n    newProps.accessibilityRole = props.role;\n  }\n  if (props.id) {\n    newProps.nativeID = props.id;\n  }\n  for (var key in props) {\n    if (key.indexOf('aria') > -1) {\n      if (ariaToAccessibilityMap[key]) {\n        newProps[ariaToAccessibilityMap[key]] = props[key];\n      } else {\n        console.warn('@react-native-aria/utils:: ', 'No equivalent mapping of ' + key + ' found in ariaToAccessibilityMap. Please raise a PR to support this attribute.');\n      }\n    } else if (key.indexOf('data-') > -1) {\n      if (!newProps.dataSet) {\n        newProps.dataSet = {};\n      }\n      newProps.dataSet[key.split('data-')[1]] = props[key];\n    }\n  }\n  return newProps;\n};\n\nexport var useMapDomPropsToRN = function useMapDomPropsToRN(props, ref) {\n  React.useEffect(function () {\n    if (ref.current) {\n      ref.current.tabIndex = props.tabIndex;\n    }\n  }, [props.tabIndex]);\n  return mapDomPropsToRN(props);\n};","map":{"version":3,"sources":["ariaToAccessibilityMap.ts"],"names":["React","ariaToAccessibilityMap","mapDomPropsToRN","props","newProps","tabIndex","focusable","role","accessibilityRole","id","nativeID","key","indexOf","console","warn","dataSet","split","useMapDomPropsToRN","ref","useEffect","current"],"mappings":"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","sourcesContent":["import React, { RefObject } from 'react';\n\nconst ariaToAccessibilityMap: any = {\n  'aria-activedescendant': 'accessibilityActiveDescendant',\n  'aria-atomic': 'accessibilityAtomic',\n  'aria-autocomplete': 'accessibilityAutoComplete',\n  'aria-busy': 'accessibilityBusy',\n  'aria-checked': 'accessibilityChecked',\n  'aria-colcount': 'accessibilityColumnCount',\n  'aria-colindex': 'accessibilityColumnIndex',\n  'aria-colspan': 'accessibilityColumnSpan',\n  'aria-controls': 'accessibilityControls',\n  'aria-describedby': 'accessibilityDescribedBy',\n  'aria-details': 'accessibilityDetails',\n  'aria-disabled': 'accessibilityDisabled',\n  'aria-errormessage': 'accessibilityErrorMessage',\n  'aria-expanded': 'accessibilityExpanded',\n  'aria-flowto': 'accessibilityFlowTo',\n  'aria-haspopup': 'accessibilityHasPopup',\n  'aria-hidden': 'accessibilityHidden',\n  'aria-invalid': 'accessibilityInvalid',\n  'aria-keyshortcuts': 'accessibilityKeyShortcuts',\n  'aria-label': 'accessibilityLabel',\n  'aria-labelledby': 'accessibilityLabelledBy',\n  'aria-live': 'accessibilityLiveRegion',\n  'aria-modal': 'accessibilityModal',\n  'aria-multiline': 'accessibilityMultiline',\n  'aria-multiselectable': 'accessibilityMultiSelectable',\n  'aria-orientation': 'accessibilityOrientation',\n  'aria-owns': 'accessibilityOwns',\n  'aria-placeholder': 'accessibilityPlaceholder',\n  'aria-posinset': 'accessibilityPosInSet',\n  'aria-pressed': 'accessibilityPressed',\n  'aria-readonly': 'accessibilityReadOnly',\n  'aria-required': 'accessibilityRequired',\n  'aria-roledescription': 'accessibilityRoleDescription',\n  'aria-rowcount': 'accessibilityRowCount',\n  'aria-rowindex': 'accessibilityRowIndex',\n  'aria-rowspan': 'accessibilityRowSpan',\n  'aria-selected': 'accessibilitySelected',\n  'aria-setsize': 'accessibilitySetSize',\n  'aria-sort': 'accessibilitySort',\n  'aria-valuemax': 'accessibilityValueMax',\n  'aria-valuemin': 'accessibilityValueMin',\n  'aria-valuenow': 'accessibilityValueNow',\n  'aria-valuetext': 'accessibilityValueText',\n};\n\n// Refer - https://necolas.github.io/react-native-web/docs/accessibility/\nexport const mapDomPropsToRN = (props: any) => {\n  let newProps: any = { ...props };\n\n  if (props.tabIndex === '0' || props.tabIndex === 0) {\n    newProps.focusable = true;\n  }\n  // use the below hook for tabIndex\n  // useMapDomPropsToRN\n  // if (props.tabIndex === '-1' || props.tabIndex === -1) {\n  //   newProps.focusable = false;\n  // }\n\n  if (props.role) {\n    newProps.accessibilityRole = props.role;\n  }\n\n  if (props.id) {\n    newProps.nativeID = props.id;\n  }\n\n  for (let key in props) {\n    // Map aria to RN web accessibility equivalents\n    if (key.indexOf('aria') > -1) {\n      if (ariaToAccessibilityMap[key]) {\n        newProps[ariaToAccessibilityMap[key]] = props[key];\n      } else {\n        console.warn(\n          '@react-native-aria/utils:: ',\n          'No equivalent mapping of ' +\n            key +\n            ' found in ariaToAccessibilityMap. Please raise a PR to support this attribute.'\n        );\n      }\n    } else if (key.indexOf('data-') > -1) {\n      if (!newProps.dataSet) {\n        newProps.dataSet = {};\n      }\n\n      newProps.dataSet[key.split('data-')[1]] = props[key];\n    }\n  }\n\n  return newProps;\n};\n\n// RN web currently doesn't allow setting tabIndex via props, so need to be set using setNativeProps or ref\n// https://github.com/necolas/react-native-web/issues/1916\n// https://github.com/necolas/react-native-web/issues/1099\nexport const useMapDomPropsToRN = (props: any, ref: RefObject<any>) => {\n  React.useEffect(() => {\n    if (ref.current) {\n      ref.current.tabIndex = props.tabIndex;\n    }\n  }, [props.tabIndex]);\n\n  return mapDomPropsToRN(props);\n};\n"]},"metadata":{},"sourceType":"module"}