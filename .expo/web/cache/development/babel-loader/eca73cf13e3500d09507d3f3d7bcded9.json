{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"fieldIndex\", \"defaultValue\"],\n  _excluded2 = [\"handleChange\", \"value\", \"setRefList\", \"defaultValue\", \"handleMultiValueChange\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport { Input } from \"../../primitives/Input\";\nimport { PinInputContext } from \"./Context\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { mergeRefs } from \"../../../utils\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar PinInputFiled = function PinInputFiled(_ref, ref) {\n  var _ref$fieldIndex = _ref.fieldIndex,\n    fieldIndex = _ref$fieldIndex === void 0 ? 0 : _ref$fieldIndex,\n    pDefaultValue = _ref.defaultValue,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _React$useContext = React.useContext(PinInputContext),\n    handleChange = _React$useContext.handleChange,\n    cValue = _React$useContext.value,\n    setRefList = _React$useContext.setRefList,\n    cDefaultValue = _React$useContext.defaultValue,\n    handleMultiValueChange = _React$useContext.handleMultiValueChange,\n    context = _objectWithoutProperties(_React$useContext, _excluded2);\n  cDefaultValue = cDefaultValue && cDefaultValue[fieldIndex];\n  var defaultValue = pDefaultValue || cDefaultValue;\n  var value = cValue && cValue[fieldIndex];\n  var keyPressHandler = function keyPressHandler(event) {\n    if (Platform.OS !== 'web') {\n      if (event.nativeEvent.key >= 0 && event.nativeEvent.key <= 9) {\n        handleChange && handleChange(event.nativeEvent.key, fieldIndex);\n      } else if (event.nativeEvent.key === 'Backspace') {\n        handleChange && handleChange('', fieldIndex);\n      }\n    }\n  };\n  var textChangeHandler = function textChangeHandler(value) {\n    handleMultiValueChange && handleMultiValueChange(value, fieldIndex);\n  };\n  var myRef = React.useRef(null);\n  React.useEffect(function () {\n    setRefList && setRefList(myRef, fieldIndex);\n  }, [myRef, fieldIndex, setRefList]);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return React.createElement(Input, _extends({\n    ref: mergeRefs([myRef, ref])\n  }, context, props, {\n    onKeyPress: function onKeyPress(event) {\n      return keyPressHandler(event);\n    },\n    onChangeText: function onChangeText(value) {\n      return textChangeHandler(value);\n    },\n    keyboardType: \"numeric\",\n    defaultValue: defaultValue,\n    value: value\n  }));\n};\nexport default React.memo(React.forwardRef(PinInputFiled));","map":{"version":3,"sources":["PinInputField.tsx"],"names":["React","Input","PinInputContext","mergeRefs","useHasResponsiveProps","PinInputFiled","fieldIndex","defaultValue","pDefaultValue","props","ref","handleChange","value","cValue","setRefList","cDefaultValue","handleMultiValueChange","context","useContext","keyPressHandler","event","Platform","OS","nativeEvent","key","textChangeHandler","myRef","useRef","useEffect","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT;AAEA,SAASC,eAAT;AAAA;AAEA,SAASC,SAAT;AACA,SAASC,qBAAT;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAa,OAMjBK,GANoB,EAOjB;EAAA,2BALDJ,UAAU;IAAVA,UAAU,gCAAG,CADf;IAEgBE,aAFhB,QAEED,YAAY;IACTE,KAAAA;EAIL,wBAOsBT,KAAK,CAACkB,UAANlB,CAAiBE,eAAjBF,CAPtB;IACEW,YADE,qBACFA,YADE;IAEKE,MAFL,qBAEFD,KAAK;IACLE,UAHE,qBAGFA,UAHE;IAIYC,aAJZ,qBAIFR,YAAY;IACZS,sBALE,qBAKFA,sBALE;IAMCC,OAAAA;EAELF,aAAa,GAAGA,aAAa,IAAIA,aAAa,CAACT,UAAD,CAA9CS;EACA,IAAIR,YAAY,GAAGC,aAAa,IAAIO,aAApC;EACA,IAAIH,KAAK,GAAGC,MAAM,IAAIA,MAAM,CAACP,UAAD,CAA5B;EAEA,IAAMa,eAAe,GAAIC,SAAnBD,eAAe,CAAIC,KAAD,EAAgB;IACtC,IAAIC,QAAQ,CAACC,EAATD,KAAgB,KAApB,EAA2B;MACzB,IAAID,KAAK,CAACG,WAANH,CAAkBI,GAAlBJ,IAAyB,CAAzBA,IAA8BA,KAAK,CAACG,WAANH,CAAkBI,GAAlBJ,IAAyB,CAA3D,EAA8D;QAC5DT,YAAY,IAAIA,YAAY,CAACS,KAAK,CAACG,WAANH,CAAkBI,GAAnB,EAAwBlB,UAAxB,CAA5BK;MACD,CAFD,MAEO,IAAIS,KAAK,CAACG,WAANH,CAAkBI,GAAlBJ,KAA0B,WAA9B,EAA2C;QAChDT,YAAY,IAAIA,YAAY,CAAC,EAAD,EAAKL,UAAL,CAA5BK;MACD;IACF;EACF,CARD;EASA,IAAMc,iBAAiB,GAAIb,SAArBa,iBAAiB,CAAIb,KAAD,EAAgB;IAExCI,sBAAsB,IAAIA,sBAAsB,CAACJ,KAAD,EAAQN,UAAR,CAAhDU;EACD,CAHD;EAIA,IAAMU,KAAK,GAAG1B,KAAK,CAAC2B,MAAN3B,CAAa,IAAbA,CAAd;EACAA,KAAK,CAAC4B,SAAN5B,CAAgB,YAAM;IACpBc,UAAU,IAAIA,UAAU,CAACY,KAAD,EAAQpB,UAAR,CAAxBQ;EACD,CAFDd,EAEG,CAAC0B,KAAD,EAAQpB,UAAR,EAAoBQ,UAApB,CAFHd,CA3BG;;EAgCH,IAAII,qBAAqB,CAACK,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EACD,OACE,KAAA,CAAA,aAAA,CAAC,KAAD,EAAA,QAAA,CAAA;IAEE,GAAG,EAAEN,SAAS,CAAC,CAACuB,KAAD,EAAQhB,GAAR,CAAD;EAFhB,CAAA,EAGMO,OAHN,EAIMR,KAJN,EAAA;IAKE,UAAU,EAAGW,oBAAAA,KAAD;MAAA,OAAWD,eAAe,CAACC,KAAD,CALxC;IAAA;IAME,YAAY,EAAGR,sBAAAA,KAAD;MAAA,OAAWa,iBAAiB,CAACb,KAAD,CAN5C;IAAA;IAOE,YAAY,EAAC,SAPf;IAQE,YAAY,EAAEL,YARhB;IASE,KAAK,EAAEK;EATT,CAAA,CAAA,CADF;AAaD,CAvDD;AAyDA,eAAeZ,KAAK,CAAC6B,IAAN7B,CAAWA,KAAK,CAAC8B,UAAN9B,CAAiBK,aAAjBL,CAAXA,CAAf","sourcesContent":["import React from 'react';\nimport { Input } from '../../primitives/Input';\nimport type { IPinInputFieldProps, IPinInputContext } from './types';\nimport { PinInputContext } from './Context';\nimport { Platform } from 'react-native';\nimport { mergeRefs } from '../../../utils';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst PinInputFiled = (\n  {\n    fieldIndex = 0,\n    defaultValue: pDefaultValue,\n    ...props\n  }: IPinInputFieldProps,\n  ref?: any\n) => {\n  let {\n    handleChange,\n    value: cValue,\n    setRefList,\n    defaultValue: cDefaultValue,\n    handleMultiValueChange,\n    ...context\n  }: IPinInputContext = React.useContext(PinInputContext);\n  cDefaultValue = cDefaultValue && cDefaultValue[fieldIndex];\n  let defaultValue = pDefaultValue || cDefaultValue;\n  let value = cValue && cValue[fieldIndex];\n\n  const keyPressHandler = (event: any) => {\n    if (Platform.OS !== 'web') {\n      if (event.nativeEvent.key >= 0 && event.nativeEvent.key <= 9) {\n        handleChange && handleChange(event.nativeEvent.key, fieldIndex);\n      } else if (event.nativeEvent.key === 'Backspace') {\n        handleChange && handleChange('', fieldIndex);\n      }\n    }\n  };\n  const textChangeHandler = (value: any) => {\n    // Also used to handle change for Android.\n    handleMultiValueChange && handleMultiValueChange(value, fieldIndex);\n  };\n  const myRef = React.useRef(null);\n  React.useEffect(() => {\n    setRefList && setRefList(myRef, fieldIndex);\n  }, [myRef, fieldIndex, setRefList]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Input\n      //@ts-ignore\n      ref={mergeRefs([myRef, ref])}\n      {...context}\n      {...props}\n      onKeyPress={(event) => keyPressHandler(event)}\n      onChangeText={(value) => textChangeHandler(value)}\n      keyboardType=\"numeric\"\n      defaultValue={defaultValue}\n      value={value}\n    />\n  );\n};\n\nexport default React.memo(React.forwardRef(PinInputFiled));\n"]},"metadata":{},"sourceType":"module"}