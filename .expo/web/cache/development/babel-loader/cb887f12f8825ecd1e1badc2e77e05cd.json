{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"trigger\", \"closeOnSelect\", \"children\", \"onOpen\", \"onClose\", \"isOpen\", \"defaultIsOpen\", \"placement\"],\n  _excluded2 = [\"_overlay\", \"_presenceTransition\", \"_backdrop\", \"useRNModal\"],\n  _excluded3 = [\"menuRef\", \"children\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport Box from \"../../primitives/Box\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { Popper } from \"../Popper\";\nimport AccessibilityInfo from \"react-native-web/dist/exports/AccessibilityInfo\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { useControllableState } from \"../../../hooks\";\nimport { useMenuTrigger, useMenu, useMenuTypeahead } from \"./useMenu\";\nimport Backdrop from \"../Backdrop\";\nimport { PresenceTransition } from \"../Transitions\";\nimport { FocusScope } from '@react-native-aria/focus';\nimport { MenuContext } from \"./MenuContext\";\nimport { Overlay } from \"../../primitives/Overlay\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar Menu = function Menu(_ref, ref) {\n  var trigger = _ref.trigger,\n    _ref$closeOnSelect = _ref.closeOnSelect,\n    closeOnSelect = _ref$closeOnSelect === void 0 ? true : _ref$closeOnSelect,\n    children = _ref.children,\n    onOpen = _ref.onOpen,\n    onClose = _ref.onClose,\n    isOpenProp = _ref.isOpen,\n    defaultIsOpen = _ref.defaultIsOpen,\n    _ref$placement = _ref.placement,\n    placement = _ref$placement === void 0 ? 'bottom left' : _ref$placement,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var triggerRef = React.useRef(null);\n  var _useControllableState = useControllableState({\n      value: isOpenProp,\n      defaultValue: defaultIsOpen,\n      onChange: function onChange(value) {\n        value ? onOpen && onOpen() : onClose && onClose();\n      }\n    }),\n    _useControllableState2 = _slicedToArray(_useControllableState, 2),\n    isOpen = _useControllableState2[0],\n    setIsOpen = _useControllableState2[1];\n  var _usePropsResolution = usePropsResolution('Menu', props),\n    _overlay = _usePropsResolution._overlay,\n    _presenceTransition = _usePropsResolution._presenceTransition,\n    _backdrop = _usePropsResolution._backdrop,\n    useRNModal = _usePropsResolution.useRNModal,\n    resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n  var handleOpen = React.useCallback(function () {\n    setIsOpen(true);\n  }, [setIsOpen]);\n  var handleClose = React.useCallback(function () {\n    setIsOpen(false);\n  }, [setIsOpen]);\n  var triggerProps = useMenuTrigger({\n    handleOpen: handleOpen,\n    isOpen: isOpen\n  });\n  var updatedTrigger = function updatedTrigger() {\n    return trigger(_objectSpread(_objectSpread({}, triggerProps), {}, {\n      ref: triggerRef,\n      onPress: handleOpen\n    }), {\n      open: isOpen\n    });\n  };\n  React.useEffect(function () {\n    if (isOpen) {\n      AccessibilityInfo.announceForAccessibility('Popup window');\n    }\n  }, [isOpen]);\n\n  if (useHasResponsiveProps(resolvedProps)) {\n    return null;\n  }\n  return React.createElement(React.Fragment, null, updatedTrigger(), React.createElement(Overlay, _extends({\n    isOpen: isOpen,\n    onRequestClose: handleClose,\n    useRNModalOnAndroid: true,\n    useRNModal: useRNModal\n  }, _overlay, {\n    unmountOnExit: true\n  }), React.createElement(PresenceTransition, _extends({\n    visible: isOpen\n  }, _presenceTransition), React.createElement(Popper, _extends({\n    triggerRef: triggerRef,\n    onClose: handleClose,\n    placement: placement\n  }, resolvedProps), React.createElement(Backdrop, _extends({\n    onPress: handleClose\n  }, _backdrop)), React.createElement(Popper.Content, {\n    isOpen: isOpen\n  }, React.createElement(MenuContext.Provider, {\n    value: {\n      closeOnSelect: closeOnSelect,\n      onClose: handleClose\n    }\n  }, React.createElement(FocusScope, {\n    contain: true,\n    restoreFocus: true,\n    autoFocus: true\n  }, React.createElement(MenuContent, _extends({\n    menuRef: ref\n  }, resolvedProps), children))))))));\n};\nvar MenuContent = function MenuContent(_ref2) {\n  var menuRef = _ref2.menuRef,\n    children = _ref2.children,\n    props = _objectWithoutProperties(_ref2, _excluded3);\n  var menuProps = useMenu();\n  var typeaheadProps = useMenuTypeahead(menuProps);\n  return React.createElement(Box, _extends({}, props, menuProps, typeaheadProps, {\n    ref: menuRef\n  }), React.createElement(ScrollView, null, children));\n};\nexport default memo(forwardRef(Menu));","map":{"version":3,"sources":["Menu.tsx"],"names":["React","memo","forwardRef","Box","usePropsResolution","Popper","useControllableState","useMenuTrigger","useMenu","useMenuTypeahead","Backdrop","PresenceTransition","FocusScope","MenuContext","Overlay","useHasResponsiveProps","Menu","trigger","closeOnSelect","children","onOpen","onClose","isOpen","isOpenProp","defaultIsOpen","placement","props","ref","triggerRef","useRef","setIsOpen","value","defaultValue","onChange","_overlay","_presenceTransition","_backdrop","useRNModal","resolvedProps","handleOpen","useCallback","handleClose","triggerProps","updatedTrigger","onPress","open","useEffect","AccessibilityInfo","announceForAccessibility","MenuContent","menuRef","menuProps","typeaheadProps"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport type { IMenuProps } from './types';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Popper } from '../Popper';\nimport { AccessibilityInfo, ScrollView } from 'react-native';\nimport { useControllableState } from '../../../hooks';\nimport { useMenuTrigger, useMenu, useMenuTypeahead } from './useMenu';\nimport Backdrop from '../Backdrop';\nimport { PresenceTransition } from '../Transitions';\nimport { FocusScope } from '@react-native-aria/focus';\nimport { MenuContext } from './MenuContext';\nimport { Overlay } from '../../primitives/Overlay';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Menu = (\n  {\n    trigger,\n    closeOnSelect = true,\n    children,\n    onOpen,\n    onClose,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    placement = 'bottom left',\n    ...props\n  }: IMenuProps,\n  ref?: any\n) => {\n  const triggerRef = React.useRef(null);\n  const [isOpen, setIsOpen] = useControllableState({\n    value: isOpenProp,\n    defaultValue: defaultIsOpen,\n    onChange: (value) => {\n      value ? onOpen && onOpen() : onClose && onClose();\n    },\n  });\n\n  const {\n    _overlay,\n    _presenceTransition,\n    _backdrop,\n    useRNModal,\n    ...resolvedProps\n  } = usePropsResolution('Menu', props);\n  const handleOpen = React.useCallback(() => {\n    setIsOpen(true);\n  }, [setIsOpen]);\n\n  const handleClose = React.useCallback(() => {\n    setIsOpen(false);\n  }, [setIsOpen]);\n\n  const triggerProps = useMenuTrigger({\n    handleOpen,\n    isOpen,\n  });\n\n  const updatedTrigger = () => {\n    return trigger(\n      {\n        ...triggerProps,\n        ref: triggerRef,\n        onPress: handleOpen,\n      },\n      { open: isOpen }\n    );\n  };\n\n  React.useEffect(() => {\n    if (isOpen) {\n      AccessibilityInfo.announceForAccessibility('Popup window');\n    }\n  }, [isOpen]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(resolvedProps)) {\n    return null;\n  }\n  return (\n    <>\n      {updatedTrigger()}\n      <Overlay\n        isOpen={isOpen}\n        onRequestClose={handleClose}\n        useRNModalOnAndroid\n        useRNModal={useRNModal}\n        {..._overlay}\n        unmountOnExit\n      >\n        <PresenceTransition visible={isOpen} {..._presenceTransition}>\n          <Popper\n            triggerRef={triggerRef}\n            onClose={handleClose}\n            placement={placement}\n            {...resolvedProps}\n          >\n            <Backdrop onPress={handleClose} {..._backdrop} />\n            <Popper.Content isOpen={isOpen}>\n              <MenuContext.Provider\n                value={{ closeOnSelect, onClose: handleClose }}\n              >\n                <FocusScope contain restoreFocus autoFocus>\n                  <MenuContent menuRef={ref} {...resolvedProps}>\n                    {children}\n                  </MenuContent>\n                </FocusScope>\n              </MenuContext.Provider>\n            </Popper.Content>\n          </Popper>\n        </PresenceTransition>\n      </Overlay>\n    </>\n  );\n};\n\nconst MenuContent = ({\n  menuRef,\n  children,\n  ...props\n}: Omit<IMenuProps, 'trigger'> & { menuRef: any }) => {\n  const menuProps = useMenu();\n  const typeaheadProps = useMenuTypeahead(menuProps);\n\n  return (\n    <Box {...props} {...menuProps} {...typeaheadProps} ref={menuRef}>\n      <ScrollView>{children}</ScrollView>\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Menu));\n"]},"metadata":{},"sourceType":"module"}