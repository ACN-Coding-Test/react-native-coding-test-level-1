{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _wrapNativeSuper from \"@babel/runtime/helpers/wrapNativeSuper\";\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { useRef as $Qsto2$useRef, useState as $Qsto2$useState, useMemo as $Qsto2$useMemo, useEffect as $Qsto2$useEffect } from \"react\";\nimport { useControlledState as $Qsto2$useControlledState } from \"@react-stately/utils\";\nvar $e40ea825a81a3709$export$52baac22726c72bf = function (_Set) {\n  _inherits($e40ea825a81a3709$export$52baac22726c72bf, _Set);\n  var _super = _createSuper($e40ea825a81a3709$export$52baac22726c72bf);\n  function $e40ea825a81a3709$export$52baac22726c72bf(keys, anchorKey, currentKey) {\n    var _this;\n    _classCallCheck(this, $e40ea825a81a3709$export$52baac22726c72bf);\n    _this = _super.call(this, keys);\n    if (keys instanceof $e40ea825a81a3709$export$52baac22726c72bf) {\n      _this.anchorKey = anchorKey || keys.anchorKey;\n      _this.currentKey = currentKey || keys.currentKey;\n    } else {\n      _this.anchorKey = anchorKey;\n      _this.currentKey = currentKey;\n    }\n    return _this;\n  }\n  return _createClass($e40ea825a81a3709$export$52baac22726c72bf);\n}(_wrapNativeSuper(Set));\nfunction $7af3f5b51489e0b5$var$equalSets(setA, setB) {\n  if (setA.size !== setB.size) return false;\n  for (var _iterator = _createForOfIteratorHelperLoose(setA), _step; !(_step = _iterator()).done;) {\n    var item = _step.value;\n    if (!setB.has(item)) return false;\n  }\n  return true;\n}\nfunction $7af3f5b51489e0b5$export$253fe78d46329472(props) {\n  var _props$selectionMode = props.selectionMode,\n    selectionMode = _props$selectionMode === void 0 ? 'none' : _props$selectionMode,\n    disallowEmptySelection = props.disallowEmptySelection,\n    allowDuplicateSelectionEvents = props.allowDuplicateSelectionEvents,\n    _props$selectionBehav = props.selectionBehavior,\n    selectionBehaviorProp = _props$selectionBehav === void 0 ? 'toggle' : _props$selectionBehav,\n    _props$disabledBehavi = props.disabledBehavior,\n    disabledBehavior = _props$disabledBehavi === void 0 ? 'all' : _props$disabledBehavi;\n  var isFocusedRef = $Qsto2$useRef(false);\n  var _$Qsto2$useState = $Qsto2$useState(false),\n    _$Qsto2$useState2 = _slicedToArray(_$Qsto2$useState, 2),\n    _setFocused = _$Qsto2$useState2[1];\n  var focusedKeyRef = $Qsto2$useRef(null);\n  var childFocusStrategyRef = $Qsto2$useRef(null);\n  var _$Qsto2$useState3 = $Qsto2$useState(null),\n    _$Qsto2$useState4 = _slicedToArray(_$Qsto2$useState3, 2),\n    _setFocusedKey = _$Qsto2$useState4[1];\n  var selectedKeysProp = $Qsto2$useMemo(function () {\n    return $7af3f5b51489e0b5$var$convertSelection(props.selectedKeys);\n  }, [props.selectedKeys]);\n  var defaultSelectedKeys = $Qsto2$useMemo(function () {\n    return $7af3f5b51489e0b5$var$convertSelection(props.defaultSelectedKeys, new $e40ea825a81a3709$export$52baac22726c72bf());\n  }, [props.defaultSelectedKeys]);\n  var _$Qsto2$useControlled = $Qsto2$useControlledState(selectedKeysProp, defaultSelectedKeys, props.onSelectionChange),\n    _$Qsto2$useControlled2 = _slicedToArray(_$Qsto2$useControlled, 2),\n    selectedKeys = _$Qsto2$useControlled2[0],\n    _setSelectedKeys = _$Qsto2$useControlled2[1];\n  var disabledKeysProp = $Qsto2$useMemo(function () {\n    return props.disabledKeys ? new Set(props.disabledKeys) : new Set();\n  }, [props.disabledKeys]);\n  var _$Qsto2$useState5 = $Qsto2$useState(selectionBehaviorProp),\n    _$Qsto2$useState6 = _slicedToArray(_$Qsto2$useState5, 2),\n    selectionBehavior = _$Qsto2$useState6[0],\n    setSelectionBehavior = _$Qsto2$useState6[1];\n  if (selectionBehaviorProp === 'replace' && selectionBehavior === 'toggle' && typeof selectedKeys === 'object' && selectedKeys.size === 0) setSelectionBehavior('replace');\n  var lastSelectionBehavior = $Qsto2$useRef(selectionBehaviorProp);\n  $Qsto2$useEffect(function () {\n    if (selectionBehaviorProp !== lastSelectionBehavior.current) {\n      setSelectionBehavior(selectionBehaviorProp);\n      lastSelectionBehavior.current = selectionBehaviorProp;\n    }\n  }, [selectionBehaviorProp]);\n  return {\n    selectionMode: selectionMode,\n    disallowEmptySelection: disallowEmptySelection,\n    selectionBehavior: selectionBehavior,\n    setSelectionBehavior: setSelectionBehavior,\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n    setFocused: function setFocused(f) {\n      isFocusedRef.current = f;\n      _setFocused(f);\n    },\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n    setFocusedKey: function setFocusedKey(k) {\n      var childFocusStrategy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'first';\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n      _setFocusedKey(k);\n    },\n    selectedKeys: selectedKeys,\n    setSelectedKeys: function setSelectedKeys(keys) {\n      if (allowDuplicateSelectionEvents || !$7af3f5b51489e0b5$var$equalSets(keys, selectedKeys)) _setSelectedKeys(keys);\n    },\n    disabledKeys: disabledKeysProp,\n    disabledBehavior: disabledBehavior\n  };\n}\nfunction $7af3f5b51489e0b5$var$convertSelection(selection, defaultValue) {\n  if (!selection) return defaultValue;\n  return selection === 'all' ? 'all' : new $e40ea825a81a3709$export$52baac22726c72bf(selection);\n}\nvar $d496c0a20b6e58ec$export$6c8a5aaad13c9852 = function () {\n  function $d496c0a20b6e58ec$export$6c8a5aaad13c9852(collection, state, options) {\n    _classCallCheck(this, $d496c0a20b6e58ec$export$6c8a5aaad13c9852);\n    this.collection = collection;\n    this.state = state;\n    var ref;\n    this.allowsCellSelection = (ref = options === null || options === void 0 ? void 0 : options.allowsCellSelection) !== null && ref !== void 0 ? ref : false;\n    this._isSelectAll = null;\n  }\n  _createClass($d496c0a20b6e58ec$export$6c8a5aaad13c9852, [{\n    key: \"selectionMode\",\n    get:\n    function get() {\n      return this.state.selectionMode;\n    }\n  }, {\n    key: \"disallowEmptySelection\",\n    get:\n    function get() {\n      return this.state.disallowEmptySelection;\n    }\n  }, {\n    key: \"selectionBehavior\",\n    get:\n    function get() {\n      return this.state.selectionBehavior;\n    }\n  }, {\n    key: \"setSelectionBehavior\",\n    value:\n    function setSelectionBehavior(selectionBehavior) {\n      this.state.setSelectionBehavior(selectionBehavior);\n    }\n  }, {\n    key: \"isFocused\",\n    get:\n    function get() {\n      return this.state.isFocused;\n    }\n  }, {\n    key: \"setFocused\",\n    value:\n    function setFocused(isFocused) {\n      this.state.setFocused(isFocused);\n    }\n  }, {\n    key: \"focusedKey\",\n    get:\n    function get() {\n      return this.state.focusedKey;\n    }\n  }, {\n    key: \"childFocusStrategy\",\n    get: function get() {\n      return this.state.childFocusStrategy;\n    }\n  }, {\n    key: \"setFocusedKey\",\n    value:\n    function setFocusedKey(key, childFocusStrategy) {\n      if (key == null || this.collection.getItem(key)) this.state.setFocusedKey(key, childFocusStrategy);\n    }\n  }, {\n    key: \"selectedKeys\",\n    get:\n    function get() {\n      return this.state.selectedKeys === 'all' ? new Set(this.getSelectAllKeys()) : this.state.selectedKeys;\n    }\n  }, {\n    key: \"rawSelection\",\n    get:\n    function get() {\n      return this.state.selectedKeys;\n    }\n  }, {\n    key: \"isSelected\",\n    value:\n    function isSelected(key) {\n      if (this.state.selectionMode === 'none') return false;\n      key = this.getKey(key);\n      return this.state.selectedKeys === 'all' ? this.canSelectItem(key) : this.state.selectedKeys.has(key);\n    }\n  }, {\n    key: \"isEmpty\",\n    get:\n    function get() {\n      return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n    }\n  }, {\n    key: \"isSelectAll\",\n    get:\n    function get() {\n      if (this.isEmpty) return false;\n      if (this.state.selectedKeys === 'all') return true;\n      if (this._isSelectAll != null) return this._isSelectAll;\n      var allKeys = this.getSelectAllKeys();\n      var selectedKeys = this.state.selectedKeys;\n      this._isSelectAll = allKeys.every(function (k) {\n        return selectedKeys.has(k);\n      });\n      return this._isSelectAll;\n    }\n  }, {\n    key: \"firstSelectedKey\",\n    get: function get() {\n      var first = null;\n      for (var _iterator2 = _createForOfIteratorHelperLoose(this.state.selectedKeys), _step2; !(_step2 = _iterator2()).done;) {\n        var key = _step2.value;\n        var item = this.collection.getItem(key);\n        if (!first || (item === null || item === void 0 ? void 0 : item.index) < first.index) first = item;\n      }\n      return first === null || first === void 0 ? void 0 : first.key;\n    }\n  }, {\n    key: \"lastSelectedKey\",\n    get: function get() {\n      var last = null;\n      for (var _iterator3 = _createForOfIteratorHelperLoose(this.state.selectedKeys), _step3; !(_step3 = _iterator3()).done;) {\n        var key = _step3.value;\n        var item = this.collection.getItem(key);\n        if (!last || (item === null || item === void 0 ? void 0 : item.index) > last.index) last = item;\n      }\n      return last === null || last === void 0 ? void 0 : last.key;\n    }\n  }, {\n    key: \"disabledKeys\",\n    get: function get() {\n      return this.state.disabledKeys;\n    }\n  }, {\n    key: \"disabledBehavior\",\n    get: function get() {\n      return this.state.disabledBehavior;\n    }\n  }, {\n    key: \"extendSelection\",\n    value:\n    function extendSelection(toKey) {\n      if (this.selectionMode === 'none') return;\n      if (this.selectionMode === 'single') {\n        this.replaceSelection(toKey);\n        return;\n      }\n      toKey = this.getKey(toKey);\n      var selection;\n      if (this.state.selectedKeys === 'all') selection = new $e40ea825a81a3709$export$52baac22726c72bf([toKey], toKey, toKey);else {\n        var selectedKeys = this.state.selectedKeys;\n        var anchorKey = selectedKeys.anchorKey || toKey;\n        selection = new $e40ea825a81a3709$export$52baac22726c72bf(selectedKeys, anchorKey, toKey);\n        for (var _iterator4 = _createForOfIteratorHelperLoose(this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)), _step4; !(_step4 = _iterator4()).done;) {\n          var key = _step4.value;\n          selection.delete(key);\n        }\n        for (var _iterator5 = _createForOfIteratorHelperLoose(this.getKeyRange(toKey, anchorKey)), _step5; !(_step5 = _iterator5()).done;) {\n          var key1 = _step5.value;\n          if (this.canSelectItem(key1)) selection.add(key1);\n        }\n      }\n      this.state.setSelectedKeys(selection);\n    }\n  }, {\n    key: \"getKeyRange\",\n    value: function getKeyRange(from, to) {\n      var fromItem = this.collection.getItem(from);\n      var toItem = this.collection.getItem(to);\n      if (fromItem && toItem) {\n        if (fromItem.index <= toItem.index) return this.getKeyRangeInternal(from, to);\n        return this.getKeyRangeInternal(to, from);\n      }\n      return [];\n    }\n  }, {\n    key: \"getKeyRangeInternal\",\n    value: function getKeyRangeInternal(from, to) {\n      var keys = [];\n      var key = from;\n      while (key) {\n        var item = this.collection.getItem(key);\n        if (item && item.type === 'item' || item.type === 'cell' && this.allowsCellSelection) keys.push(key);\n        if (key === to) return keys;\n        key = this.collection.getKeyAfter(key);\n      }\n      return [];\n    }\n  }, {\n    key: \"getKey\",\n    value: function getKey(key) {\n      var item = this.collection.getItem(key);\n      if (!item)\n        return key;\n      if (item.type === 'cell' && this.allowsCellSelection) return key;\n      while (item.type !== 'item' && item.parentKey != null) {\n        item = this.collection.getItem(item.parentKey);\n      }\n      if (!item || item.type !== 'item') return null;\n      return item.key;\n    }\n  }, {\n    key: \"toggleSelection\",\n    value:\n    function toggleSelection(key) {\n      if (this.selectionMode === 'none') return;\n      if (this.selectionMode === 'single' && !this.isSelected(key)) {\n        this.replaceSelection(key);\n        return;\n      }\n      key = this.getKey(key);\n      if (key == null) return;\n      var keys = new $e40ea825a81a3709$export$52baac22726c72bf(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);\n      if (keys.has(key)) keys.delete(key);else if (this.canSelectItem(key)) {\n        keys.add(key);\n        keys.anchorKey = key;\n        keys.currentKey = key;\n      }\n      if (this.disallowEmptySelection && keys.size === 0) return;\n      this.state.setSelectedKeys(keys);\n    }\n  }, {\n    key: \"replaceSelection\",\n    value:\n    function replaceSelection(key) {\n      if (this.selectionMode === 'none') return;\n      key = this.getKey(key);\n      if (key == null) return;\n      var selection = this.canSelectItem(key) ? new $e40ea825a81a3709$export$52baac22726c72bf([key], key, key) : new $e40ea825a81a3709$export$52baac22726c72bf();\n      this.state.setSelectedKeys(selection);\n    }\n  }, {\n    key: \"setSelectedKeys\",\n    value:\n    function setSelectedKeys(keys) {\n      if (this.selectionMode === 'none') return;\n      var selection = new $e40ea825a81a3709$export$52baac22726c72bf();\n      for (var _iterator6 = _createForOfIteratorHelperLoose(keys), _step6; !(_step6 = _iterator6()).done;) {\n        var key = _step6.value;\n        key = this.getKey(key);\n        if (key != null) {\n          selection.add(key);\n          if (this.selectionMode === 'single') break;\n        }\n      }\n      this.state.setSelectedKeys(selection);\n    }\n  }, {\n    key: \"getSelectAllKeys\",\n    value: function getSelectAllKeys() {\n      var _this2 = this;\n      var keys = [];\n      var addKeys = function addKeys(key) {\n        while (key) {\n          if (_this2.canSelectItem(key)) {\n            var item = _this2.collection.getItem(key);\n            if (item.type === 'item') keys.push(key);\n            if (item.hasChildNodes && (_this2.allowsCellSelection || item.type !== 'item')) addKeys(_toConsumableArray(item.childNodes)[0].key);\n          }\n          key = _this2.collection.getKeyAfter(key);\n        }\n      };\n      addKeys(this.collection.getFirstKey());\n      return keys;\n    }\n  }, {\n    key: \"selectAll\",\n    value:\n    function selectAll() {\n      if (this.selectionMode === 'multiple') this.state.setSelectedKeys('all');\n    }\n  }, {\n    key: \"clearSelection\",\n    value:\n    function clearSelection() {\n      if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) this.state.setSelectedKeys(new $e40ea825a81a3709$export$52baac22726c72bf());\n    }\n  }, {\n    key: \"toggleSelectAll\",\n    value:\n    function toggleSelectAll() {\n      if (this.isSelectAll) this.clearSelection();else this.selectAll();\n    }\n  }, {\n    key: \"select\",\n    value: function select(key, e) {\n      if (this.selectionMode === 'none') return;\n      if (this.selectionMode === 'single') {\n        if (this.isSelected(key) && !this.disallowEmptySelection) this.toggleSelection(key);else this.replaceSelection(key);\n      } else if (this.selectionBehavior === 'toggle' || e && (e.pointerType === 'touch' || e.pointerType === 'virtual'))\n        this.toggleSelection(key);else this.replaceSelection(key);\n    }\n  }, {\n    key: \"isSelectionEqual\",\n    value:\n    function isSelectionEqual(selection) {\n      if (selection === this.state.selectedKeys) return true;\n      var selectedKeys = this.selectedKeys;\n      if (selection.size !== selectedKeys.size) return false;\n      for (var _iterator7 = _createForOfIteratorHelperLoose(selection), _step7; !(_step7 = _iterator7()).done;) {\n        var key = _step7.value;\n        if (!selectedKeys.has(key)) return false;\n      }\n      for (var _iterator8 = _createForOfIteratorHelperLoose(selectedKeys), _step8; !(_step8 = _iterator8()).done;) {\n        var key2 = _step8.value;\n        if (!selection.has(key2)) return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"canSelectItem\",\n    value: function canSelectItem(key) {\n      if (this.state.selectionMode === 'none' || this.state.disabledKeys.has(key)) return false;\n      var item = this.collection.getItem(key);\n      if (!item || item.type === 'cell' && !this.allowsCellSelection) return false;\n      return true;\n    }\n  }, {\n    key: \"isDisabled\",\n    value: function isDisabled(key) {\n      return this.state.disabledKeys.has(key) && this.state.disabledBehavior === 'all';\n    }\n  }]);\n  return $d496c0a20b6e58ec$export$6c8a5aaad13c9852;\n}();\nexport { $7af3f5b51489e0b5$export$253fe78d46329472 as useMultipleSelectionState, $d496c0a20b6e58ec$export$6c8a5aaad13c9852 as SelectionManager };","map":{"version":3,"sources":["packages/@react-stately/selection/src/useMultipleSelectionState.ts","packages/@react-stately/selection/src/Selection.ts","packages/@react-stately/selection/src/SelectionManager.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DisabledBehavior, MultipleSelection, SelectionBehavior, SelectionMode} from '@react-types/shared';\nimport {Key, useEffect, useMemo, useRef, useState} from 'react';\nimport {MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\nimport {useControlledState} from '@react-stately/utils';\n\nfunction equalSets(setA, setB) {\n  if (setA.size !== setB.size) {\n    return false;\n  }\n\n  for (let item of setA) {\n    if (!setB.has(item)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport interface MultipleSelectionStateProps extends MultipleSelection {\n  /** How multiple selection should behave in the collection. */\n  selectionBehavior?: SelectionBehavior,\n  /** Whether onSelectionChange should fire even if the new set of keys is the same as the last. */\n  allowDuplicateSelectionEvents?: boolean,\n  /** Whether `disabledKeys` applies to all interactions, or only selection. */\n  disabledBehavior?: DisabledBehavior\n}\n\n/**\n * Manages state for multiple selection and focus in a collection.\n */\nexport function useMultipleSelectionState(props: MultipleSelectionStateProps): MultipleSelectionState {\n  let {\n    selectionMode = 'none' as SelectionMode,\n    disallowEmptySelection,\n    allowDuplicateSelectionEvents,\n    selectionBehavior: selectionBehaviorProp = 'toggle',\n    disabledBehavior = 'all'\n  } = props;\n\n  // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n  // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).\n  let isFocusedRef = useRef(false);\n  let [, setFocused] = useState(false);\n  let focusedKeyRef = useRef(null);\n  let childFocusStrategyRef = useRef(null);\n  let [, setFocusedKey] = useState(null);\n  let selectedKeysProp = useMemo(() => convertSelection(props.selectedKeys), [props.selectedKeys]);\n  let defaultSelectedKeys = useMemo(() => convertSelection(props.defaultSelectedKeys, new Selection()), [props.defaultSelectedKeys]);\n  let [selectedKeys, setSelectedKeys] = useControlledState(\n    selectedKeysProp,\n    defaultSelectedKeys,\n    props.onSelectionChange\n  );\n  let disabledKeysProp = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n  let [selectionBehavior, setSelectionBehavior] = useState(selectionBehaviorProp);\n\n  // If the selectionBehavior prop is set to replace, but the current state is toggle (e.g. due to long press\n  // to enter selection mode on touch), and the selection becomes empty, reset the selection behavior.\n  if (selectionBehaviorProp === 'replace' && selectionBehavior === 'toggle' && typeof selectedKeys === 'object' && selectedKeys.size === 0) {\n    setSelectionBehavior('replace');\n  }\n\n  // If the selectionBehavior prop changes, update the state as well.\n  let lastSelectionBehavior = useRef(selectionBehaviorProp);\n  useEffect(() => {\n    if (selectionBehaviorProp !== lastSelectionBehavior.current) {\n      setSelectionBehavior(selectionBehaviorProp);\n      lastSelectionBehavior.current = selectionBehaviorProp;\n    }\n  }, [selectionBehaviorProp]);\n\n  return {\n    selectionMode,\n    disallowEmptySelection,\n    selectionBehavior,\n    setSelectionBehavior,\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n    setFocused(f) {\n      isFocusedRef.current = f;\n      setFocused(f);\n    },\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n    setFocusedKey(k, childFocusStrategy = 'first') {\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n      setFocusedKey(k);\n    },\n    selectedKeys,\n    setSelectedKeys(keys) {\n      if (allowDuplicateSelectionEvents || !equalSets(keys, selectedKeys)) {\n        setSelectedKeys(keys);\n      }\n    },\n    disabledKeys: disabledKeysProp,\n    disabledBehavior\n  };\n}\n\nfunction convertSelection(selection: 'all' | Iterable<Key>, defaultValue?: Selection): 'all' | Selection {\n  if (!selection) {\n    return defaultValue;\n  }\n\n  return selection === 'all'\n    ? 'all'\n    : new Selection(selection);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\n\n/**\n * A Selection is a special Set containing Keys, which also has an anchor\n * and current selected key for use when range selecting.\n */\nexport class Selection extends Set<Key> {\n  anchorKey: Key;\n  currentKey: Key;\n\n  constructor(keys?: Iterable<Key> | Selection, anchorKey?: Key, currentKey?: Key) {\n    super(keys);\n    if (keys instanceof Selection) {\n      this.anchorKey = anchorKey || keys.anchorKey;\n      this.currentKey = currentKey || keys.currentKey;\n    } else {\n      this.anchorKey = anchorKey;\n      this.currentKey = currentKey;\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Collection,\n  DisabledBehavior,\n  FocusStrategy,\n  Selection as ISelection,\n  LongPressEvent,\n  Node,\n  PressEvent,\n  SelectionBehavior,\n  SelectionMode\n} from '@react-types/shared';\nimport {Key} from 'react';\nimport {MultipleSelectionManager, MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\n\ninterface SelectionManagerOptions {\n  allowsCellSelection?: boolean\n}\n\n/**\n * An interface for reading and updating multiple selection state.\n */\nexport class SelectionManager implements MultipleSelectionManager {\n  private collection: Collection<Node<unknown>>;\n  private state: MultipleSelectionState;\n  private allowsCellSelection: boolean;\n  private _isSelectAll: boolean;\n\n  constructor(collection: Collection<Node<unknown>>, state: MultipleSelectionState, options?: SelectionManagerOptions) {\n    this.collection = collection;\n    this.state = state;\n    this.allowsCellSelection = options?.allowsCellSelection ?? false;\n    this._isSelectAll = null;\n  }\n\n  /**\n   * The type of selection that is allowed in the collection.\n   */\n  get selectionMode(): SelectionMode {\n    return this.state.selectionMode;\n  }\n\n  /**\n   * Whether the collection allows empty selection.\n   */\n  get disallowEmptySelection(): boolean {\n    return this.state.disallowEmptySelection;\n  }\n\n  /**\n   * The selection behavior for the collection.\n   */\n  get selectionBehavior(): SelectionBehavior {\n    return this.state.selectionBehavior;\n  }\n\n  /**\n   * Sets the selection behavior for the collection.\n   */\n  setSelectionBehavior(selectionBehavior: SelectionBehavior) {\n    this.state.setSelectionBehavior(selectionBehavior);\n  }\n\n  /**\n   * Whether the collection is currently focused.\n   */\n  get isFocused(): boolean {\n    return this.state.isFocused;\n  }\n\n  /**\n   * Sets whether the collection is focused.\n   */\n  setFocused(isFocused: boolean) {\n    this.state.setFocused(isFocused);\n  }\n\n  /**\n   * The current focused key in the collection.\n   */\n  get focusedKey(): Key {\n    return this.state.focusedKey;\n  }\n\n  /** Whether the first or last child of the focused key should receive focus. */\n  get childFocusStrategy(): FocusStrategy {\n    return this.state.childFocusStrategy;\n  }\n\n  /**\n   * Sets the focused key.\n   */\n  setFocusedKey(key: Key, childFocusStrategy?: FocusStrategy) {\n    if (key == null || this.collection.getItem(key)) {\n      this.state.setFocusedKey(key, childFocusStrategy);\n    }\n  }\n\n  /**\n   * The currently selected keys in the collection.\n   */\n  get selectedKeys(): Set<Key> {\n    return this.state.selectedKeys === 'all'\n      ? new Set(this.getSelectAllKeys())\n      : this.state.selectedKeys;\n  }\n\n  /**\n   * The raw selection value for the collection.\n   * Either 'all' for select all, or a set of keys.\n   */\n  get rawSelection(): ISelection {\n    return this.state.selectedKeys;\n  }\n\n  /**\n   * Returns whether a key is selected.\n   */\n  isSelected(key: Key) {\n    if (this.state.selectionMode === 'none') {\n      return false;\n    }\n\n    key = this.getKey(key);\n    return this.state.selectedKeys === 'all'\n      ? this.canSelectItem(key)\n      : this.state.selectedKeys.has(key);\n  }\n\n  /**\n   * Whether the selection is empty.\n   */\n  get isEmpty(): boolean {\n    return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n  }\n\n  /**\n   * Whether all items in the collection are selected.\n   */\n  get isSelectAll(): boolean {\n    if (this.isEmpty) {\n      return false;\n    }\n\n    if (this.state.selectedKeys === 'all') {\n      return true;\n    }\n\n    if (this._isSelectAll != null) {\n      return this._isSelectAll;\n    }\n\n    let allKeys = this.getSelectAllKeys();\n    let selectedKeys = this.state.selectedKeys;\n    this._isSelectAll = allKeys.every(k => selectedKeys.has(k));\n    return this._isSelectAll;\n  }\n\n  get firstSelectedKey(): Key | null {\n    let first: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!first || item?.index < first.index) {\n        first = item;\n      }\n    }\n\n    return first?.key;\n  }\n\n  get lastSelectedKey(): Key | null {\n    let last: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!last || item?.index > last.index) {\n        last = item;\n      }\n    }\n\n    return last?.key;\n  }\n\n  get disabledKeys(): Set<Key> {\n    return this.state.disabledKeys;\n  }\n\n  get disabledBehavior(): DisabledBehavior {\n    return this.state.disabledBehavior;\n  }\n\n  /**\n   * Extends the selection to the given key.\n   */\n  extendSelection(toKey: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      this.replaceSelection(toKey);\n      return;\n    }\n\n    toKey = this.getKey(toKey);\n\n    let selection: Selection;\n\n    // Only select the one key if coming from a select all.\n    if (this.state.selectedKeys === 'all') {\n      selection = new Selection([toKey], toKey, toKey);\n    } else {\n      let selectedKeys = this.state.selectedKeys as Selection;\n      let anchorKey = selectedKeys.anchorKey || toKey;\n      selection = new Selection(selectedKeys, anchorKey, toKey);\n      for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)) {\n        selection.delete(key);\n      }\n\n      for (let key of this.getKeyRange(toKey, anchorKey)) {\n        if (this.canSelectItem(key)) {\n          selection.add(key);\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getKeyRange(from: Key, to: Key) {\n    let fromItem = this.collection.getItem(from);\n    let toItem = this.collection.getItem(to);\n    if (fromItem && toItem) {\n      if (fromItem.index <= toItem.index) {\n        return this.getKeyRangeInternal(from, to);\n      }\n\n      return this.getKeyRangeInternal(to, from);\n    }\n\n    return [];\n  }\n\n  private getKeyRangeInternal(from: Key, to: Key) {\n    let keys: Key[] = [];\n    let key = from;\n    while (key) {\n      let item = this.collection.getItem(key);\n      if (item && item.type === 'item' || (item.type === 'cell' && this.allowsCellSelection)) {\n        keys.push(key);\n      }\n\n      if (key === to) {\n        return keys;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n\n    return [];\n  }\n\n  private getKey(key: Key) {\n    let item = this.collection.getItem(key);\n    if (!item) {\n      // ¯\\_(ツ)_/¯\n      return key;\n    }\n\n    // If cell selection is allowed, just return the key.\n    if (item.type === 'cell' && this.allowsCellSelection) {\n      return key;\n    }\n\n    // Find a parent item to select\n    while (item.type !== 'item' && item.parentKey != null) {\n      item = this.collection.getItem(item.parentKey);\n    }\n\n    if (!item || item.type !== 'item') {\n      return null;\n    }\n\n    return item.key;\n  }\n\n  /**\n   * Toggles whether the given key is selected.\n   */\n  toggleSelection(key: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single' && !this.isSelected(key)) {\n      this.replaceSelection(key);\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    let keys = new Selection(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);\n    if (keys.has(key)) {\n      keys.delete(key);\n      // TODO: move anchor to last selected key...\n      // Does `current` need to move here too?\n    } else if (this.canSelectItem(key)) {\n      keys.add(key);\n      keys.anchorKey = key;\n      keys.currentKey = key;\n    }\n\n    if (this.disallowEmptySelection && keys.size === 0) {\n      return;\n    }\n\n    this.state.setSelectedKeys(keys);\n  }\n\n  /**\n   * Replaces the selection with only the given key.\n   */\n  replaceSelection(key: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    let selection = this.canSelectItem(key)\n      ? new Selection([key], key, key)\n      : new Selection();\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  /**\n   * Replaces the selection with the given keys.\n   */\n  setSelectedKeys(keys: Iterable<Key>) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    let selection = new Selection();\n    for (let key of keys) {\n      key = this.getKey(key);\n      if (key != null) {\n        selection.add(key);\n        if (this.selectionMode === 'single') {\n          break;\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getSelectAllKeys() {\n    let keys: Key[] = [];\n    let addKeys = (key: Key) => {\n      while (key) {\n        if (this.canSelectItem(key)) {\n          let item = this.collection.getItem(key);\n          if (item.type === 'item') {\n            keys.push(key);\n          }\n\n          // Add child keys. If cell selection is allowed, then include item children too.\n          if (item.hasChildNodes && (this.allowsCellSelection || item.type !== 'item')) {\n            addKeys([...item.childNodes][0].key);\n          }\n        }\n\n        key = this.collection.getKeyAfter(key);\n      }\n    };\n\n    addKeys(this.collection.getFirstKey());\n    return keys;\n  }\n\n  /**\n   * Selects all items in the collection.\n   */\n  selectAll() {\n    if (this.selectionMode === 'multiple') {\n      this.state.setSelectedKeys('all');\n    }\n  }\n\n  /**\n   * Removes all keys from the selection.\n   */\n  clearSelection() {\n    if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) {\n      this.state.setSelectedKeys(new Selection());\n    }\n  }\n\n  /**\n   * Toggles between select all and an empty selection.\n   */\n  toggleSelectAll() {\n    if (this.isSelectAll) {\n      this.clearSelection();\n    } else {\n      this.selectAll();\n    }\n  }\n\n  select(key: Key, e?: PressEvent | LongPressEvent | PointerEvent) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      if (this.isSelected(key) && !this.disallowEmptySelection) {\n        this.toggleSelection(key);\n      } else {\n        this.replaceSelection(key);\n      }\n    } else if (this.selectionBehavior === 'toggle' || (e && (e.pointerType === 'touch' || e.pointerType === 'virtual'))) {\n      // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n      this.toggleSelection(key);\n    } else {\n      this.replaceSelection(key);\n    }\n  }\n\n  /**\n   * Returns whether the current selection is equal to the given selection.\n   */\n  isSelectionEqual(selection: Set<Key>) {\n    if (selection === this.state.selectedKeys) {\n      return true;\n    }\n\n    // Check if the set of keys match.\n    let selectedKeys = this.selectedKeys;\n    if (selection.size !== selectedKeys.size) {\n      return false;\n    }\n\n    for (let key of selection) {\n      if (!selectedKeys.has(key)) {\n        return false;\n      }\n    }\n\n    for (let key of selectedKeys) {\n      if (!selection.has(key)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  canSelectItem(key: Key) {\n    if (this.state.selectionMode === 'none' || this.state.disabledKeys.has(key)) {\n      return false;\n    }\n\n    let item = this.collection.getItem(key);\n    if (!item || (item.type === 'cell' && !this.allowsCellSelection)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  isDisabled(key: Key) {\n    return this.state.disabledKeys.has(key) && this.state.disabledBehavior === 'all';\n  }\n}\n"]},"metadata":{},"sourceType":"module"}