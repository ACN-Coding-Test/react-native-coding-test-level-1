{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"defaultStatus\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { nanoid } from 'nanoid/non-secure';\nimport TabRouter, { TabActions } from \"./TabRouter\";\nexport var DrawerActions = _objectSpread(_objectSpread({}, TabActions), {}, {\n  openDrawer: function openDrawer() {\n    return {\n      type: 'OPEN_DRAWER'\n    };\n  },\n  closeDrawer: function closeDrawer() {\n    return {\n      type: 'CLOSE_DRAWER'\n    };\n  },\n  toggleDrawer: function toggleDrawer() {\n    return {\n      type: 'TOGGLE_DRAWER'\n    };\n  }\n});\nexport default function DrawerRouter(_ref) {\n  var _ref$defaultStatus = _ref.defaultStatus,\n    defaultStatus = _ref$defaultStatus === void 0 ? 'closed' : _ref$defaultStatus,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var router = TabRouter(rest);\n  var isDrawerInHistory = function isDrawerInHistory(state) {\n    var _state$history;\n    return Boolean((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.some(function (it) {\n      return it.type === 'drawer';\n    }));\n  };\n  var addDrawerToHistory = function addDrawerToHistory(state) {\n    if (isDrawerInHistory(state)) {\n      return state;\n    }\n    return _objectSpread(_objectSpread({}, state), {}, {\n      history: [].concat(_toConsumableArray(state.history), [{\n        type: 'drawer',\n        status: defaultStatus === 'open' ? 'closed' : 'open'\n      }])\n    });\n  };\n  var removeDrawerFromHistory = function removeDrawerFromHistory(state) {\n    if (!isDrawerInHistory(state)) {\n      return state;\n    }\n    return _objectSpread(_objectSpread({}, state), {}, {\n      history: state.history.filter(function (it) {\n        return it.type !== 'drawer';\n      })\n    });\n  };\n  var openDrawer = function openDrawer(state) {\n    if (defaultStatus === 'open') {\n      return removeDrawerFromHistory(state);\n    }\n    return addDrawerToHistory(state);\n  };\n  var closeDrawer = function closeDrawer(state) {\n    if (defaultStatus === 'open') {\n      return addDrawerToHistory(state);\n    }\n    return removeDrawerFromHistory(state);\n  };\n  return _objectSpread(_objectSpread({}, router), {}, {\n    type: 'drawer',\n    getInitialState: function getInitialState(_ref2) {\n      var routeNames = _ref2.routeNames,\n        routeParamList = _ref2.routeParamList,\n        routeGetIdList = _ref2.routeGetIdList;\n      var state = router.getInitialState({\n        routeNames: routeNames,\n        routeParamList: routeParamList,\n        routeGetIdList: routeGetIdList\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        default: defaultStatus,\n        stale: false,\n        type: 'drawer',\n        key: \"drawer-\" + nanoid()\n      });\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref3) {\n      var routeNames = _ref3.routeNames,\n        routeParamList = _ref3.routeParamList,\n        routeGetIdList = _ref3.routeGetIdList;\n      if (partialState.stale === false) {\n        return partialState;\n      }\n      var state = router.getRehydratedState(partialState, {\n        routeNames: routeNames,\n        routeParamList: routeParamList,\n        routeGetIdList: routeGetIdList\n      });\n      if (isDrawerInHistory(partialState)) {\n        state = removeDrawerFromHistory(state);\n        state = addDrawerToHistory(state);\n      }\n      return _objectSpread(_objectSpread({}, state), {}, {\n        default: defaultStatus,\n        type: 'drawer',\n        key: \"drawer-\" + nanoid()\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var result = router.getStateForRouteFocus(state, key);\n      return closeDrawer(result);\n    },\n    getStateForAction: function getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n        case 'TOGGLE_DRAWER':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n          return addDrawerToHistory(state);\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            var result = router.getStateForAction(state, action, options);\n            if (result != null && result.index !== state.index) {\n              return closeDrawer(result);\n            }\n            return result;\n          }\n        case 'GO_BACK':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n          return router.getStateForAction(state, action, options);\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n    actionCreators: DrawerActions\n  });\n}","map":{"version":3,"sources":["DrawerRouter.tsx"],"names":["nanoid","TabRouter","TabActions","DrawerActions","openDrawer","type","closeDrawer","toggleDrawer","DrawerRouter","defaultStatus","rest","router","isDrawerInHistory","state","Boolean","history","some","it","addDrawerToHistory","status","removeDrawerFromHistory","filter","getInitialState","routeNames","routeParamList","routeGetIdList","default","stale","key","getRehydratedState","partialState","getStateForRouteFocus","result","getStateForAction","action","options","index","actionCreators"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport TabRouter, {\n  TabActionHelpers,\n  TabActions,\n  TabActionType,\n  TabNavigationState,\n  TabRouterOptions,\n} from './TabRouter';\nimport type {\n  CommonNavigationAction,\n  ParamListBase,\n  PartialState,\n  Router,\n} from './types';\nexport type DrawerStatus = 'open' | 'closed';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions & {\n  defaultStatus?: DrawerStatus;\n};\n\nexport type DrawerNavigationState<ParamList extends ParamListBase> = Omit<\n  TabNavigationState<ParamList>,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * Default status of the drawer.\n   */\n  default: DrawerStatus;\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: (\n    | { type: 'route'; key: string }\n    | { type: 'drawer'; status: DrawerStatus }\n  )[];\n};\n\nexport type DrawerActionHelpers<ParamList extends ParamListBase> =\n  TabActionHelpers<ParamList> & {\n    /**\n     * Open the drawer sidebar.\n     */\n    openDrawer(): void;\n\n    /**\n     * Close the drawer sidebar.\n     */\n    closeDrawer(): void;\n\n    /**\n     * Open the drawer sidebar if closed, or close if opened.\n     */\n    toggleDrawer(): void;\n  };\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nexport default function DrawerRouter({\n  defaultStatus = 'closed',\n  ...rest\n}: DrawerRouterOptions): Router<\n  DrawerNavigationState<ParamListBase>,\n  DrawerActionType | CommonNavigationAction\n> {\n  const router = TabRouter(rest) as unknown as Router<\n    DrawerNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  >;\n\n  const isDrawerInHistory = (\n    state:\n      | DrawerNavigationState<ParamListBase>\n      | PartialState<DrawerNavigationState<ParamListBase>>\n  ) => Boolean(state.history?.some((it) => it.type === 'drawer'));\n\n  const addDrawerToHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: [\n        ...state.history,\n        {\n          type: 'drawer',\n          status: defaultStatus === 'open' ? 'closed' : 'open',\n        },\n      ],\n    };\n  };\n\n  const removeDrawerFromHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (!isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: state.history.filter((it) => it.type !== 'drawer'),\n    };\n  };\n\n  const openDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return removeDrawerFromHistory(state);\n    }\n\n    return addDrawerToHistory(state);\n  };\n\n  const closeDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return addDrawerToHistory(state);\n    }\n\n    return removeDrawerFromHistory(state);\n  };\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList, routeGetIdList }) {\n      const state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      return {\n        ...state,\n        default: defaultStatus,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getRehydratedState(\n      partialState,\n      { routeNames, routeParamList, routeGetIdList }\n    ) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (isDrawerInHistory(partialState)) {\n        // Re-sync the drawer entry in history to correct it if it was wrong\n        state = removeDrawerFromHistory(state);\n        state = addDrawerToHistory(state);\n      }\n\n      return {\n        ...state,\n        default: defaultStatus,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return addDrawerToHistory(state);\n\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          const result = router.getStateForAction(state, action, options);\n\n          if (result != null && result.index !== state.index) {\n            return closeDrawer(result as DrawerNavigationState<ParamListBase>);\n          }\n\n          return result;\n        }\n\n        case 'GO_BACK':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}