{"ast":null,"code":"import { getActionFromState, getStateFromPath, NavigationContainerRefContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport LinkingContext from \"./LinkingContext\";\nexport default function useLinkTo() {\n  var navigation = React.useContext(NavigationContainerRefContext);\n  var linking = React.useContext(LinkingContext);\n  var linkTo = React.useCallback(function (to) {\n    if (navigation === undefined) {\n      throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n    }\n    if (typeof to !== 'string') {\n      navigation.navigate(to.screen, to.params);\n      return;\n    }\n    if (!to.startsWith('/')) {\n      throw new Error(\"The path must start with '/' (\" + to + \").\");\n    }\n    var options = linking.options;\n    var state = options !== null && options !== void 0 && options.getStateFromPath ? options.getStateFromPath(to, options.config) : getStateFromPath(to, options === null || options === void 0 ? void 0 : options.config);\n    if (state) {\n      var action = getActionFromState(state, options === null || options === void 0 ? void 0 : options.config);\n      if (action !== undefined) {\n        navigation.dispatch(action);\n      } else {\n        navigation.reset(state);\n      }\n    } else {\n      throw new Error('Failed to parse the path to a navigation state.');\n    }\n  }, [linking, navigation]);\n  return linkTo;\n}","map":{"version":3,"sources":["useLinkTo.tsx"],"names":["getActionFromState","getStateFromPath","NavigationContainerRefContext","React","LinkingContext","useLinkTo","navigation","useContext","linking","linkTo","useCallback","to","undefined","Error","navigate","screen","params","startsWith","options","state","config","action","dispatch","reset"],"mappings":"AAAA,SACEA,kBADF,EAEEC,gBAFF,EAGEC,6BAHF,QAIO,wBAJP;AAKA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,cAAP;AAiBA,eAAe,SAASC,SAAT,GAEX;EACF,IAAMC,UAAU,GAAGH,KAAK,CAACI,UAANJ,CAAiBD,6BAAjBC,CAAnB;EACA,IAAMK,OAAO,GAAGL,KAAK,CAACI,UAANJ,CAAiBC,cAAjBD,CAAhB;EAEA,IAAMM,MAAM,GAAG,KAAK,CAACC,WAAN,CACZC,UAAAA,EAAD,EAAuB;IACrB,IAAIL,UAAU,KAAKM,SAAnB,EAA8B;MAC5B,MAAM,IAAIC,KAAJ,CACJ,kFADI,CAAN;IAGD;IAED,IAAI,OAAOF,EAAP,KAAc,QAAlB,EAA4B;MAE1BL,UAAU,CAACQ,QAAXR,CAAoBK,EAAE,CAACI,MAAvBT,EAA+BK,EAAE,CAACK,MAAlCV,CAAAA;MACA;IACD;IAED,IAAI,CAACK,EAAE,CAACM,UAAHN,CAAc,GAAdA,CAAL,EAAyB;MACvB,MAAM,IAAIE,KAAJ,oCAA2CF,EAA3C,QAAN;IACD;IAED,IAAQO,OAAAA,GAAYV,OAApB,CAAQU,OAAAA;IAER,IAAMC,KAAK,GAAGD,OAAO,KAAA,IAAPA,IAAAA,OAAO,KAAA,KAAA,CAAPA,IAAAA,OAAO,CAAEjB,gBAATiB,GACVA,OAAO,CAACjB,gBAARiB,CAAyBP,EAAzBO,EAA6BA,OAAO,CAACE,MAArCF,CADUA,GAEVjB,gBAAgB,CAACU,EAAD,EAAKO,OAAL,KAAA,IAAA,IAAKA,OAAL,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAKA,OAAO,CAAEE,MAAd,CAFpB;IAIA,IAAID,KAAJ,EAAW;MACT,IAAME,MAAM,GAAGrB,kBAAkB,CAACmB,KAAD,EAAQD,OAAR,KAAA,IAAA,IAAQA,OAAR,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAQA,OAAO,CAAEE,MAAjB,CAAjC;MAEA,IAAIC,MAAM,KAAKT,SAAf,EAA0B;QACxBN,UAAU,CAACgB,QAAXhB,CAAoBe,MAApBf,CAAAA;MACD,CAFD,MAEO;QACLA,UAAU,CAACiB,KAAXjB,CAAiBa,KAAjBb,CAAAA;MACD;IACF,CARD,MAQO;MACL,MAAM,IAAIO,KAAJ,CAAU,iDAAV,CAAN;IACD;EACF,CAnCY,EAoCb,CAACL,OAAD,EAAUF,UAAV,CApCa,CAAf;EAuCA,OAAOG,MAAP;AACD","sourcesContent":["import {\n  getActionFromState,\n  getStateFromPath,\n  NavigationContainerRefContext,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport LinkingContext from './LinkingContext';\n\nexport type To<\n  ParamList extends ReactNavigation.RootParamList = ReactNavigation.RootParamList,\n  RouteName extends keyof ParamList = keyof ParamList\n> =\n  | string\n  | (undefined extends ParamList[RouteName]\n      ? {\n          screen: Extract<RouteName, string>;\n          params?: ParamList[RouteName];\n        }\n      : {\n          screen: Extract<RouteName, string>;\n          params: ParamList[RouteName];\n        });\n\nexport default function useLinkTo<\n  ParamList extends ReactNavigation.RootParamList\n>() {\n  const navigation = React.useContext(NavigationContainerRefContext);\n  const linking = React.useContext(LinkingContext);\n\n  const linkTo = React.useCallback(\n    (to: To<ParamList>) => {\n      if (navigation === undefined) {\n        throw new Error(\n          \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n        );\n      }\n\n      if (typeof to !== 'string') {\n        // @ts-expect-error: This is fine\n        navigation.navigate(to.screen, to.params);\n        return;\n      }\n\n      if (!to.startsWith('/')) {\n        throw new Error(`The path must start with '/' (${to}).`);\n      }\n\n      const { options } = linking;\n\n      const state = options?.getStateFromPath\n        ? options.getStateFromPath(to, options.config)\n        : getStateFromPath(to, options?.config);\n\n      if (state) {\n        const action = getActionFromState(state, options?.config);\n\n        if (action !== undefined) {\n          navigation.dispatch(action);\n        } else {\n          navigation.reset(state);\n        }\n      } else {\n        throw new Error('Failed to parse the path to a navigation state.');\n      }\n    },\n    [linking, navigation]\n  );\n\n  return linkTo;\n}\n"]},"metadata":{},"sourceType":"module"}