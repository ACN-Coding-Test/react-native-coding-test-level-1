{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"theme\"];\nimport get from 'lodash.get';\nimport omit from 'lodash.omit';\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useNativeBase } from \"./../useNativeBase\";\nimport { omitUndefined, extractInObject } from \"./../../theme/tools/\";\nimport { filterShadowProps } from \"./../../utils/filterShadowProps\";\nimport { calculateProps } from \"./utils\";\nvar filterAndCalculateProps = function filterAndCalculateProps(theme, colorModeProps, componentTheme, propsReceived, windowWidth) {\n  var _extractInObject = extractInObject(propsReceived, ['children', 'style', 'onPress', 'icon', 'onOpen', 'onClose']),\n    _extractInObject2 = _slicedToArray(_extractInObject, 2),\n    ignoredProps = _extractInObject2[0],\n    props = _extractInObject2[1];\n  var newProps = calculateProps(theme, colorModeProps, componentTheme, props, windowWidth);\n  var mergedProps = filterShadowProps(newProps, ignoredProps, Platform.OS);\n  return omitUndefined(mergedProps);\n};\nexport function useThemeProps(component, propsReceived) {\n  var _useWindowDimensions;\n  var _useNativeBase = useNativeBase(),\n    theme = _useNativeBase.theme,\n    colorModeProps = _objectWithoutProperties(_useNativeBase, _excluded);\n\n  var componentTheme = get(theme, \"components.\".concat(component));\n\n  var windowWidth = (_useWindowDimensions = useWindowDimensions()) === null || _useWindowDimensions === void 0 ? void 0 : _useWindowDimensions.width;\n\n  return filterAndCalculateProps(omit(theme, ['components']), colorModeProps, componentTheme, propsReceived, windowWidth);\n}","map":{"version":3,"sources":["useProps.tsx"],"names":["get","omit","useNativeBase","omitUndefined","extractInObject","filterShadowProps","calculateProps","filterAndCalculateProps","theme","colorModeProps","componentTheme","propsReceived","windowWidth","ignoredProps","props","newProps","mergedProps","Platform","OS","useThemeProps","component","useWindowDimensions","width"],"mappings":";;;AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAAA;AAAA;AAEA,SAASC,aAAT;AACA,SAASC,aAAT,EAAwBC,eAAxB;AACA,SAASC,iBAAT;AACA,SAASC,cAAT;AAEA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAAuB,CAC3BC,KAD8B,EAE9BC,cAF8B,EAG9BC,cAH8B,EAI9BC,aAJ8B,EAK9BC,WAL8B,EAM3B;EAIH,uBAA4BR,eAAe,CAACO,aAAD,EAAgB,CACzD,UADyD,EAEzD,OAFyD,EAGzD,SAHyD,EAIzD,MAJyD,EAKzD,QALyD,EAMzD,SANyD,CAAhB,CAA3C;IAAA;IAAKE,YAAD;IAAeC,KAAf;EAQJ,IAAIC,QAAQ,GAAGT,cAAc,CAC3BE,KAD2B,EAE3BC,cAF2B,EAG3BC,cAH2B,EAI3BI,KAJ2B,EAK3BF,WAL2B,CAA7B;EAOA,IAAII,WAAW,GAAGX,iBAAiB,CAACU,QAAD,EAAWF,YAAX,EAAyBI,QAAQ,CAACC,EAAlC,CAAnC;EACA,OAAOf,aAAa,CAACa,WAAD,CAApB;AACD,CA3BD;AA6BA,OAAO,SAASG,aAAT,CAAuBC,SAAvB,EAA0CT,aAA1C,EAA8D;EAAA,IAAA,oBAAA;EACnE,qBAAqCT,aAAa,EADiB;IAC3DM,KAAF,kBAAEA,KAAF;IAAYC,cAAAA;;EAGlB,IAAMC,cAAc,GAAGV,GAAG,CAACQ,KAAD,EAAA,aAAA,CAAA,MAAA,CAAsBY,SAAtB,CAAA,CAJyC;;EAMnE,IAAMR,WAAW,GAAA,CAAA,oBAAA,GAAGS,mBAAmB,EAAtB,MAAA,IAAA,IAAA,oBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGA,oBAAAA,CAAuBC,KANwB;;EASnE,OAAOf,uBAAuB,CAC5BN,IAAI,CAACO,KAAD,EAAQ,CAAC,YAAD,CAAR,CADwB,EAE5BC,cAF4B,EAG5BC,cAH4B,EAI5BC,aAJ4B,EAK5BC,WAL4B,CAA9B;AAOD","sourcesContent":["import get from 'lodash.get';\nimport omit from 'lodash.omit';\nimport { useWindowDimensions, Platform } from 'react-native';\nimport { useNativeBase } from './../useNativeBase';\nimport { omitUndefined, extractInObject } from './../../theme/tools/';\nimport { filterShadowProps } from './../../utils/filterShadowProps';\nimport { calculateProps } from './utils';\n\nconst filterAndCalculateProps = (\n  theme: any,\n  colorModeProps: any,\n  componentTheme: any,\n  propsReceived: any,\n  windowWidth: any\n) => {\n  // Extracting out children and style, as they do not contribute in props calculation\n  // This is done as these props are passed as it is later in the development\n  // Required as some of these will trigger cyclic computation which may lead to error\n  let [ignoredProps, props] = extractInObject(propsReceived, [\n    'children',\n    'style',\n    'onPress',\n    'icon',\n    'onOpen',\n    'onClose',\n  ]);\n  let newProps = calculateProps(\n    theme,\n    colorModeProps,\n    componentTheme,\n    props,\n    windowWidth\n  );\n  let mergedProps = filterShadowProps(newProps, ignoredProps, Platform.OS);\n  return omitUndefined(mergedProps);\n};\n\nexport function useThemeProps(component: string, propsReceived: any) {\n  const { theme, ...colorModeProps } = useNativeBase();\n  // console.log('THEME = ', theme);\n\n  const componentTheme = get(theme, `components.${component}`);\n  // console.log('COMPONENT THEME = ', componentTheme);\n  const windowWidth = useWindowDimensions()?.width;\n\n  // To pass the component theme props and component props seperately\n  return filterAndCalculateProps(\n    omit(theme, ['components']),\n    colorModeProps,\n    componentTheme,\n    propsReceived,\n    windowWidth\n  );\n}\n"]},"metadata":{},"sourceType":"module"}