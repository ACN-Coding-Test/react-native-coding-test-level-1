{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport AccessibilityInfo from \"react-native-web/dist/exports/AccessibilityInfo\";\nexport function useScreenReaderEnabled() {\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    enabled = _React$useState2[0],\n    setEnabled = _React$useState2[1];\n  var mountedRef = React.useRef(false);\n  var handleSetEnabled = function handleSetEnabled(value) {\n    if (mountedRef.current) {\n      setEnabled(value);\n    }\n  };\n  React.useEffect(function () {\n    mountedRef.current = true;\n    function setInitialValue() {\n      var res;\n      return _regeneratorRuntime.async(function setInitialValue$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AccessibilityInfo.isScreenReaderEnabled());\n            case 2:\n              res = _context.sent;\n              handleSetEnabled(res);\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n    var handler = AccessibilityInfo.addEventListener('screenReaderChanged', function (event) {\n      handleSetEnabled(event);\n    });\n    setInitialValue();\n    return function () {\n      mountedRef.current = false;\n      AccessibilityInfo.removeEventListener('screenReaderChanged', handler);\n    };\n  });\n  return enabled;\n}","map":{"version":3,"sources":["useScreenReaderEnabled.ts"],"names":["React","useScreenReaderEnabled","enabled","setEnabled","useState","mountedRef","useRef","handleSetEnabled","value","current","useEffect","setInitialValue","res","AccessibilityInfo","isScreenReaderEnabled","handler","addEventListener","event","removeEventListener"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAAA;AAGA,OAAO,SAASC,sBAAT,GAAkC;EACvC,sBAA8BD,KAAK,CAACI,QAANJ,CAAe,KAAfA,CAA9B;IAAA;IAAOE,OAAD;IAAUC,UAAV;EACN,IAAME,UAAU,GAAGL,KAAK,CAACM,MAANN,CAAa,KAAbA,CAAnB;EAEA,IAAMO,gBAAgB,GAAIC,SAApBD,gBAAgB,CAAIC,KAAD,EAAoB;IAC3C,IAAIH,UAAU,CAACI,OAAf,EAAwB;MACtBN,UAAU,CAACK,KAAD,CAAVL;IACD;EACF,CAJD;EAMAH,KAAK,CAACU,SAANV,CAAgB,YAAM;IACpBK,UAAU,CAACI,OAAXJ,GAAqB,IAArBA;IACA,SAAeM,eAAf;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,iCACoBE,iBAAiB,CAACC,qBAAlBD,EAAlB;YAAA;cAAMD,GAAG;cACTL,gBAAgB,CAACK,GAAD,CAAhBL;YAAAA;YAAAA;cAAAA;UAAAA;QAAAA;MAAAA;IAAAA;IAGF,IAAIQ,OAAY,GAAG,iBAAiB,CAACC,gBAAlB,CACjB,qBADiB,EAEhBC,UAAAA,KAAD,EAAgB;MACdV,gBAAgB,CAACU,KAAD,CAAhBV;IACD,CAJgB,CAAnB;IAOAI,eAAe,EAAA;IACf,OAAO,YAAM;MACXN,UAAU,CAACI,OAAXJ,GAAqB,KAArBA;MACAQ,iBAAiB,CAACK,mBAAlBL,CAAsC,qBAAtCA,EAA6DE,OAA7DF,CAAAA;IACD,CAHD;EAID,CAnBDb,CAAAA;EAqBA,OAAOE,OAAP;AACD","sourcesContent":["import React from 'react';\nimport { AccessibilityInfo } from 'react-native';\n\nexport function useScreenReaderEnabled() {\n  const [enabled, setEnabled] = React.useState(false);\n  const mountedRef = React.useRef(false);\n\n  const handleSetEnabled = (value: boolean) => {\n    if (mountedRef.current) {\n      setEnabled(value);\n    }\n  };\n\n  React.useEffect(() => {\n    mountedRef.current = true;\n    async function setInitialValue() {\n      const res = await AccessibilityInfo.isScreenReaderEnabled();\n      handleSetEnabled(res);\n    }\n\n    let handler: any = AccessibilityInfo.addEventListener(\n      'screenReaderChanged',\n      (event: any) => {\n        handleSetEnabled(event);\n      }\n    );\n\n    setInitialValue();\n    return () => {\n      mountedRef.current = false;\n      AccessibilityInfo.removeEventListener('screenReaderChanged', handler);\n    };\n  });\n\n  return enabled;\n}\n"]},"metadata":{},"sourceType":"module"}