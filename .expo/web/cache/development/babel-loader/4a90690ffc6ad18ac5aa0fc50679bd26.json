{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"value\"],\n  _excluded2 = [\"children\", \"onPress\", \"_icon\", \"_text\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, memo, useContext } from 'react';\nimport { CheckIcon } from \"../../primitives/Icon/Icons\";\nimport Text from \"../../primitives/Text\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport MenuItem from \"./MenuItem\";\nimport { MenuOptionContext } from \"./MenuOptionGroup\";\nimport { useMenuOptionItem } from \"./useMenu\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar MenuItemOption = function MenuItemOption(_ref, ref) {\n  var value = _ref.value,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _useContext = useContext(MenuOptionContext),\n    values = _useContext.values,\n    onChange = _useContext.onChange,\n    type = _useContext.type;\n  var isChecked = values.includes(value);\n  var menuOptionProps = useMenuOptionItem({\n    isChecked: isChecked,\n    type: type\n  });\n  var _usePropsResolution = usePropsResolution('MenuItem', props, {\n      isChecked: isChecked\n    }),\n    children = _usePropsResolution.children,\n    onPress = _usePropsResolution.onPress,\n    _icon = _usePropsResolution._icon,\n    _text = _usePropsResolution._text,\n    resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n  var modifiedOnPress = function modifiedOnPress(e) {\n    onChange(value);\n    onPress && onPress(e);\n  };\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return React.createElement(MenuItem, _extends({}, resolvedProps, menuOptionProps, {\n    accessibilityRole: \"button\",\n    onPress: modifiedOnPress,\n    ref: ref\n  }), React.createElement(CheckIcon, _icon), React.Children.map(children, function (child, index) {\n    if (typeof child === 'string' || typeof child === 'number') {\n      return React.createElement(Text, _extends({\n        key: \"menu-item-option-\".concat(index)\n      }, _text), child);\n    } else {\n      return child;\n    }\n  }));\n};\nexport default memo(forwardRef(MenuItemOption));","map":{"version":3,"sources":["MenuItemOption.tsx"],"names":["React","forwardRef","memo","useContext","CheckIcon","Text","usePropsResolution","MenuItem","MenuOptionContext","useMenuOptionItem","useHasResponsiveProps","MenuItemOption","value","props","ref","values","onChange","type","isChecked","includes","menuOptionProps","children","onPress","_icon","_text","resolvedProps","modifiedOnPress","e","Children","map","child","index"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,IAA5B,EAAkCC,UAAlC,QAAoD,OAApD;AACA,SAASC,SAAT;AACA,OAAOC,IAAP;AACA,SAASC,kBAAT;AACA,OAAOC,QAAP;AAEA,SAASC,iBAAT;AACA,SAASC,iBAAT;AACA,SAASC,qBAAT;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAc,OAElBG,GAFqB,EAGlB;EAAA,IAFDF,KAAF,QAAEA,KAAF;IAAYC,KAAAA;EAGZ,kBAA4DV,UAAU,CACpEK,iBADoE,CAAtE;IAAQO,MAAF,eAAEA,MAAF;IAAUC,QAAV,eAAUA,QAAV;IAAoBC,IAAAA,eAAAA,IAAAA;EAG1B,IAAMC,SAAS,GAAGH,MAAM,CAACI,QAAPJ,CAAgBH,KAAhBG,CAAlB;EACA,IAAMK,eAAe,GAAGX,iBAAiB,CAAC;IAAES,SAAF,EAAEA,SAAF;IAAaD,IAAAA,EAAAA;EAAb,CAAD,CAAzC;EACA,0BAMIX,kBAAkB,CAAC,UAAD,EAAaO,KAAb,EAAoB;MAAEK,SAAAA,EAAAA;IAAF,CAApB,CANtB;IACEG,QADI,uBACJA,QADI;IAEJC,OAFI,uBAEJA,OAFI;IAGJC,KAHI,uBAGJA,KAHI;IAIJC,KAJI,uBAIJA,KAJI;IAKDC,aAAAA;EAGL,IAAMC,eAAe,GAAIC,SAAnBD,eAAe,CAAIC,CAAD,EAAY;IAClCX,QAAQ,CAACJ,KAAD,CAARI;IACAM,OAAO,IAAIA,OAAO,CAACK,CAAD,CAAlBL;EACD,CAjBE;;EAoBH,IAAIZ,qBAAqB,CAACG,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EACD,OACE,KAAA,CAAA,aAAA,CAAC,QAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EACMY,aADN,EAEML,eAFN,EAAA;IAGE,iBAAiB,EAAC,QAHpB;IAIE,OAAO,EAAEM,eAJX;IAKE,GAAG,EAAEZ;EALP,CAAA,CAAA,EAOE,KAAA,CAAA,aAAA,CAAC,SAAD,EAAeS,KAAf,CAPF,EAQG,KAAK,CAACK,QAAN,CAAeC,GAAf,CAAmBR,QAAnB,EAA6B,UAACS,KAAD,EAAQC,KAAR,EAAuB;IACnD,IAAI,OAAOD,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAAlD,EAA4D;MAC1D,OACE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAA,QAAA,CAAA;QAAM,GAAG,EAAA,mBAAA,CAAA,MAAA,CAAsBC,KAAtB;MAAT,CAAA,EAA4CP,KAA5C,CAAA,EACGM,KADH,CADF;IAKD,CAND,MAMO;MACL,OAAOA,KAAP;IACD;EACF,CAVA,CARH,CADF;AAsBD,CAhDD;AAkDA,eAAe5B,IAAI,CAACD,UAAU,CAACU,cAAD,CAAX,CAAnB","sourcesContent":["import React, { forwardRef, memo, useContext } from 'react';\nimport { CheckIcon } from '../../primitives/Icon/Icons';\nimport Text from '../../primitives/Text';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport MenuItem from './MenuItem';\nimport type { IMenuItemOptionProps, IMenuOptionContextProps } from './types';\nimport { MenuOptionContext } from './MenuOptionGroup';\nimport { useMenuOptionItem } from './useMenu';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst MenuItemOption = (\n  { value, ...props }: IMenuItemOptionProps,\n  ref: any\n) => {\n  const { values, onChange, type }: IMenuOptionContextProps = useContext(\n    MenuOptionContext\n  );\n  const isChecked = values.includes(value);\n  const menuOptionProps = useMenuOptionItem({ isChecked, type });\n  const {\n    children,\n    onPress,\n    _icon,\n    _text,\n    ...resolvedProps\n  } = usePropsResolution('MenuItem', props, { isChecked });\n\n  const modifiedOnPress = (e: any) => {\n    onChange(value);\n    onPress && onPress(e);\n  };\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <MenuItem\n      {...resolvedProps}\n      {...menuOptionProps}\n      accessibilityRole=\"button\"\n      onPress={modifiedOnPress}\n      ref={ref}\n    >\n      <CheckIcon {..._icon} />\n      {React.Children.map(children, (child, index: any) => {\n        if (typeof child === 'string' || typeof child === 'number') {\n          return (\n            <Text key={`menu-item-option-${index}`} {..._text}>\n              {child}\n            </Text>\n          );\n        } else {\n          return child;\n        }\n      })}\n    </MenuItem>\n  );\n};\n\nexport default memo(forwardRef(MenuItemOption));\n"]},"metadata":{},"sourceType":"module"}