{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"isDisabled\", \"onPress\", \"onPressStart\", \"onPressEnd\", \"onPressChange\"];\nimport { usePress } from '@react-native-aria/interactions';\nimport { mergeProps } from '@react-aria/utils';\nexport function useButton(props) {\n  var isDisabled = props.isDisabled,\n    onPress = props.onPress,\n    onPressStart = props.onPressStart,\n    onPressEnd = props.onPressEnd,\n    onPressChange = props.onPressChange,\n    rest = _objectWithoutProperties(props, _excluded);\n  var _usePress = usePress({\n      onPressStart: onPressStart,\n      onPressEnd: onPressEnd,\n      onPressChange: onPressChange,\n      onPress: onPress,\n      isDisabled: isDisabled\n    }),\n    pressProps = _usePress.pressProps,\n    isPressed = _usePress.isPressed;\n  var mergedProps = mergeProps(pressProps, rest, {\n    accessibilityState: {\n      disabled: isDisabled\n    },\n    accessibilityRole: 'button',\n    disabled: isDisabled\n  });\n  return {\n    isPressed: isPressed,\n    buttonProps: mergedProps\n  };\n}","map":{"version":3,"sources":["useButton.ts"],"names":["usePress","mergeProps","useButton","props","isDisabled","onPress","onPressStart","onPressEnd","onPressChange","rest","pressProps","isPressed","mergedProps","accessibilityState","disabled","accessibilityRole","buttonProps"],"mappings":";;AACA,SAAsBA,QAAtB,QAAsC,iCAAtC;AAEA,SAASC,UAAT,QAA2B,mBAA3B;AAkBA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAAyD;EAC9D,IACEC,UADE,GAOAD,KAPJ,CACEC,UADE;IAEFC,OAFE,GAOAF,KAPJ,CAEEE,OAFE;IAGFC,YAHE,GAOAH,KAPJ,CAGEG,YAHE;IAIFC,UAJE,GAOAJ,KAPJ,CAIEI,UAJE;IAKFC,aALE,GAOAL,KAPJ,CAKEK,aALE;IAMCC,IAAAA,4BACDN,KAPJ;EASA,gBAAgCH,QAAQ,CAAC;MACvCM,YADuC,EACvCA,YADuC;MAEvCC,UAFuC,EAEvCA,UAFuC;MAGvCC,aAHuC,EAGvCA,aAHuC;MAIvCH,OAJuC,EAIvCA,OAJuC;MAKvCD,UAAAA,EAAAA;IALuC,CAAD,CAAxC;IAAMM,UAAF,aAAEA,UAAF;IAAcC,SAAAA,aAAAA,SAAAA;EAQlB,IAAMC,WAAW,GAAGX,UAAU,CAACS,UAAD,EAAaD,IAAb,EAAmB;IAC/CI,kBAAkB,EAAE;MAClBC,QAAQ,EAAEV;IADQ,CAD2B;IAI/CW,iBAAiB,EAAE,QAJ4B;IAK/CD,QAAQ,EAAEV;EALqC,CAAnB,CAA9B;EAQA,OAAO;IACLO,SADK,EACLA,SADK;IAELK,WAAW,EAAEJ;EAFR,CAAP;AAID","sourcesContent":["import { ReactNode } from 'react';\nimport { PressEvents, usePress } from '@react-native-aria/interactions';\nimport { AccessibilityProps, PressableProps } from 'react-native';\nimport { mergeProps } from '@react-aria/utils';\n\ninterface ButtonProps extends PressEvents {\n  /** Whether the button is disabled. */\n  isDisabled?: boolean;\n  /** The content to display in the button. */\n  children?: ReactNode;\n}\n\nexport interface RNAriaButtonProps extends AccessibilityProps, ButtonProps {}\n\nexport interface ButtonAria {\n  /** Props for the button element. */\n  buttonProps: PressableProps;\n  /** Whether the button is currently pressed. */\n  isPressed: boolean;\n}\n\nexport function useButton(props: RNAriaButtonProps): ButtonAria {\n  let {\n    isDisabled,\n    onPress,\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    ...rest\n  } = props;\n\n  let { pressProps, isPressed } = usePress({\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    onPress,\n    isDisabled,\n  });\n\n  const mergedProps = mergeProps(pressProps, rest, {\n    accessibilityState: {\n      disabled: isDisabled,\n    },\n    accessibilityRole: 'button',\n    disabled: isDisabled,\n  });\n\n  return {\n    isPressed,\n    buttonProps: mergedProps,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}