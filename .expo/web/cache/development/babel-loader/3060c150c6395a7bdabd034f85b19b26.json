{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"isDisabled\", \"isInvalid\", \"isChecked\", \"defaultIsChecked\", \"accessibilityLabel\", \"accessibilityHint\", \"onToggle\", \"value\", \"onValueChange\", \"isHovered\"],\n  _excluded2 = [\"onTrackColor\", \"offTrackColor\", \"onThumbColor\", \"offThumbColor\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport { useToggleState } from '@react-stately/toggle';\nimport RNSwitch from \"react-native-web/dist/exports/Switch\";\nimport isNil from 'lodash.isnil';\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useToken } from \"../../../hooks\";\nimport { makeStyledComponent } from \"../../../utils/styled\";\nimport { mergeRefs } from \"../../../utils\";\nimport { useHover } from '@react-native-aria/interactions';\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { useFormControlContext } from \"../../composites/FormControl\";\nimport { combineContextAndProps } from \"../../../utils\";\nvar StyledNBSwitch = makeStyledComponent(RNSwitch);\n\nvar Switch = function Switch(_ref2, ref) {\n  var disabled = _ref2.disabled,\n    isDisabled = _ref2.isDisabled,\n    isInvalid = _ref2.isInvalid,\n    isChecked = _ref2.isChecked,\n    defaultIsChecked = _ref2.defaultIsChecked,\n    accessibilityLabel = _ref2.accessibilityLabel,\n    accessibilityHint = _ref2.accessibilityHint,\n    onToggle = _ref2.onToggle,\n    value = _ref2.value,\n    _onValueChange = _ref2.onValueChange,\n    isHoveredProp = _ref2.isHovered,\n    props = _objectWithoutProperties(_ref2, _excluded);\n  var formControlContext = useFormControlContext();\n  var combinedProps = combineContextAndProps(formControlContext, props);\n  var state = useToggleState({\n    defaultSelected: !isNil(defaultIsChecked) ? defaultIsChecked : false\n  });\n  var checked = !isNil(isChecked) ? isChecked : state.isSelected;\n  var _ref = React.useRef(null);\n  var _useHover = useHover({}, _ref),\n    isHovered = _useHover.isHovered;\n  var _usePropsResolution = usePropsResolution('Switch', props, {\n      isHovered: isHoveredProp || isHovered,\n      isDisabled: disabled || isDisabled || combinedProps.isDisabled,\n      isInvalid: isInvalid || combinedProps.isInvalid,\n      isChecked: checked\n    }),\n    _onTrackColor = _usePropsResolution.onTrackColor,\n    _offTrackColor = _usePropsResolution.offTrackColor,\n    _onThumbColor = _usePropsResolution.onThumbColor,\n    _offThumbColor = _usePropsResolution.offThumbColor,\n    resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n  var onTrackColor = useToken('colors', _onTrackColor);\n  var offTrackColor = useToken('colors', _offTrackColor);\n  var onThumbColor = useToken('colors', _onThumbColor);\n  var offThumbColor = useToken('colors', _offThumbColor);\n\n  if (useHasResponsiveProps(_objectSpread(_objectSpread({}, props), {}, {\n    isDisabled: isDisabled,\n    isInvalid: isInvalid,\n    isChecked: isChecked,\n    defaultIsChecked: defaultIsChecked,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityHint: accessibilityHint\n  }))) {\n    return null;\n  }\n  return React.createElement(StyledNBSwitch, _extends({\n    accessibilityLabel: accessibilityLabel,\n    accessibilityHint: accessibilityHint,\n    trackColor: {\n      false: offTrackColor,\n      true: onTrackColor\n    },\n    thumbColor: checked ? onThumbColor : offThumbColor,\n    activeThumbColor: onThumbColor,\n\n    ios_backgroundColor: offTrackColor\n  }, resolvedProps, {\n    disabled: disabled || isDisabled || combinedProps.isDisabled,\n    onValueChange: function onValueChange(val) {\n      _onValueChange && _onValueChange(val);\n      onToggle ? onToggle(val) : state.toggle();\n    },\n    value: value || checked,\n    ref: mergeRefs([ref, _ref])\n  }));\n};\nexport default memo(forwardRef(Switch));","map":{"version":3,"sources":["index.tsx"],"names":["React","memo","forwardRef","useToggleState","isNil","usePropsResolution","useToken","makeStyledComponent","mergeRefs","useHover","useHasResponsiveProps","useFormControlContext","combineContextAndProps","StyledNBSwitch","RNSwitch","Switch","disabled","isDisabled","isInvalid","isChecked","defaultIsChecked","accessibilityLabel","accessibilityHint","onToggle","value","onValueChange","isHovered","isHoveredProp","props","ref","formControlContext","combinedProps","state","defaultSelected","checked","isSelected","_ref","useRef","onTrackColor","_onTrackColor","offTrackColor","_offTrackColor","onThumbColor","_onThumbColor","offThumbColor","_offThumbColor","resolvedProps","false","true","val","toggle"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,cAAT,QAA+B,uBAA/B;AAAA;AAEA,OAAOC,KAAP,MAAkB,cAAlB;AACA,SAASC,kBAAT;AACA,SAASC,QAAT;AACA,SAASC,mBAAT;AAEA,SAASC,SAAT;AACA,SAASC,QAAT,QAAyB,iCAAzB;AACA,SAASC,qBAAT;AACA,SAASC,qBAAT;AACA,SAASC,sBAAT;AAEA,IAAMC,cAAc,GAAGN,mBAAmB,CAACO,QAAD,CAA1C;;AAGA,IAAMC,MAAM,GAAG,SAATA,MAAM,QAeVc,GAfa,EAgBV;EAAA,IAdDb,QADF,SACEA,QADF;IAEEC,UAFF,SAEEA,UAFF;IAGEC,SAHF,SAGEA,SAHF;IAIEC,SAJF,SAIEA,SAJF;IAKEC,gBALF,SAKEA,gBALF;IAMEC,kBANF,SAMEA,kBANF;IAOEC,iBAPF,SAOEA,iBAPF;IAQEC,QARF,SAQEA,QARF;IASEC,KATF,SASEA,KATF;IAUEC,cAVF,SAUEA,aAVF;IAWaE,aAXb,SAWED,SAAS;IACNE,KAAAA;EAIL,IAAME,kBAAkB,GAAGnB,qBAAqB,EAAhD;EAEA,IAAMoB,aAAa,GAAGnB,sBAAsB,CAACkB,kBAAD,EAAqBF,KAArB,CAA5C;EAEA,IAAMI,KAAK,GAAG7B,cAAc,CAAC;IAC3B8B,eAAe,EAAE,CAAC7B,KAAK,CAACgB,gBAAD,CAAN,GAA2BA,gBAA3B,GAA8C;EADpC,CAAD,CAA5B;EAGA,IAAMc,OAAO,GAAG,CAAC9B,KAAK,CAACe,SAAD,CAAN,GAAoBA,SAApB,GAAgCa,KAAK,CAACG,UAAtD;EACA,IAAMC,IAAI,GAAGpC,KAAK,CAACqC,MAANrC,CAAa,IAAbA,CAAb;EACA,gBAAsBS,QAAQ,CAAC,CAAA,CAAD,EAAK2B,IAAL,CAA9B;IAAQV,SAAAA,aAAAA,SAAAA;EAER,0BAMIrB,kBAAkB,CAAC,QAAD,EAAWuB,KAAX,EAAkB;MACtCF,SAAS,EAAEC,aAAa,IAAID,SADU;MAEtCT,UAAU,EAAED,QAAQ,IAAIC,UAAZD,IAA0Be,aAAa,CAACd,UAFd;MAGtCC,SAAS,EAAEA,SAAS,IAAIa,aAAa,CAACb,SAHA;MAItCC,SAAS,EAAEe;IAJ2B,CAAlB,CANtB;IACgBK,aADV,uBACJD,YAAY;IACGG,cAFX,uBAEJD,aAAa;IACCG,aAHV,uBAGJD,YAAY;IACGG,cAJX,uBAIJD,aAAa;IACVE,aAAAA;EAQL,IAAMR,YAAY,GAAGhC,QAAQ,CAAC,QAAD,EAAWiC,aAAX,CAA7B;EACA,IAAMC,aAAa,GAAGlC,QAAQ,CAAC,QAAD,EAAWmC,cAAX,CAA9B;EACA,IAAMC,YAAY,GAAGpC,QAAQ,CAAC,QAAD,EAAWqC,aAAX,CAA7B;EACA,IAAMC,aAAa,GAAGtC,QAAQ,CAAC,QAAD,EAAWuC,cAAX,CA5B3B;;EA+BH,IACEnC,qBAAqB,iCAChBkB,KADiB;IAEpBX,UAFoB,EAEpBA,UAFoB;IAGpBC,SAHoB,EAGpBA,SAHoB;IAIpBC,SAJoB,EAIpBA,SAJoB;IAKpBC,gBALoB,EAKpBA,gBALoB;IAMpBC,kBANoB,EAMpBA,kBANoB;IAOpBC,iBAAAA,EAAAA;EAAAA,GARJ,EAUE;IACA,OAAO,IAAP;EACD;EACD,OACE,KAAA,CAAA,aAAA,CAAC,cAAD,EAAA,QAAA,CAAA;IACE,kBAAkB,EAAED,kBADtB;IAEE,iBAAiB,EAAEC,iBAFrB;IAGE,UAAU,EAAE;MAAEyB,KAAK,EAAEP,aAAT;MAAwBQ,IAAI,EAAEV;IAA9B,CAHd;IAIE,UAAU,EAAEJ,OAAO,GAAGQ,YAAH,GAAkBE,aAJvC;IAKE,gBAAgB,EAAEF,YALpB;;IAME,mBAAmB,EAAEF;EANvB,CAAA,EAOMM,aAPN,EAAA;IAQE,QAAQ,EAAE9B,QAAQ,IAAIC,UAAZD,IAA0Be,aAAa,CAACd,UARpD;IASE,aAAa,EAAGgC,uBAAAA,GAAD,EAAkB;MAC/BxB,cAAa,IAAIA,cAAa,CAACwB,GAAD,CAA9BxB;MACAF,QAAQ,GAAGA,QAAQ,CAAC0B,GAAD,CAAX,GAAmBjB,KAAK,CAACkB,MAANlB,EAA3BT;IACD,CAZH;IAaE,KAAK,EAAEC,KAAK,IAAIU,OAblB;IAcE,GAAG,EAAE1B,SAAS,CAAC,CAACqB,GAAD,EAAMO,IAAN,CAAD;EAdhB,CAAA,CAAA,CADF;AAkBD,CA9ED;AAgFA,eAAenC,IAAI,CAACC,UAAU,CAACa,MAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { useToggleState } from '@react-stately/toggle';\nimport { Switch as RNSwitch } from 'react-native';\nimport isNil from 'lodash.isnil';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useToken } from '../../../hooks';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport type { ISwitchProps } from './types';\nimport { mergeRefs } from '../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport { combineContextAndProps } from '../../../utils';\n\nconst StyledNBSwitch = makeStyledComponent(RNSwitch);\n\n// TODO: Needs proper refactor\nconst Switch = (\n  {\n    disabled,\n    isDisabled,\n    isInvalid,\n    isChecked,\n    defaultIsChecked,\n    accessibilityLabel,\n    accessibilityHint,\n    onToggle,\n    value,\n    onValueChange,\n    isHovered: isHoveredProp,\n    ...props\n  }: ISwitchProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n\n  const combinedProps = combineContextAndProps(formControlContext, props);\n\n  const state = useToggleState({\n    defaultSelected: !isNil(defaultIsChecked) ? defaultIsChecked : false,\n  });\n  const checked = !isNil(isChecked) ? isChecked : state.isSelected;\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n\n  const {\n    onTrackColor: _onTrackColor,\n    offTrackColor: _offTrackColor,\n    onThumbColor: _onThumbColor,\n    offThumbColor: _offThumbColor,\n    ...resolvedProps\n  } = usePropsResolution('Switch', props, {\n    isHovered: isHoveredProp || isHovered,\n    isDisabled: disabled || isDisabled || combinedProps.isDisabled,\n    isInvalid: isInvalid || combinedProps.isInvalid,\n    isChecked: checked,\n  });\n\n  const onTrackColor = useToken('colors', _onTrackColor);\n  const offTrackColor = useToken('colors', _offTrackColor);\n  const onThumbColor = useToken('colors', _onThumbColor);\n  const offThumbColor = useToken('colors', _offThumbColor);\n\n  //TODO: refactor for responsive prop\n  if (\n    useHasResponsiveProps({\n      ...props,\n      isDisabled,\n      isInvalid,\n      isChecked,\n      defaultIsChecked,\n      accessibilityLabel,\n      accessibilityHint,\n    })\n  ) {\n    return null;\n  }\n  return (\n    <StyledNBSwitch\n      accessibilityLabel={accessibilityLabel}\n      accessibilityHint={accessibilityHint}\n      trackColor={{ false: offTrackColor, true: onTrackColor }}\n      thumbColor={checked ? onThumbColor : offThumbColor}\n      activeThumbColor={onThumbColor} // react-native-web prop for active thumbColor\n      ios_backgroundColor={offTrackColor}\n      {...resolvedProps}\n      disabled={disabled || isDisabled || combinedProps.isDisabled}\n      onValueChange={(val: boolean) => {\n        onValueChange && onValueChange(val);\n        onToggle ? onToggle(val) : state.toggle();\n      }}\n      value={value || checked}\n      ref={mergeRefs([ref, _ref])}\n    />\n  );\n};\n\nexport default memo(forwardRef(Switch));\nexport type { ISwitchProps };\n"]},"metadata":{},"sourceType":"module"}