{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"children\", \"isDisabled\", \"disabled\", \"isHovered\", \"isPressed\", \"isFocused\", \"isFocusVisible\"],\n  _excluded2 = [\"onPressIn\", \"onPressOut\", \"onHoverIn\", \"onHoverOut\", \"onFocus\", \"onBlur\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, memo } from 'react';\nimport RNPressable from \"react-native-web/dist/exports/Pressable\";\nimport { composeEventHandlers } from \"../../../utils\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { makeStyledComponent } from \"../../../utils/styled\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useFocusRing } from '@react-native-aria/focus';\nexport var useHover = function useHover() {\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isHovered = _React$useState2[0],\n    setHovered = _React$useState2[1];\n  return {\n    hoverProps: {\n      onHoverIn: function onHoverIn() {\n        return setHovered(true);\n      },\n      onHoverOut: function onHoverOut() {\n        return setHovered(false);\n      }\n    },\n    isHovered: isHovered\n  };\n};\nexport var useFocus = function useFocus() {\n  var _React$useState3 = React.useState(false),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    isFocused = _React$useState4[0],\n    setFocused = _React$useState4[1];\n  return {\n    focusProps: {\n      onFocus: function onFocus() {\n        return setFocused(true);\n      },\n      onBlur: function onBlur() {\n        return setFocused(false);\n      }\n    },\n    isFocused: isFocused\n  };\n};\nexport var useIsPressed = function useIsPressed() {\n  var _React$useState5 = React.useState(false),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    isPressed = _React$useState6[0],\n    setIsPressed = _React$useState6[1];\n  return {\n    pressableProps: {\n      onPressIn: function onPressIn() {\n        return setIsPressed(true);\n      },\n      onPressOut: function onPressOut() {\n        return setIsPressed(false);\n      }\n    },\n    isPressed: isPressed\n  };\n};\nvar StyledPressable = makeStyledComponent(RNPressable);\nvar Pressable = function Pressable(_ref, ref) {\n  var children = _ref.children,\n    isDisabled = _ref.isDisabled,\n    disabled = _ref.disabled,\n    isHoveredProp = _ref.isHovered,\n    isPressedProp = _ref.isPressed,\n    isFocusedProp = _ref.isFocused,\n    isFocusVisibleProp = _ref.isFocusVisible,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _useHover = useHover(),\n    hoverProps = _useHover.hoverProps,\n    isHovered = _useHover.isHovered;\n  var _useIsPressed = useIsPressed(),\n    pressableProps = _useIsPressed.pressableProps,\n    isPressed = _useIsPressed.isPressed;\n  var _useFocus = useFocus(),\n    focusProps = _useFocus.focusProps,\n    isFocused = _useFocus.isFocused;\n  var _useFocusRing = useFocusRing(),\n    isFocusVisible = _useFocusRing.isFocusVisible,\n    focusRingProps = _useFocusRing.focusProps;\n  var stateProps = {\n    isPressed: isPressedProp || isPressed,\n    isFocused: isFocusedProp || isFocused,\n    isHovered: isHoveredProp || isHovered\n  };\n  var _usePropsResolution = usePropsResolution('Pressable', props, _objectSpread(_objectSpread({}, stateProps), {}, {\n      isFocusVisible: isFocusVisibleProp || isFocusVisible,\n      isDisabled: disabled || isDisabled\n    })),\n    onPressIn = _usePropsResolution.onPressIn,\n    onPressOut = _usePropsResolution.onPressOut,\n    onHoverIn = _usePropsResolution.onHoverIn,\n    onHoverOut = _usePropsResolution.onHoverOut,\n    onFocus = _usePropsResolution.onFocus,\n    onBlur = _usePropsResolution.onBlur,\n    resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(StyledPressable, _extends({\n    ref: ref,\n    onPressIn: composeEventHandlers(onPressIn, pressableProps.onPressIn),\n    onPressOut: composeEventHandlers(onPressOut, pressableProps.onPressOut),\n\n    onHoverIn: composeEventHandlers(onHoverIn, hoverProps.onHoverIn),\n\n    onHoverOut: composeEventHandlers(onHoverOut, hoverProps.onHoverOut),\n\n    onFocus: composeEventHandlers(composeEventHandlers(onFocus, focusProps.onFocus), focusRingProps.onFocus),\n\n    onBlur: composeEventHandlers(composeEventHandlers(onBlur, focusProps.onBlur), focusRingProps.onBlur),\n    disabled: disabled || isDisabled\n  }, resolvedProps), typeof children !== 'function' ? children : children(_objectSpread({}, stateProps)));\n};\nexport default memo(forwardRef(Pressable));","map":{"version":3,"sources":["Pressable.tsx"],"names":["React","forwardRef","memo","composeEventHandlers","useHasResponsiveProps","makeStyledComponent","usePropsResolution","useFocusRing","useHover","isHovered","setHovered","useState","hoverProps","onHoverIn","onHoverOut","useFocus","isFocused","setFocused","focusProps","onFocus","onBlur","useIsPressed","isPressed","setIsPressed","pressableProps","onPressIn","onPressOut","StyledPressable","RNPressable","Pressable","children","isDisabled","disabled","isHoveredProp","isPressedProp","isFocusedProp","isFocusVisible","isFocusVisibleProp","props","ref","focusRingProps","stateProps","resolvedProps"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { Pressable as RNPressable } from 'react-native';\nimport { composeEventHandlers } from '../../../utils';\nimport type { IPressableProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useFocusRing } from '@react-native-aria/focus';\n\nexport const useHover = () => {\n  const [isHovered, setHovered] = React.useState(false);\n  return {\n    hoverProps: {\n      onHoverIn: () => setHovered(true),\n      onHoverOut: () => setHovered(false),\n    },\n    isHovered,\n  };\n};\n\nexport const useFocus = () => {\n  const [isFocused, setFocused] = React.useState(false);\n  return {\n    focusProps: {\n      onFocus: () => setFocused(true),\n      onBlur: () => setFocused(false),\n    },\n    isFocused,\n  };\n};\n\nexport const useIsPressed = () => {\n  const [isPressed, setIsPressed] = React.useState(false);\n  return {\n    pressableProps: {\n      onPressIn: () => setIsPressed(true),\n      onPressOut: () => setIsPressed(false),\n    },\n    isPressed,\n  };\n};\n\nconst StyledPressable = makeStyledComponent(RNPressable);\n\nconst Pressable = (\n  {\n    children,\n    isDisabled,\n    disabled,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: IPressableProps,\n  ref: any\n) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n\n  const stateProps = {\n    isPressed: isPressedProp || isPressed,\n    isFocused: isFocusedProp || isFocused,\n    isHovered: isHoveredProp || isHovered,\n  };\n\n  const {\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...resolvedProps\n  } = usePropsResolution('Pressable', props, {\n    ...stateProps,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    isDisabled: disabled || isDisabled,\n  });\n\n  // TODO: Replace Render props with Context Hook\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  // TODO: Replace Render props with Context Hook\n  return (\n    <StyledPressable\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      disabled={disabled || isDisabled}\n      {...resolvedProps}\n    >\n      {typeof children !== 'function' ? children : children({ ...stateProps })}\n    </StyledPressable>\n  );\n};\n\nexport default memo(forwardRef(Pressable));\n"]},"metadata":{},"sourceType":"module"}