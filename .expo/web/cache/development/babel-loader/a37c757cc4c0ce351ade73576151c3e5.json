{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport var useKeyboardBottomInset = function useKeyboardBottomInset() {\n  var _React$useState = React.useState(0),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    bottom = _React$useState2[0],\n    setBottom = _React$useState2[1];\n  var subscriptions = React.useRef([]);\n  React.useEffect(function () {\n    function onKeyboardChange(e) {\n      if (e.startCoordinates && e.endCoordinates.screenY <= e.startCoordinates.screenY) setBottom(e.endCoordinates.height / 2);else setBottom(0);\n    }\n    if (Platform.OS === 'ios') {\n      subscriptions.current = [Keyboard.addListener('keyboardWillChangeFrame', onKeyboardChange)];\n    } else {\n      subscriptions.current = [Keyboard.addListener('keyboardDidHide', onKeyboardChange), Keyboard.addListener('keyboardDidShow', onKeyboardChange)];\n    }\n    return function () {\n      subscriptions.current.forEach(function (subscription) {\n        subscription.remove();\n      });\n    };\n  }, [setBottom, subscriptions]);\n  return bottom;\n};","map":{"version":3,"sources":["useKeyboardBottomInset.ts"],"names":["React","useKeyboardBottomInset","bottom","setBottom","useState","subscriptions","useRef","useEffect","onKeyboardChange","e","startCoordinates","endCoordinates","screenY","height","Platform","OS","current","Keyboard","addListener","forEach","subscription","remove"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA;AAAA;AAGA,OAAO,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAsB,GAAS;EAC1C,sBAA4BD,KAAK,CAACI,QAANJ,CAAe,CAAfA,CAA5B;IAAA;IAAOE,MAAD;IAASC,SAAT;EACN,IAAME,aAAa,GAAGL,KAAK,CAACM,MAANN,CAAoB,EAApBA,CAAtB;EAEAA,KAAK,CAACO,SAANP,CAAgB,YAAM;IACpB,SAASQ,gBAAT,CAA0BC,CAA1B,EAA4C;MAC1C,IACEA,CAAC,CAACC,gBAAFD,IACAA,CAAC,CAACE,cAAFF,CAAiBG,OAAjBH,IAA4BA,CAAC,CAACC,gBAAFD,CAAmBG,OAFjD,EAIET,SAAS,CAACM,CAAC,CAACE,cAAFF,CAAiBI,MAAjBJ,GAA0B,CAA3B,CAATN,CAJF,KAKKA,SAAS,CAAC,CAAD,CAATA;IACN;IAED,IAAIW,QAAQ,CAACC,EAATD,KAAgB,KAApB,EAA2B;MACzBT,aAAa,CAACW,OAAdX,GAAwB,CACtBY,QAAQ,CAACC,WAATD,CAAqB,yBAArBA,EAAgDT,gBAAhDS,CADsB,CAAxBZ;IAGD,CAJD,MAIO;MACLA,aAAa,CAACW,OAAdX,GAAwB,CACtBY,QAAQ,CAACC,WAATD,CAAqB,iBAArBA,EAAwCT,gBAAxCS,CADsB,EAEtBA,QAAQ,CAACC,WAATD,CAAqB,iBAArBA,EAAwCT,gBAAxCS,CAFsB,CAAxBZ;IAID;IACD,OAAO,YAAM;MACXA,aAAa,CAACW,OAAdX,CAAsBc,OAAtBd,CAA+Be,UAAAA,YAAD,EAAkB;QAC9CA,YAAY,CAACC,MAAbD,EAAAA;MACD,CAFDf,CAAAA;IAGD,CAJD;EAKD,CAzBDL,EAyBG,CAACG,SAAD,EAAYE,aAAZ,CAzBHL,CAAAA;EA2BA,OAAOE,MAAP;AACD,CAhCM","sourcesContent":["import * as React from 'react';\nimport { Keyboard, Platform, KeyboardEvent } from 'react-native';\n\nexport const useKeyboardBottomInset = () => {\n  const [bottom, setBottom] = React.useState(0);\n  const subscriptions = React.useRef<any[]>([]);\n\n  React.useEffect(() => {\n    function onKeyboardChange(e: KeyboardEvent) {\n      if (\n        e.startCoordinates &&\n        e.endCoordinates.screenY <= e.startCoordinates.screenY\n      )\n        setBottom(e.endCoordinates.height / 2);\n      else setBottom(0);\n    }\n\n    if (Platform.OS === 'ios') {\n      subscriptions.current = [\n        Keyboard.addListener('keyboardWillChangeFrame', onKeyboardChange),\n      ];\n    } else {\n      subscriptions.current = [\n        Keyboard.addListener('keyboardDidHide', onKeyboardChange),\n        Keyboard.addListener('keyboardDidShow', onKeyboardChange),\n      ];\n    }\n    return () => {\n      subscriptions.current.forEach((subscription) => {\n        subscription.remove();\n      });\n    };\n  }, [setBottom, subscriptions]);\n\n  return bottom;\n};\n"]},"metadata":{},"sourceType":"module"}