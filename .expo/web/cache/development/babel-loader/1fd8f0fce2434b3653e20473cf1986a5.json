{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"],\n  _excluded2 = [\"_astrick\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport Box from \"../../primitives/Box\";\nimport Text from \"../../primitives/Text\";\nimport { useFormControlContext } from \"./useFormControl\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { mergeRefs } from \"../../../utils\";\nimport { combineContextAndProps } from \"../../../utils\";\nvar FormControlLabel = function FormControlLabel(_ref2, ref) {\n  var children = _ref2.children,\n    props = _objectWithoutProperties(_ref2, _excluded);\n  var formControlContext = useFormControlContext();\n  var combinedProps = combineContextAndProps(formControlContext, props);\n  var _ref = React.useRef(null);\n  var _usePropsResolution = usePropsResolution('FormControlLabel', combinedProps, {\n      isDisabled: combinedProps.isDisabled,\n      isReadOnly: combinedProps.isReadOnly,\n      isInvalid: combinedProps.isInvalid\n    }),\n    _astrick = _usePropsResolution._astrick,\n    resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n  var requiredAsterisk = function requiredAsterisk() {\n    return React.createElement(Text, _extends({\n      _web: {\n        accessibilityHidden: true,\n        accessibilityRole: 'presentation'\n      }\n    }, _astrick), \"*\");\n  };\n  var mergedRef = mergeRefs([_ref, ref]);\n  React.useEffect(function () {\n    if (_ref.current) {\n      if (props.htmlFor) {\n        _ref.current.htmlFor = props.htmlFor;\n      } else if (resolvedProps !== null && resolvedProps !== void 0 && resolvedProps.nativeID) {\n        _ref.current.htmlFor = resolvedProps.nativeID;\n      }\n    }\n  }, [resolvedProps === null || resolvedProps === void 0 ? void 0 : resolvedProps.nativeID, props.htmlFor]);\n  return React.createElement(Box, _extends({\n    _web: {\n      accessibilityRole: 'label'\n    }\n  }, resolvedProps, {\n    nativeID: resolvedProps === null || resolvedProps === void 0 ? void 0 : resolvedProps.labelId,\n    ref: mergedRef\n  }), children, (resolvedProps === null || resolvedProps === void 0 ? void 0 : resolvedProps.isRequired) && requiredAsterisk());\n};\nexport default memo(forwardRef(FormControlLabel));","map":{"version":3,"sources":["FormControlLabel.tsx"],"names":["React","memo","forwardRef","Box","Text","useFormControlContext","usePropsResolution","mergeRefs","combineContextAndProps","FormControlLabel","children","props","ref","formControlContext","combinedProps","_ref","useRef","_astrick","resolvedProps","isDisabled","isReadOnly","isInvalid","requiredAsterisk","accessibilityHidden","accessibilityRole","mergedRef","useEffect","current","htmlFor","nativeID","labelId","isRequired"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,OAAOC,GAAP;AACA,OAAOC,IAAP;AACA,SAASC,qBAAT;AACA,SAASC,kBAAT;AAEA,SAASC,SAAT;AACA,SAASC,sBAAT;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,QAEpBG,GAFuB,EAGpB;EAAA,IAFDF,QAAF,SAAEA,QAAF;IAAeC,KAAAA;EAGf,IAAME,kBAAkB,GAAGR,qBAAqB,EAAhD;EACA,IAAMS,aAAa,GAAGN,sBAAsB,CAACK,kBAAD,EAAqBF,KAArB,CAA5C;EACA,IAAMI,IAAI,GAAGf,KAAK,CAACgB,MAANhB,CAA+B,IAA/BA,CAAb;EACA,0BAAuCM,kBAAkB,CACvD,kBADuD,EAEvDQ,aAFuD,EAGvD;MACEK,UAAU,EAAEL,aAAa,CAACK,UAD5B;MAEEC,UAAU,EAAEN,aAAa,CAACM,UAF5B;MAGEC,SAAS,EAAEP,aAAa,CAH1B;IAAA,CAHuD,CAAzD;IAAQG,QAAF,uBAAEA,QAAF;IAAeC,aAAAA;EAWrB,IAAMI,gBAAgB,GAAG,SAAnBA,gBAAgB;IAAA,OACpB,KAAA,CAAA,aAAA,CAAC,IAAD,EAAA,QAAA,CAAA;MACE,IAAI,EAAE;QACJC,mBAAmB,EAAE,IADjB;QAGJC,iBAAiB,EAAE;MAHf;IADR,CAAA,EAMMP,QANN,CAAA,EAAA,GAAA,CADF;EAAA;EAYA,IAAMQ,SAAS,GAAGlB,SAAS,CAAC,CAACQ,IAAD,EAAOH,GAAP,CAAD,CAA3B;EACAZ,KAAK,CAAC0B,SAAN1B,CAAgB,YAAM;IACpB,IAAIe,IAAI,CAACY,OAAT,EAAkB;MAEhB,IAAIhB,KAAK,CAACiB,OAAV,EAAmB;QACjBb,IAAI,CAACY,OAALZ,CAAaa,OAAbb,GAAuBJ,KAAK,CAACiB,OAA7Bb;MACD,CAFD,MAEO,IAAIG,aAAJ,KAAA,IAAA,IAAIA,aAAJ,KAAA,KAAA,CAAA,IAAIA,aAAa,CAAEW,QAAnB,EAA6B;QAClCd,IAAI,CAACY,OAALZ,CAAaa,OAAbb,GAAuBG,aAAa,CAACW,QAArCd;MACD;IACF;EACF,CATDf,EASG,CAACkB,aAAD,KAAA,IAAA,IAACA,aAAD,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAACA,aAAa,CAAEW,QAAhB,EAA0BlB,KAAK,CAACiB,OAAhC,CATH5B,CAAAA;EAWA,OACE,KAAA,CAAA,aAAA,CAAC,GAAD,EAAA,QAAA,CAAA;IACE,IAAI,EAAE;MAEJwB,iBAAiB,EAAE;IAFf;EADR,CAAA,EAKMN,aALN,EAAA;IAME,QAAQ,EAAEA,aAAF,KAAA,IAAA,IAAEA,aAAF,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAEA,aAAa,CAAEY,OAN3B;IAOE,GAAG,EAAEL;EAPP,CAAA,CAAA,EASGf,QATH,EAUG,CAAA,aAAa,KAAA,IAAb,IAAA,aAAa,KAAA,KAAA,CAAb,GAAA,KAAA,CAAA,GAAA,aAAa,CAAEqB,UAAf,KAA6BT,gBAAgB,EAVhD,CADF;AAcD,CAxDD;AAyDA,eAAerB,IAAI,CAACC,UAAU,CAACO,gBAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport Text from '../../primitives/Text';\nimport { useFormControlContext } from './useFormControl';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IFormControlLabelProps } from './types';\nimport { mergeRefs } from '../../../utils';\nimport { combineContextAndProps } from '../../../utils';\n\nconst FormControlLabel = (\n  { children, ...props }: IFormControlLabelProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const combinedProps = combineContextAndProps(formControlContext, props);\n  const _ref = React.useRef<HTMLLabelElement>(null);\n  const { _astrick, ...resolvedProps } = usePropsResolution(\n    'FormControlLabel',\n    combinedProps,\n    {\n      isDisabled: combinedProps.isDisabled,\n      isReadOnly: combinedProps.isReadOnly,\n      isInvalid: combinedProps.isInvalid,\n      // isRequired: combinedProps.isRequired,\n    }\n  );\n\n  const requiredAsterisk = () => (\n    <Text\n      _web={{\n        accessibilityHidden: true,\n        //@ts-ignore\n        accessibilityRole: 'presentation',\n      }}\n      {..._astrick}\n    >\n      *\n    </Text>\n  );\n  const mergedRef = mergeRefs([_ref, ref]);\n  React.useEffect(() => {\n    if (_ref.current) {\n      // RN web doesn't support htmlFor for Label element yet\n      if (props.htmlFor) {\n        _ref.current.htmlFor = props.htmlFor;\n      } else if (resolvedProps?.nativeID) {\n        _ref.current.htmlFor = resolvedProps.nativeID;\n      }\n    }\n  }, [resolvedProps?.nativeID, props.htmlFor]);\n\n  return (\n    <Box\n      _web={{\n        //@ts-ignore\n        accessibilityRole: 'label',\n      }}\n      {...resolvedProps}\n      nativeID={resolvedProps?.labelId}\n      ref={mergedRef}\n    >\n      {children}\n      {resolvedProps?.isRequired && requiredAsterisk()}\n    </Box>\n  );\n};\nexport default memo(forwardRef(FormControlLabel));\n"]},"metadata":{},"sourceType":"module"}