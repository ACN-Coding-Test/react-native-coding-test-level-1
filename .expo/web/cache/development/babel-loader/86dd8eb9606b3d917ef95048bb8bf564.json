{"ast":null,"code":"import _objectDestructuringEmpty from \"@babel/runtime/helpers/objectDestructuringEmpty\";\nimport _extends2 from \"@babel/runtime/helpers/extends\";\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport { ChevronDownIcon, ChevronUpIcon } from \"../../primitives/Icon/Icons\";\nimport { AccordionItemContext } from \"./Context\";\nimport { useThemeProps } from \"../../../hooks\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar AccordionIcon = function AccordionIcon(_ref, ref) {\n  var props = _extends2({}, (_objectDestructuringEmpty(_ref), _ref));\n  var _React$useContext = React.useContext(AccordionItemContext),\n    isOpen = _React$useContext.isOpen;\n  var _useThemeProps = useThemeProps('AccordionIcon', props),\n    newProps = _extends2({}, (_objectDestructuringEmpty(_useThemeProps), _useThemeProps));\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return isOpen ? React.createElement(ChevronUpIcon, _extends({\n    color: \"white\"\n  }, newProps, {\n    ref: ref\n  })) : React.createElement(ChevronDownIcon, _extends({}, newProps, {\n    ref: ref\n  }));\n};\nexport default React.memo(React.forwardRef(AccordionIcon));","map":{"version":3,"sources":["AccordionIcon.tsx"],"names":["React","ChevronDownIcon","ChevronUpIcon","AccordionItemContext","useThemeProps","useHasResponsiveProps","AccordionIcon","props","ref","isOpen","useContext","newProps","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,EAA0BC,aAA1B;AAEA,SAASC,oBAAT;AACA,SAASC,aAAT;AACA,SAASC,qBAAT;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAa,OAAuCE,GAApC,EAAkD;EAAA,IAA5CD,KAAAA;EAC1B,wBAA+CP,KAAK,CAACU,UAANV,CAC7CG,oBAD6CH,CAA/C;IAAQS,MAAAA,qBAAAA,MAAAA;EAGR,qBAAwBL,aAAa,CAAC,eAAD,EAAkBG,KAAlB,CAJiC;IAI3DI,QAAAA;;EAEX,IAAIN,qBAAqB,CAACE,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EACD,OAAOE,MAAM,GACX,KAAA,CAAA,aAAA,CAAC,aAAD,EAAA,QAAA,CAAA;IAAe,KAAK,EAAC;EAArB,CAAA,EAAiCE,QAAjC,EAAA;IAA2C,GAAG,EAAEH;EAAhD,CAAA,CAAA,CADW,GAGX,KAAA,CAAA,aAAA,CAAC,eAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EAAqBG,QAArB,EAAA;IAA+B,GAAG,EAAEH;EAApC,CAAA,CAAA,CAHF;AAKD,CAdD;AAgBA,eAAeR,KAAK,CAACY,IAANZ,CAAWA,KAAK,CAACa,UAANb,CAAiBM,aAAjBN,CAAXA,CAAf","sourcesContent":["import React from 'react';\nimport { ChevronDownIcon, ChevronUpIcon } from '../../primitives/Icon/Icons';\nimport type { IAccordionIconProps, IAccordionItemContextProps } from './types';\nimport { AccordionItemContext } from './Context';\nimport { useThemeProps } from '../../../hooks';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AccordionIcon = ({ ...props }: IAccordionIconProps, ref?: any) => {\n  const { isOpen }: IAccordionItemContextProps = React.useContext(\n    AccordionItemContext\n  );\n  const { ...newProps } = useThemeProps('AccordionIcon', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return isOpen ? (\n    <ChevronUpIcon color=\"white\" {...newProps} ref={ref} />\n  ) : (\n    <ChevronDownIcon {...newProps} ref={ref} />\n  );\n};\n\nexport default React.memo(React.forwardRef(AccordionIcon));\n"]},"metadata":{},"sourceType":"module"}