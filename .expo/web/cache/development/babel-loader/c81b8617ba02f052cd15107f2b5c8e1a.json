{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"],\n  _excluded2 = [\"focusable\", \"stroke\", \"color\", \"size\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport { useToken, usePropsResolution } from \"../../../hooks\";\nimport { makeStyledComponent } from \"../../../utils/styled\";\nimport { Svg, G } from \"./nbSvg\";\nimport { questionOutlineIconPath } from \"./Icons/questionIconPath\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar SVG = makeStyledComponent(Svg);\nvar SVGIcon = function SVGIcon(_ref, ref) {\n  var children = _ref.children,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _usePropsResolution = usePropsResolution('Icon', props),\n    focusable = _usePropsResolution.focusable,\n    stroke = _usePropsResolution.stroke,\n    color = _usePropsResolution.color,\n    size = _usePropsResolution.size,\n    resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n  var strokeHex = useToken('colors', stroke || '');\n  var colorHex = useToken('colors', color || '');\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return React.createElement(SVG, _extends({}, resolvedProps, {\n    size: size,\n    color: colorHex,\n    stroke: strokeHex,\n    focusable: focusable,\n    accessibilityRole: \"image\",\n\n    ref: ref\n  }), React.Children.count(children) > 0 ? React.createElement(G, null, React.Children.map(children, function (child, i) {\n    var _child$key;\n    return React.createElement(ChildPath, _extends({\n      key: (_child$key = child === null || child === void 0 ? void 0 : child.key) !== null && _child$key !== void 0 ? _child$key : i,\n      element: child\n    }, child === null || child === void 0 ? void 0 : child.props));\n  })) : questionOutlineIconPath);\n};\nvar ChildPath = function ChildPath(_ref2) {\n  var element = _ref2.element,\n    fill = _ref2.fill,\n    pathStroke = _ref2.stroke;\n  var pathStrokeColor = useToken('colors', pathStroke || '');\n  var fillColor = useToken('colors', fill || '');\n  if (!element) {\n    return null;\n  }\n  return React.cloneElement(element, {\n    fill: fillColor ? fillColor : 'currentColor',\n    stroke: pathStrokeColor\n  });\n};\nexport default memo(forwardRef(SVGIcon));","map":{"version":3,"sources":["SVGIcon.tsx"],"names":["React","memo","forwardRef","useToken","usePropsResolution","makeStyledComponent","Svg","G","questionOutlineIconPath","useHasResponsiveProps","SVG","SVGIcon","children","props","ref","focusable","stroke","color","size","resolvedProps","strokeHex","colorHex","Children","count","map","child","i","key","ChildPath","element","fill","pathStroke","pathStrokeColor","fillColor","cloneElement"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,QAAT,EAAmBC,kBAAnB;AACA,SAASC,mBAAT;AACA,SAASC,GAAT,EAAcC,CAAd;AAEA,SAASC,uBAAT;AACA,SAASC,qBAAT;AAEA,IAAMC,GAAG,GAAGL,mBAAmB,CAACC,GAAD,CAA/B;AAEA,IAAMK,OAAO,GAAG,SAAVA,OAAO,OAAwCG,GAArC,EAAkD;EAAA,IAA/CF,QAAF,QAAEA,QAAF;IAAeC,KAAAA;EAC9B,0BAMIT,kBAAkB,CAAC,MAAD,EAASS,KAAT,CANtB;IACEE,SADI,uBACJA,SADI;IAEJC,MAFI,uBAEJA,MAFI;IAGJC,KAHI,uBAGJA,KAHI;IAIJC,IAJI,uBAIJA,IAJI;IAKDC,aAAAA;EAEL,IAAMC,SAAS,GAAGjB,QAAQ,CAAC,QAAD,EAAWa,MAAM,IAAI,EAArB,CAA1B;EACA,IAAMK,QAAQ,GAAGlB,QAAQ,CAAC,QAAD,EAAWc,KAAK,IAAI,EAApB,CATuC;;EAWhE,IAAIR,qBAAqB,CAACI,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EACD,OACE,KAAA,CAAA,aAAA,CAAC,GAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EACMM,aADN,EAAA;IAYE,IAAI,EAAED,IAZR;IAaE,KAAK,EAAEG,QAbT;IAcE,MAAM,EAAED,SAdV;IAeE,SAAS,EAAEL,SAfb;IAgBE,iBAAiB,EAAC,OAhBpB;;IAkBE,GAAG,EAAED;EAlBP,CAAA,CAAA,EAoBG,KAAK,CAACQ,QAAN,CAAeC,KAAf,CAAqBX,QAArB,CAAA,GAAiC,CAAjC,GACC,KAAA,CAAA,aAAA,CAAC,CAAD,EAAA,IAAA,EACG,KAAK,CAACU,QAAN,CAAeE,GAAf,CAAmBZ,QAAnB,EAA6B,UAACa,KAAD,EAAQC,CAAR,EAAA;IAAA,IAAA,UAAA;IAAA,OAC5B,KAAA,CAAA,aAAA,CAAC,SAAD,EAAA,QAAA,CAAA;MACE,GAAG,EAAA,CAAA,UAAA,GAAED,KAAF,KAAA,IAAA,IAAEA,KAAF,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAEA,KAAK,CAAEE,GAAT,MAAA,IAAA,IAAA,UAAA,KAAA,KAAA,CAAA,GAAA,UAAA,GAAgBD,CADrB;MAEE,OAAO,EAAED;IAFX,CAAA,EAGMA,KAHN,KAAA,IAAA,IAGMA,KAHN,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAGMA,KAAK,CAAEZ,KAHb,CAAA,CAD4B;EAAA,CAA7B,CADH,CADD,GAWCL,uBA/BJ,CADF;AAoCD,CAlDD;AAmDA,IAAMoB,SAAS,GAAG,SAAZA,SAAS,QAAmD;EAAA,IAA7CC,OAAF,SAAEA,OAAF;IAAWC,IAAX,SAAWA,IAAX;IAAyBC,UAAAA,SAARf,MAAM;EACxC,IAAMgB,eAAe,GAAG7B,QAAQ,CAAC,QAAD,EAAW4B,UAAU,IAAI,EAAzB,CAAhC;EACA,IAAME,SAAS,GAAG9B,QAAQ,CAAC,QAAD,EAAW2B,IAAI,IAAI,EAAnB,CAA1B;EAEA,IAAI,CAACD,OAAL,EAAc;IACZ,OAAO,IAAP;EACD;EAED,OAAO,KAAK,CAACK,YAAN,CAAmBL,OAAnB,EAA4B;IACjCC,IAAI,EAAEG,SAAS,GAAGA,SAAH,GAAe,cADG;IAEjCjB,MAAM,EAAEgB;EAFyB,CAA5B,CAAP;AAID,CAZD;AAaA,eAAe/B,IAAI,CAACC,UAAU,CAACS,OAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { useToken, usePropsResolution } from '../../../hooks';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { Svg, G } from './nbSvg';\nimport type { IIconProps } from './types';\nimport { questionOutlineIconPath } from './Icons/questionIconPath';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst SVG = makeStyledComponent(Svg);\n\nconst SVGIcon = ({ children, ...props }: IIconProps, ref: any) => {\n  const {\n    focusable,\n    stroke,\n    color,\n    size,\n    ...resolvedProps\n  } = usePropsResolution('Icon', props);\n  const strokeHex = useToken('colors', stroke || '');\n  const colorHex = useToken('colors', color || '');\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <SVG\n      {...resolvedProps}\n      // height={\n      //   newProps.size\n      //     ? parseInt(newProps.size, 10)\n      //     : parseInt(newProps.height, 10)\n      // }\n      // width={\n      //   newProps.size\n      //     ? parseInt(newProps.size, 10)\n      //     : parseInt(newProps.width, 10)\n      // }\n      size={size}\n      color={colorHex}\n      stroke={strokeHex}\n      focusable={focusable}\n      accessibilityRole=\"image\"\n      // style={style}\n      ref={ref}\n    >\n      {React.Children.count(children) > 0 ? (\n        <G>\n          {React.Children.map(children, (child, i) => (\n            <ChildPath\n              key={child?.key ?? i}\n              element={child}\n              {...child?.props}\n            />\n          ))}\n        </G>\n      ) : (\n        questionOutlineIconPath\n      )}\n    </SVG>\n  );\n};\nconst ChildPath = ({ element, fill, stroke: pathStroke }: any) => {\n  const pathStrokeColor = useToken('colors', pathStroke || '');\n  const fillColor = useToken('colors', fill || '');\n\n  if (!element) {\n    return null;\n  }\n\n  return React.cloneElement(element, {\n    fill: fillColor ? fillColor : 'currentColor',\n    stroke: pathStrokeColor,\n  });\n};\nexport default memo(forwardRef(SVGIcon));\n"]},"metadata":{},"sourceType":"module"}