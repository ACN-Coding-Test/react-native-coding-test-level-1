{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"ratio\", \"children\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, memo } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { default as Box } from \"../../primitives/Box\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { usePropsResolution } from \"../../../hooks\";\nvar AspectView = forwardRef(function (props, ref) {\n  var _React$useState = React.useState(),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    layout = _React$useState2[0],\n    setLayout = _React$useState2[1];\n  var aspectViewStyle = [StyleSheet.flatten(props.style) || {}];\n  if (layout) {\n    var _layout$width = layout.width,\n      width = _layout$width === void 0 ? 0 : _layout$width,\n      _layout$height = layout.height,\n      height = _layout$height === void 0 ? 0 : _layout$height;\n    if (width === 0) {\n      aspectViewStyle.push({\n        width: height * props.aspectRatio,\n        height: height\n      });\n    } else {\n      aspectViewStyle.push({\n        width: width,\n        height: width / props.aspectRatio\n      });\n    }\n  }\n  return React.createElement(Box, _extends({\n    ref: ref\n  }, props, {\n    style: aspectViewStyle,\n    onLayout: function onLayout(_ref) {\n      var inLayout = _ref.nativeEvent.layout;\n      return setLayout(inLayout);\n    }\n  }));\n});\nvar AspectRatio = function AspectRatio(props, ref) {\n  var _children$props;\n  var _usePropsResolution = usePropsResolution('AspectRatio', props, {}, {\n      resolveResponsively: ['ratio']\n    }),\n    ratio = _usePropsResolution.ratio,\n    _usePropsResolution$c = _usePropsResolution.children,\n    children = _usePropsResolution$c === void 0 ? React.createElement(React.Fragment, null) : _usePropsResolution$c,\n    resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded);\n  var computedStyle = resolvedProps.style;\n  var newChildWithProps = React.cloneElement(children, _objectSpread(_objectSpread({}, children === null || children === void 0 ? void 0 : children.props), {}, {\n    style: StyleSheet.absoluteFillObject\n  }), children === null || children === void 0 ? void 0 : (_children$props = children.props) === null || _children$props === void 0 ? void 0 : _children$props.children);\n\n  if (useHasResponsiveProps(resolvedProps)) {\n    return null;\n  }\n\n  if (Platform.OS === 'web') {\n    return React.createElement(AspectView, _extends({\n      aspectRatio: ratio\n    }, resolvedProps, {\n      ref: ref\n    }), newChildWithProps);\n  } else {\n    computedStyle = StyleSheet.flatten([{\n      style: resolvedProps.style\n    }, {\n      aspectRatio: ratio\n    }]);\n    return React.createElement(Box, _extends({}, resolvedProps, {\n      style: computedStyle,\n      ref: ref\n    }), newChildWithProps);\n  }\n};\nexport default memo(forwardRef(AspectRatio));","map":{"version":3,"sources":["index.tsx"],"names":["React","forwardRef","memo","default","Box","useHasResponsiveProps","usePropsResolution","AspectView","props","ref","layout","setLayout","useState","aspectViewStyle","StyleSheet","flatten","style","width","height","push","aspectRatio","nativeEvent","inLayout","AspectRatio","ratio","children","resolvedProps","resolveResponsively","computedStyle","newChildWithProps","cloneElement","absoluteFillObject","Platform","OS"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,IAA5B,QAAwC,OAAxC;AAAA;AAAA;AAEA,SAASC,OAAO,IAAIC,GAApB;AACA,SAASC,qBAAT;AACA,SAASC,kBAAT;AAGA,IAAMC,UAAU,GAAGN,UAAU,CAAC,UAACO,KAAD,EAAaC,GAAb,EAA2B;EACvD,sBAA4BT,KAAK,CAACY,QAANZ,EAA5B;IAAA;IAAOU,MAAD;IAASC,SAAT;EACN,IAAME,eAAe,GAAG,CAACC,UAAU,CAACC,OAAXD,CAAmBN,KAAK,CAACQ,KAAzBF,CAAAA,IAAmC,CAAA,CAApC,CAAxB;EACA,IAAIJ,MAAJ,EAAY;IAEV,oBAAgCA,MAAhC,CAAMO,KAAK;MAALA,KAAK,8BAAG,CAAV;MAAA,iBAA4BP,MAAhC,CAAiBQ,MAAM;MAANA,MAAM,+BAAG,CAAA;IAC1B,IAAID,KAAK,KAAK,CAAd,EAAiB;MACfJ,eAAe,CAACM,IAAhBN,CAAqB;QAAEI,KAAK,EAAEC,MAAM,GAAGV,KAAK,CAACY,WAAxB;QAAqCF,MAAAA,EAAAA;MAArC,CAArBL,CAAAA;IACD,CAFD,MAEO;MACLA,eAAe,CAACM,IAAhBN,CAAqB;QAAEI,KAAF,EAAEA,KAAF;QAASC,MAAM,EAAED,KAAK,GAAGT,KAAK,CAACY;MAA/B,CAArBP,CAAAA;IACD;EACF;EAED,OACE,KAAA,CAAA,aAAA,CAAC,GAAD,EAAA,QAAA,CAAA;IACE,GAAG,EAAEJ;EADP,CAAA,EAEMD,KAFN,EAAA;IAGE,KAAK,EAAEK,eAHT;IAIE,QAAQ,EAAE;MAAA,IAA0BS,QAAAA,QAAvBD,WAAW,CAAIX,MAAM;MAAA,OAChCC,SAAS,CAACW,QAAD,CAAA;IAAA;EALb,CAAA,CAAA,CADF;AAUD,CAvB4B,CAA7B;AAyBA,IAAMC,WAAW,GAAG,SAAdA,WAAW,CAAIf,KAAD,EAA2BC,GAA3B,EAAyC;EAAA,IAAA,eAAA;EAC3D,0BAAsDH,kBAAkB,CACtE,aADsE,EAEtEE,KAFsE,EAGtE,CAAA,CAHsE,EAItE;MAAEmB,mBAAmB,EAAE,CAAC,OAAD;IAAvB,CAJsE,CAAxE;IAAQH,KAAF,uBAAEA,KAAF;IAAA,4CAASC,QAAQ;IAARA,QAAQ,sCAAG,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,CAApB;IAA8BC,aAAAA;EAMpC,IAAIE,aAAoC,GAAGF,aAAa,CAACV,KAAzD;EACA,IAAMa,iBAAiB,GAAG,KAAK,CAACC,YAAN,CACxBL,QADwB,kCAGnBA,QAAH,KAAA,IAAA,IAAGA,QAAH,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGA,QAAQ,CAAEjB,KADf;IAEEQ,KAAK,EAAEF,UAAU,CAACiB;EAAAA,IAEpBN,QANwB,KAAA,IAAA,IAMxBA,QANwB,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,eAAA,GAMxBA,QAAQ,CAAEjB,KANc,MAAA,IAAA,IAAA,eAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAMxBiB,eAAAA,CAAiBA,QANO,CARiC;;EAkB3D,IAAIpB,qBAAqB,CAACqB,aAAD,CAAzB,EAA0C;IACxC,OAAO,IAAP;EAnByD;;EAsB3D,IAAIM,QAAQ,CAACC,EAATD,KAAgB,KAApB,EAA2B;IACzB,OACE,KAAA,CAAA,aAAA,CAAC,UAAD,EAAA,QAAA,CAAA;MAAY,WAAW,EAAER;IAAzB,CAAA,EAAoCE,aAApC,EAAA;MAAmD,GAAG,EAAEjB;IAAxD,CAAA,CAAA,EACGoB,iBADH,CADF;EAKD,CAND,MAMO;IACLD,aAAa,GAAG,UAAU,CAACb,OAAX,CAAmB,CACjC;MAAEC,KAAK,EAAEU,aAAa,CAACV;IAAvB,CADiC,EAEjC;MAAEI,WAAW,EAAEI;IAAf,CAFiC,CAAnB,CAAhBI;IAIA,OACE,KAAA,CAAA,aAAA,CAAC,GAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EAASF,aAAT,EAAA;MAAwB,KAAK,EAAEE,aAA/B;MAA8C,GAAG,EAAEnB;IAAnD,CAAA,CAAA,EACGoB,iBADH,CADF;EAKD;AACF,CAvCD;AAyCA,eAAe3B,IAAI,CAACD,UAAU,CAACsB,WAAD,CAAX,CAAnB","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { StyleSheet, ViewStyle, Platform } from 'react-native';\nimport { default as Box } from '../../primitives/Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks';\nimport type { IAspectRatioProps } from './types';\n\nconst AspectView = forwardRef((props: any, ref?: any) => {\n  const [layout, setLayout] = React.useState();\n  const aspectViewStyle = [StyleSheet.flatten(props.style) || {}];\n  if (layout) {\n    // @ts-ignore\n    let { width = 0, height = 0 } = layout;\n    if (width === 0) {\n      aspectViewStyle.push({ width: height * props.aspectRatio, height });\n    } else {\n      aspectViewStyle.push({ width, height: width / props.aspectRatio });\n    }\n  }\n\n  return (\n    <Box\n      ref={ref}\n      {...props}\n      style={aspectViewStyle}\n      onLayout={({ nativeEvent: { layout: inLayout } }: any) =>\n        setLayout(inLayout)\n      }\n    />\n  );\n});\n\nconst AspectRatio = (props: IAspectRatioProps, ref?: any) => {\n  const { ratio, children = <></>, ...resolvedProps } = usePropsResolution(\n    'AspectRatio',\n    props,\n    {},\n    { resolveResponsively: ['ratio'] }\n  );\n  let computedStyle: ViewStyle | undefined = resolvedProps.style;\n  const newChildWithProps = React.cloneElement(\n    children,\n    {\n      ...children?.props,\n      style: StyleSheet.absoluteFillObject,\n    },\n    children?.props?.children\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(resolvedProps)) {\n    return null;\n  }\n  // DOC:  It uses a aspectRatio property of React Native and manually calculate on Web\n  if (Platform.OS === 'web') {\n    return (\n      <AspectView aspectRatio={ratio} {...resolvedProps} ref={ref}>\n        {newChildWithProps}\n      </AspectView>\n    );\n  } else {\n    computedStyle = StyleSheet.flatten([\n      { style: resolvedProps.style },\n      { aspectRatio: ratio },\n    ]);\n    return (\n      <Box {...resolvedProps} style={computedStyle} ref={ref}>\n        {newChildWithProps}\n      </Box>\n    );\n  }\n};\n\nexport default memo(forwardRef(AspectRatio));\n"]},"metadata":{},"sourceType":"module"}