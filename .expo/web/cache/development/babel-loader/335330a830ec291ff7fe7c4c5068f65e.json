{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"],\n  _excluded2 = [\"space\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport isNil from 'lodash.isnil';\nimport React from 'react';\nimport Flex from \"../../primitives/Flex\";\nimport { useThemeProps } from \"../../../hooks\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar Wrap = function Wrap(_ref, ref) {\n  var children = _ref.children,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _useThemeProps = useThemeProps('Wrap', props),\n    space = _useThemeProps.space,\n    newProps = _objectWithoutProperties(_useThemeProps, _excluded2);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return React.createElement(Flex, _extends({\n    wrap: \"wrap\"\n  }, newProps, {\n    ref: ref\n  }), isNil(space) ? children : React.Children.map(children, function (child) {\n    return React.cloneElement(child, _objectSpread(_objectSpread({}, props), {}, {\n      style: {\n        margin: space\n      }\n    }), child.props.children);\n  }));\n};\nexport default React.memo(React.forwardRef(Wrap));","map":{"version":3,"sources":["index.tsx"],"names":["isNil","React","Flex","useThemeProps","useHasResponsiveProps","Wrap","children","props","ref","space","newProps","Children","map","child","cloneElement","style","margin","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,cAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP;AAEA,SAASC,aAAT;AACA,SAASC,qBAAT;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAI,OAAwCG,GAArC,EAAmD;EAAA,IAAhDF,QAAF,QAAEA,QAAF;IAAeC,KAAAA;EAC3B,qBAA+BJ,aAAa,CAAC,MAAD,EAASI,KAAT,CADkB;IACtDE,KAAF,kBAAEA,KAAF;IAAYC,QAAAA;;EAGlB,IAAIN,qBAAqB,CAACG,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EAED,OACE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAA,QAAA,CAAA;IAAM,IAAI,EAAC;EAAX,CAAA,EAAsBG,QAAtB,EAAA;IAAgC,GAAG,EAAEF;EAArC,CAAA,CAAA,EACGR,KAAK,CAACS,KAAD,CAALT,GACGM,QADHN,GAEG,KAAK,CAACW,QAAN,CAAeC,GAAf,CAAmBN,QAAnB,EAA8BO,UAAAA,KAAD,EAAgB;IAC3C,OAAO,KAAK,CAACC,YAAN,CACLD,KADK,kCAEAN,KAAL;MAAYQ,KAAK,EAAE;QAAEC,MAAM,EAAEP;MAAV;IAAA,IACnBI,KAAK,CAACN,KAANM,CAAYP,QAHP,CAAP;EAKD,CAND,CAHN,CADF;AAaD,CArBD;AAuBA,eAAeL,KAAK,CAACgB,IAANhB,CAAWA,KAAK,CAACiB,UAANjB,CAAiBI,IAAjBJ,CAAXA,CAAf","sourcesContent":["import isNil from 'lodash.isnil';\nimport React from 'react';\nimport Flex from '../../primitives/Flex';\nimport type { IWrapProps } from './types';\nimport { useThemeProps } from '../../../hooks';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Wrap = ({ children, ...props }: IWrapProps, ref?: any) => {\n  const { space, ...newProps } = useThemeProps('Wrap', props);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Flex wrap=\"wrap\" {...newProps} ref={ref}>\n      {isNil(space)\n        ? children\n        : React.Children.map(children, (child: any) => {\n            return React.cloneElement(\n              child,\n              { ...props, style: { margin: space } },\n              child.props.children\n            );\n          })}\n    </Flex>\n  );\n};\n\nexport default React.memo(React.forwardRef(Wrap));\nexport type { IWrapProps };\n"]},"metadata":{},"sourceType":"module"}