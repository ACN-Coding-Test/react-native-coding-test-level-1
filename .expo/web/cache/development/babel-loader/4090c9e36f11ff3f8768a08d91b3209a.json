{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\nimport NavigationHelpersContext from \"./NavigationHelpersContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nimport PreventRemoveContext from \"./PreventRemoveContext\";\n\nvar transformPreventedRoutes = function transformPreventedRoutes(preventedRoutesMap) {\n  var preventedRoutesToTransform = _toConsumableArray(preventedRoutesMap.values());\n  var preventedRoutes = preventedRoutesToTransform.reduce(function (acc, _ref) {\n    var _acc$routeKey;\n    var routeKey = _ref.routeKey,\n      preventRemove = _ref.preventRemove;\n    acc[routeKey] = {\n      preventRemove: ((_acc$routeKey = acc[routeKey]) === null || _acc$routeKey === void 0 ? void 0 : _acc$routeKey.preventRemove) || preventRemove\n    };\n    return acc;\n  }, {});\n  return preventedRoutes;\n};\n\nexport default function PreventRemoveProvider(_ref2) {\n  var children = _ref2.children;\n  var _React$useState = React.useState(function () {\n      return nanoid();\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    parentId = _React$useState2[0];\n  var _React$useState3 = React.useState(new Map()),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    preventedRoutesMap = _React$useState4[0],\n    setPreventedRoutesMap = _React$useState4[1];\n  var navigation = React.useContext(NavigationHelpersContext);\n  var route = React.useContext(NavigationRouteContext);\n  var preventRemoveContextValue = React.useContext(PreventRemoveContext);\n\n  var setParentPrevented = preventRemoveContextValue === null || preventRemoveContextValue === void 0 ? void 0 : preventRemoveContextValue.setPreventRemove;\n  var setPreventRemove = useLatestCallback(function (id, routeKey, preventRemove) {\n    if (preventRemove && (navigation == null || navigation !== null && navigation !== void 0 && navigation.getState().routes.every(function (route) {\n      return route.key !== routeKey;\n    }))) {\n      throw new Error(\"Couldn't find a route with the key \" + routeKey + \". Is your component inside NavigationContent?\");\n    }\n    setPreventedRoutesMap(function (prevPrevented) {\n      var _prevPrevented$get, _prevPrevented$get2;\n\n      if (routeKey === ((_prevPrevented$get = prevPrevented.get(id)) === null || _prevPrevented$get === void 0 ? void 0 : _prevPrevented$get.routeKey) && preventRemove === ((_prevPrevented$get2 = prevPrevented.get(id)) === null || _prevPrevented$get2 === void 0 ? void 0 : _prevPrevented$get2.preventRemove)) {\n        return prevPrevented;\n      }\n      var nextPrevented = new Map(prevPrevented);\n      if (preventRemove) {\n        nextPrevented.set(id, {\n          routeKey: routeKey,\n          preventRemove: preventRemove\n        });\n      } else {\n        nextPrevented.delete(id);\n      }\n      return nextPrevented;\n    });\n  });\n  var isPrevented = _toConsumableArray(preventedRoutesMap.values()).some(function (_ref3) {\n    var preventRemove = _ref3.preventRemove;\n    return preventRemove;\n  });\n  React.useEffect(function () {\n    if ((route === null || route === void 0 ? void 0 : route.key) !== undefined && setParentPrevented !== undefined) {\n      setParentPrevented(parentId, route.key, isPrevented);\n      return function () {\n        setParentPrevented(parentId, route.key, false);\n      };\n    }\n    return;\n  }, [parentId, isPrevented, route === null || route === void 0 ? void 0 : route.key, setParentPrevented]);\n  var value = React.useMemo(function () {\n    return {\n      setPreventRemove: setPreventRemove,\n      preventedRoutes: transformPreventedRoutes(preventedRoutesMap)\n    };\n  }, [setPreventRemove, preventedRoutesMap]);\n  return React.createElement(PreventRemoveContext.Provider, {\n    value: value\n  }, children);\n}","map":{"version":3,"sources":["PreventRemoveProvider.tsx"],"names":["nanoid","React","useLatestCallback","NavigationHelpersContext","NavigationRouteContext","PreventRemoveContext","transformPreventedRoutes","preventedRoutesMap","preventedRoutesToTransform","values","preventedRoutes","reduce","acc","routeKey","preventRemove","PreventRemoveProvider","children","parentId","useState","setPreventedRoutesMap","Map","navigation","useContext","route","preventRemoveContextValue","setParentPrevented","setPreventRemove","id","getState","routes","every","key","Error","prevPrevented","get","nextPrevented","set","delete","isPrevented","some","useEffect","undefined","value","useMemo"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\n\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport PreventRemoveContext, { PreventedRoutes } from './PreventRemoveContext';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype PreventedRoutesMap = Map<\n  string,\n  {\n    routeKey: string;\n    preventRemove: boolean;\n  }\n>;\n\n/**\n * Util function to transform map of prevented routes to a simpler object.\n */\nconst transformPreventedRoutes = (\n  preventedRoutesMap: PreventedRoutesMap\n): PreventedRoutes => {\n  const preventedRoutesToTransform = [...preventedRoutesMap.values()];\n\n  const preventedRoutes = preventedRoutesToTransform.reduce<PreventedRoutes>(\n    (acc, { routeKey, preventRemove }) => {\n      acc[routeKey] = {\n        preventRemove: acc[routeKey]?.preventRemove || preventRemove,\n      };\n      return acc;\n    },\n    {}\n  );\n\n  return preventedRoutes;\n};\n\n/**\n * Component used for managing which routes have to be prevented from removal in native-stack.\n */\nexport default function PreventRemoveProvider({ children }: Props) {\n  const [parentId] = React.useState(() => nanoid());\n  const [preventedRoutesMap, setPreventedRoutesMap] =\n    React.useState<PreventedRoutesMap>(new Map());\n\n  const navigation = React.useContext(NavigationHelpersContext);\n  const route = React.useContext(NavigationRouteContext);\n\n  const preventRemoveContextValue = React.useContext(PreventRemoveContext);\n  // take `setPreventRemove` from parent context - if exist it means we're in a nested context\n  const setParentPrevented = preventRemoveContextValue?.setPreventRemove;\n\n  const setPreventRemove = useLatestCallback(\n    (id: string, routeKey: string, preventRemove: boolean): void => {\n      if (\n        preventRemove &&\n        (navigation == null ||\n          navigation\n            ?.getState()\n            .routes.every((route) => route.key !== routeKey))\n      ) {\n        throw new Error(\n          `Couldn't find a route with the key ${routeKey}. Is your component inside NavigationContent?`\n        );\n      }\n\n      setPreventedRoutesMap((prevPrevented) => {\n        // values haven't changed - do nothing\n        if (\n          routeKey === prevPrevented.get(id)?.routeKey &&\n          preventRemove === prevPrevented.get(id)?.preventRemove\n        ) {\n          return prevPrevented;\n        }\n\n        const nextPrevented = new Map(prevPrevented);\n\n        if (preventRemove) {\n          nextPrevented.set(id, {\n            routeKey,\n            preventRemove,\n          });\n        } else {\n          nextPrevented.delete(id);\n        }\n\n        return nextPrevented;\n      });\n    }\n  );\n\n  const isPrevented = [...preventedRoutesMap.values()].some(\n    ({ preventRemove }) => preventRemove\n  );\n\n  React.useEffect(() => {\n    if (route?.key !== undefined && setParentPrevented !== undefined) {\n      // when route is defined (and setParentPrevented) it means we're in a nested stack\n      // route.key then will be the route key of parent\n      setParentPrevented(parentId, route.key, isPrevented);\n      return () => {\n        setParentPrevented(parentId, route.key, false);\n      };\n    }\n\n    return;\n  }, [parentId, isPrevented, route?.key, setParentPrevented]);\n\n  const value = React.useMemo(\n    () => ({\n      setPreventRemove,\n      preventedRoutes: transformPreventedRoutes(preventedRoutesMap),\n    }),\n    [setPreventRemove, preventedRoutesMap]\n  );\n\n  return (\n    <PreventRemoveContext.Provider value={value}>\n      {children}\n    </PreventRemoveContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}