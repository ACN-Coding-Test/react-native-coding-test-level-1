{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport Box from \"../../primitives/Box\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useFormControlContext } from \"./useFormControl\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { combineContextAndProps } from \"../../../utils\";\nvar FormControlHelperText = function FormControlHelperText(props, ref) {\n  var formControlContext = useFormControlContext();\n  var combinedProps = combineContextAndProps(formControlContext, props);\n  var resolvedProps = usePropsResolution('FormControlHelperText', combinedProps, {\n    isDisabled: combinedProps.isDisabled,\n    isReadOnly: combinedProps.isReadOnly,\n    isInvalid: combinedProps.isInvalid\n  });\n\n  React.useEffect(function () {\n    resolvedProps === null || resolvedProps === void 0 ? void 0 : resolvedProps.setHasHelpText(true);\n    return function () {\n      resolvedProps === null || resolvedProps === void 0 ? void 0 : resolvedProps.setHasHelpText(false);\n    };\n  });\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return React.createElement(Box, _extends({}, resolvedProps, {\n    nativeID: resolvedProps === null || resolvedProps === void 0 ? void 0 : resolvedProps.feedbackId,\n    ref: ref\n  }));\n};\nexport default memo(forwardRef(FormControlHelperText));","map":{"version":3,"sources":["FormControlHelperText.tsx"],"names":["React","memo","forwardRef","Box","usePropsResolution","useFormControlContext","useHasResponsiveProps","combineContextAndProps","FormControlHelperText","props","ref","formControlContext","combinedProps","resolvedProps","isDisabled","isReadOnly","isInvalid","useEffect","setHasHelpText","feedbackId"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,OAAOC,GAAP;AACA,SAASC,kBAAT;AACA,SAASC,qBAAT;AAEA,SAASC,qBAAT;AACA,SAASC,sBAAT;AAEA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqB,CACzBC,KAD4B,EAE5BC,GAF4B,EAGzB;EACH,IAAMC,kBAAkB,GAAGN,qBAAqB,EAAhD;EACA,IAAMO,aAAa,GAAGL,sBAAsB,CAACI,kBAAD,EAAqBF,KAArB,CAA5C;EACA,IAAMI,aAAa,GAAGT,kBAAkB,CACtC,uBADsC,EAEtCQ,aAFsC,EAGtC;IACEE,UAAU,EAAEF,aAAa,CAACE,UAD5B;IAEEC,UAAU,EAAEH,aAAa,CAACG,UAF5B;IAGEC,SAAS,EAAEJ,aAAa,CAH1B;EAAA,CAHsC,CAAxC;;EAWAZ,KAAK,CAACiB,SAANjB,CAAgB,YAAM;IACpBa,aAAa,KAAA,IAAbA,IAAAA,aAAa,KAAA,KAAA,CAAbA,GAAAA,KAAAA,CAAAA,GAAAA,aAAa,CAAEK,cAAfL,CAA8B,IAA9BA,CAAAA;IACA,OAAO,YAAM;MACXA,aAAa,KAAA,IAAbA,IAAAA,aAAa,KAAA,KAAA,CAAbA,GAAAA,KAAAA,CAAAA,GAAAA,aAAa,CAAEK,cAAfL,CAA8B,KAA9BA,CAAAA;IACD,CAFD;EAGD,CALDb,CAdG;;EAqBH,IAAIM,qBAAqB,CAACG,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EAED,OACE,KAAA,CAAA,aAAA,CAAC,GAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EAASI,aAAT,EAAA;IAAwB,QAAQ,EAAEA,aAAF,KAAA,IAAA,IAAEA,aAAF,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAEA,aAAa,CAAEM,UAAjD;IAA6D,GAAG,EAAET;EAAlE,CAAA,CAAA,CADF;AAGD,CA/BD;AAiCA,eAAeT,IAAI,CAACC,UAAU,CAACM,qBAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useFormControlContext } from './useFormControl';\nimport type { IFormControlHelperTextProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps } from '../../../utils';\n\nconst FormControlHelperText = (\n  props: IFormControlHelperTextProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const combinedProps = combineContextAndProps(formControlContext, props);\n  const resolvedProps = usePropsResolution(\n    'FormControlHelperText',\n    combinedProps,\n    {\n      isDisabled: combinedProps.isDisabled,\n      isReadOnly: combinedProps.isReadOnly,\n      isInvalid: combinedProps.isInvalid,\n      // isRequired: combinedProps.isRequired,\n    }\n  );\n\n  React.useEffect(() => {\n    resolvedProps?.setHasHelpText(true);\n    return () => {\n      resolvedProps?.setHasHelpText(false);\n    };\n  });\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box {...resolvedProps} nativeID={resolvedProps?.feedbackId} ref={ref} />\n  );\n};\n\nexport default memo(forwardRef(FormControlHelperText));\n"]},"metadata":{},"sourceType":"module"}