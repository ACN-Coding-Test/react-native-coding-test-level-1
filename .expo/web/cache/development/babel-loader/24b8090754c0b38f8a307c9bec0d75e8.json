{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Platform } from 'expo-modules-core';\nimport { getRecoveryPropsToSave } from \"./ErroRecoveryStore\";\nimport ExpoErrorRecovery from \"./ExpoErrorRecovery\";\nif (Platform.OS !== 'web') {\n  var globalHandler = ErrorUtils.getGlobalHandler();\n  ErrorUtils.setGlobalHandler(function _callee(error, isFatal) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!ExpoErrorRecovery.saveRecoveryProps) {\n              _context.next = 3;\n              break;\n            }\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave()));\n          case 3:\n            globalHandler(error, isFatal);\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n} else if (Platform.OS === 'web' && Platform.isDOMAvailable) {\n  window.addEventListener('error', function () {\n    ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n  });\n}","map":{"version":3,"sources":["../src/ErrorRecovery.fx.ts"],"names":[],"mappings":";AAAA,SAAS,QAAQ,QAAQ,mBAAmB;AAE5C,SAAS,sBAAsB;AAC/B,OAAO,iBAAiB;AAExB,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;EACzB,IAAM,aAAa,GAAG,UAAU,CAAC,gBAAgB,EAAE;EAGnD,UAAU,CAAC,gBAAgB,CAAC,iBAAO,KAAK,EAAE,OAAO;IAAA;MAAA;QAAA;UAAA;YAAA,KAC3C,iBAAiB,CAAC,iBAAiB;cAAA;cAAA;YAAA;YAAA;YAAA,iCAC/B,iBAAiB,CAAC,iBAAiB,CAAC,sBAAsB,EAAE,CAAC;UAAA;YAErE,aAAa,CAAC,KAAK,EAAE,OAAO,CAAC;UAAC;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAC/B,CAAC;CACH,MAAM,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,IAAI,QAAQ,CAAC,cAAc,EAAE;EAC3D,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,YAAK;IACpC,iBAAiB,CAAC,iBAAiB,CAAC,sBAAsB,EAAE,CAAC;EAC/D,CAAC,CAAC;AACH","sourcesContent":["import { Platform } from 'expo-modules-core';\n\nimport { getRecoveryPropsToSave } from './ErroRecoveryStore';\nimport ExpoErrorRecovery from './ExpoErrorRecovery';\n\nif (Platform.OS !== 'web') {\n  const globalHandler = ErrorUtils.getGlobalHandler();\n  // ErrorUtils came from react-native\n  // https://github.com/facebook/react-native/blob/1151c096dab17e5d9a6ac05b61aacecd4305f3db/Libraries/vendor/core/ErrorUtils.js#L25\n  ErrorUtils.setGlobalHandler(async (error, isFatal) => {\n    if (ExpoErrorRecovery.saveRecoveryProps) {\n      await ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n    }\n    globalHandler(error, isFatal);\n  });\n} else if (Platform.OS === 'web' && Platform.isDOMAvailable) {\n  window.addEventListener('error', () => {\n    ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}