{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { useTypeaheadReducer } from \"./reducer\";\nimport React, { useEffect } from 'react';\nimport * as stateChangeTypes from \"./types\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport { dropdownDefaultStateValues, getDefaultValue } from \"./utils\";\nfunction isControlledProp(props, key) {\n  return props[key] !== undefined;\n}\nexport function useTypeahead(props) {\n  var defaultValues = _objectSpread({}, dropdownDefaultStateValues);\n  defaultValues.isOpen = getDefaultValue(props, 'isOpen');\n  var _React$useReducer = React.useReducer(useTypeaheadReducer, defaultValues),\n    _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n    state = _React$useReducer2[0],\n    dispatch = _React$useReducer2[1];\n  var dispatchWithProps = function dispatchWithProps(object) {\n    dispatch(_objectSpread(_objectSpread({}, object), {}, {\n      props: props\n    }));\n  };\n  var inputValue = state.inputValue,\n    isOpen = state.isOpen;\n  var items = props.items,\n    onInputValueChange = props.onInputValueChange,\n    onSelectedItemChange = props.onSelectedItemChange,\n    selectedItem = props.selectedItem,\n    itemToString = props.itemToString;\n  var isControlled = isControlledProp(props, 'selectedItem');\n  useEffect(function () {\n    if (isControlled) {\n      dispatch({\n        type: stateChangeTypes.ControlledPropUpdatedSelectedItem,\n        inputValue: itemToString(selectedItem)\n      });\n    }\n  }, [selectedItem, isControlled, itemToString]);\n  var onChangeText = function onChangeText(text) {\n    onInputValueChange === null || onInputValueChange === void 0 ? void 0 : onInputValueChange({\n      inputValue: text\n    });\n    dispatchWithProps({\n      type: stateChangeTypes.InputChange,\n      inputValue: text\n    });\n  };\n  var handleItemSelect = function handleItemSelect(item, index) {\n    onSelectedItemChange === null || onSelectedItemChange === void 0 ? void 0 : onSelectedItemChange(item);\n    dispatchWithProps({\n      type: stateChangeTypes.ItemClick,\n      index: index\n    });\n    Keyboard.dismiss();\n  };\n  var getMenuItemProps = function getMenuItemProps(item, index) {\n    return {\n      onPress: function onPress() {\n        return handleItemSelect(item, index);\n      },\n      accessible: true,\n      accessiblityRole: 'menuitem'\n    };\n  };\n  var getMenuProps = function getMenuProps() {\n    return {\n      accessible: true,\n      accessibilityRole: 'menu',\n      accessibilityHint: \"Showing \".concat(items.length, \" records\")\n    };\n  };\n  var getToggleButtonProps = function getToggleButtonProps() {\n    return {\n      onPress: function onPress() {\n        dispatchWithProps({\n          type: stateChangeTypes.ToggleButtonClick\n        });\n      }\n    };\n  };\n  var getInputProps = function getInputProps(propInputVal, propOnchangeText) {\n    return {\n      onChangeText: propInputVal ? propOnchangeText : onChangeText,\n      value: propInputVal ? propInputVal : inputValue,\n      accessibilityRole: 'combobox',\n      accessibilityLabel: 'Typeahead input',\n      accessibilityState: {\n        expanded: isOpen\n      }\n    };\n  };\n  return {\n    getInputProps: getInputProps,\n    getMenuItemProps: getMenuItemProps,\n    getMenuProps: getMenuProps,\n    getToggleButtonProps: getToggleButtonProps,\n    isOpen: isOpen\n  };\n}","map":{"version":3,"sources":["useTypeahead.ts"],"names":["useTypeaheadReducer","React","useEffect","stateChangeTypes","dropdownDefaultStateValues","getDefaultValue","isControlledProp","props","key","undefined","useTypeahead","defaultValues","isOpen","state","dispatch","useReducer","dispatchWithProps","object","inputValue","items","onInputValueChange","onSelectedItemChange","selectedItem","itemToString","isControlled","type","ControlledPropUpdatedSelectedItem","onChangeText","text","InputChange","handleItemSelect","item","index","ItemClick","Keyboard","dismiss","getMenuItemProps","onPress","accessible","accessiblityRole","getMenuProps","accessibilityRole","accessibilityHint","length","getToggleButtonProps","ToggleButtonClick","getInputProps","propInputVal","propOnchangeText","value","accessibilityLabel","accessibilityState","expanded"],"mappings":"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","sourcesContent":["import { useTypeaheadReducer } from './reducer';\nimport React, { useEffect } from 'react';\nimport * as stateChangeTypes from './types';\nimport type { AccessibilityRole } from 'react-native';\nimport { Keyboard } from 'react-native';\nimport { dropdownDefaultStateValues, getDefaultValue } from './utils';\n\nfunction isControlledProp(props: any, key: string) {\n  return props[key] !== undefined;\n}\n\nimport type { IUseTypeaheadProps } from './types';\n\nexport function useTypeahead(props: IUseTypeaheadProps) {\n  let defaultValues = { ...dropdownDefaultStateValues };\n  defaultValues.isOpen = getDefaultValue(props, 'isOpen');\n\n  const [state, dispatch] = React.useReducer(\n    useTypeaheadReducer,\n    defaultValues\n  );\n\n  const dispatchWithProps = (object: any) => {\n    dispatch({ ...object, props });\n  };\n\n  const { inputValue, isOpen } = state;\n\n  const {\n    items,\n    onInputValueChange,\n    onSelectedItemChange,\n    selectedItem,\n    itemToString,\n  } = props;\n\n  const isControlled = isControlledProp(props, 'selectedItem');\n\n  useEffect(() => {\n    if (isControlled) {\n      dispatch({\n        type: stateChangeTypes.ControlledPropUpdatedSelectedItem,\n        inputValue: itemToString(selectedItem),\n      });\n    }\n  }, [selectedItem, isControlled, itemToString]);\n\n  const onChangeText = (text: string) => {\n    onInputValueChange?.({ inputValue: text });\n    dispatchWithProps({ type: stateChangeTypes.InputChange, inputValue: text });\n  };\n\n  const handleItemSelect = (item: any, index: number) => {\n    onSelectedItemChange?.(item);\n    dispatchWithProps({ type: stateChangeTypes.ItemClick, index });\n    Keyboard.dismiss();\n  };\n\n  const getMenuItemProps = (item: any, index: number) => {\n    return {\n      onPress: () => handleItemSelect(item, index),\n      accessible: true,\n      accessiblityRole: 'menuitem' as AccessibilityRole,\n    };\n  };\n\n  const getMenuProps = () => {\n    return {\n      accessible: true,\n      accessibilityRole: 'menu' as AccessibilityRole,\n      accessibilityHint: `Showing ${items.length} records`,\n    };\n  };\n\n  const getToggleButtonProps = () => {\n    return {\n      onPress: () => {\n        dispatchWithProps({ type: stateChangeTypes.ToggleButtonClick });\n      },\n    };\n  };\n\n  const getInputProps = (propInputVal?: any, propOnchangeText?: any) => {\n    return {\n      onChangeText: propInputVal ? propOnchangeText : onChangeText,\n      value: propInputVal ? propInputVal : inputValue,\n      accessibilityRole: 'combobox' as AccessibilityRole,\n      accessibilityLabel: 'Typeahead input',\n      accessibilityState: {\n        expanded: isOpen,\n      },\n    };\n  };\n\n  return {\n    getInputProps,\n    getMenuItemProps,\n    getMenuProps,\n    getToggleButtonProps,\n    isOpen,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}