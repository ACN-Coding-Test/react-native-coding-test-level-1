{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport NavigationContext from \"./NavigationContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nimport SceneView from \"./SceneView\";\nimport useNavigationCache from \"./useNavigationCache\";\nimport useRouteCache from \"./useRouteCache\";\n\nexport default function useDescriptors(_ref) {\n  var state = _ref.state,\n    screens = _ref.screens,\n    navigation = _ref.navigation,\n    screenOptions = _ref.screenOptions,\n    defaultScreenOptions = _ref.defaultScreenOptions,\n    onAction = _ref.onAction,\n    getState = _ref.getState,\n    setState = _ref.setState,\n    addListener = _ref.addListener,\n    addKeyedListener = _ref.addKeyedListener,\n    onRouteFocus = _ref.onRouteFocus,\n    router = _ref.router,\n    emitter = _ref.emitter;\n  var _React$useState = React.useState({}),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    options = _React$useState2[0],\n    setOptions = _React$useState2[1];\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n    onDispatchAction = _React$useContext.onDispatchAction,\n    onOptionsChange = _React$useContext.onOptionsChange,\n    stackRef = _React$useContext.stackRef;\n  var context = React.useMemo(function () {\n    return {\n      navigation: navigation,\n      onAction: onAction,\n      addListener: addListener,\n      addKeyedListener: addKeyedListener,\n      onRouteFocus: onRouteFocus,\n      onDispatchAction: onDispatchAction,\n      onOptionsChange: onOptionsChange,\n      stackRef: stackRef\n    };\n  }, [navigation, onAction, addListener, addKeyedListener, onRouteFocus, onDispatchAction, onOptionsChange, stackRef]);\n  var navigations = useNavigationCache({\n    state: state,\n    getState: getState,\n    navigation: navigation,\n    setOptions: setOptions,\n    router: router,\n    emitter: emitter\n  });\n  var routes = useRouteCache(state.routes);\n  return routes.reduce(function (acc, route, i) {\n    var config = screens[route.name];\n    var screen = config.props;\n    var navigation = navigations[route.key];\n    var optionsList = [\n    screenOptions].concat(_toConsumableArray(config.options ? config.options.filter(Boolean) : []), [\n    screen.options,\n    options[route.key]]);\n    var customOptions = optionsList.reduce(function (acc, curr) {\n      return _extends(acc, typeof curr !== 'function' ? curr : curr({\n        route: route,\n        navigation: navigation\n      }));\n    }, {});\n    var mergedOptions = _objectSpread(_objectSpread({}, typeof defaultScreenOptions === 'function' ?\n    defaultScreenOptions({\n      route: route,\n      navigation: navigation,\n      options: customOptions\n    }) : defaultScreenOptions), customOptions);\n    var clearOptions = function clearOptions() {\n      return setOptions(function (o) {\n        if (route.key in o) {\n          var _route$key = route.key,\n            _ = o[_route$key],\n            rest = _objectWithoutProperties(o, [_route$key].map(_toPropertyKey));\n          return rest;\n        }\n        return o;\n      });\n    };\n    acc[route.key] = {\n      route: route,\n      navigation: navigation,\n      render: function render() {\n        return React.createElement(NavigationBuilderContext.Provider, {\n          key: route.key,\n          value: context\n        }, React.createElement(NavigationContext.Provider, {\n          value: navigation\n        }, React.createElement(NavigationRouteContext.Provider, {\n          value: route\n        }, React.createElement(SceneView, {\n          navigation: navigation,\n          route: route,\n          screen: screen,\n          routeState: state.routes[i].state,\n          getState: getState,\n          setState: setState,\n          options: mergedOptions,\n          clearOptions: clearOptions\n        }))));\n      },\n      options: mergedOptions\n    };\n    return acc;\n  }, {});\n}","map":{"version":3,"sources":["useDescriptors.tsx"],"names":["React","NavigationBuilderContext","NavigationContext","NavigationRouteContext","SceneView","useNavigationCache","useRouteCache","useDescriptors","state","screens","navigation","screenOptions","defaultScreenOptions","onAction","getState","setState","addListener","addKeyedListener","onRouteFocus","router","emitter","options","setOptions","useState","onDispatchAction","onOptionsChange","stackRef","useContext","context","useMemo","navigations","routes","reduce","acc","route","i","config","name","screen","props","key","optionsList","filter","Boolean","customOptions","curr","mergedOptions","clearOptions","o","_","rest","render"],"mappings":"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","sourcesContent":["import type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  AddKeyedListener,\n  AddListener,\n} from './NavigationBuilderContext';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport SceneView from './SceneView';\nimport type {\n  Descriptor,\n  EventMapBase,\n  NavigationHelpers,\n  NavigationProp,\n  RouteConfig,\n  RouteProp,\n} from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport useRouteCache from './useRouteCache';\n\nexport type ScreenConfigWithParent<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  keys: (string | undefined)[];\n  options: (ScreenOptionsOrCallback<ScreenOptions> | undefined)[] | undefined;\n  props: RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>;\n};\n\ntype ScreenOptionsOrCallback<ScreenOptions extends {}> =\n  | ScreenOptions\n  | ((props: {\n      route: RouteProp<ParamListBase, string>;\n      navigation: any;\n    }) => ScreenOptions);\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  state: State;\n  screens: Record<\n    string,\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?: ScreenOptionsOrCallback<ScreenOptions>;\n  defaultScreenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase>;\n        navigation: any;\n        options: ScreenOptions;\n      }) => ScreenOptions);\n  onAction: (action: NavigationAction) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addListener: AddListener;\n  addKeyedListener: AddKeyedListener;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMap>;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  defaultScreenOptions,\n  onAction,\n  getState,\n  setState,\n  addListener,\n  addKeyedListener,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { onDispatchAction, onOptionsChange, stackRef } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n      stackRef,\n    }),\n    [\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n      stackRef,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions, EventMap>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  const routes = useRouteCache(state.routes);\n\n  return routes.reduce<\n    Record<\n      string,\n      Descriptor<\n        ScreenOptions,\n        NavigationProp<\n          ParamListBase,\n          string,\n          string | undefined,\n          State,\n          ScreenOptions,\n          EventMap\n        > &\n          ActionHelpers,\n        RouteProp<ParamListBase>\n      >\n    >\n  >((acc, route, i) => {\n    const config = screens[route.name];\n    const screen = config.props;\n    const navigation = navigations[route.key];\n\n    const optionsList = [\n      // The default `screenOptions` passed to the navigator\n      screenOptions,\n      // The `screenOptions` props passed to `Group` elements\n      ...((config.options\n        ? config.options.filter(Boolean)\n        : []) as ScreenOptionsOrCallback<ScreenOptions>[]),\n      // The `options` prop passed to `Screen` elements,\n      screen.options,\n      // The options set via `navigation.setOptions`\n      options[route.key],\n    ];\n\n    const customOptions = optionsList.reduce<ScreenOptions>(\n      (acc, curr) =>\n        Object.assign(\n          acc,\n          typeof curr !== 'function' ? curr : curr({ route, navigation })\n        ),\n      {} as ScreenOptions\n    );\n\n    const mergedOptions = {\n      ...(typeof defaultScreenOptions === 'function'\n        ? // @ts-expect-error: ts gives incorrect error here\n          defaultScreenOptions({\n            route,\n            navigation,\n            options: customOptions,\n          })\n        : defaultScreenOptions),\n      ...customOptions,\n    };\n\n    const clearOptions = () =>\n      setOptions((o) => {\n        if (route.key in o) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const { [route.key]: _, ...rest } = o;\n          return rest;\n        }\n\n        return o;\n      });\n\n    acc[route.key] = {\n      route,\n      // @ts-expect-error: it's missing action helpers, fix later\n      navigation,\n      render() {\n        return (\n          <NavigationBuilderContext.Provider key={route.key} value={context}>\n            <NavigationContext.Provider value={navigation}>\n              <NavigationRouteContext.Provider value={route}>\n                <SceneView\n                  navigation={navigation}\n                  route={route}\n                  screen={screen}\n                  routeState={state.routes[i].state}\n                  getState={getState}\n                  setState={setState}\n                  options={mergedOptions}\n                  clearOptions={clearOptions}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          </NavigationBuilderContext.Provider>\n        );\n      },\n      options: mergedOptions as ScreenOptions,\n    };\n\n    return acc;\n  }, {});\n}\n"]},"metadata":{},"sourceType":"module"}