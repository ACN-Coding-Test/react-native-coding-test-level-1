{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"style\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nvar PortalContext = React.createContext(null);\nvar globalOverlayCounter = 0;\nexport function PortalProvider(props) {\n  var _React$useState = React.useState([]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    items = _React$useState2[0],\n    setItems = _React$useState2[1];\n  var setOverlayItem = function setOverlayItem(item) {\n    var overlayId = ++globalOverlayCounter;\n    setItems(function (prev) {\n      return prev.concat([{\n        id: overlayId,\n        node: item\n      }]);\n    });\n    return overlayId;\n  };\n  var updateOverlayItem = function updateOverlayItem(id, node) {\n    setItems(function (prev) {\n      return prev.map(function (item) {\n        if (item.id === id) {\n          return {\n            id: id,\n            node: node\n          };\n        }\n        return item;\n      });\n    });\n  };\n  var removeOverlayItem = function removeOverlayItem(id) {\n    setItems(function (prev) {\n      var newItems = prev.filter(function (item) {\n        return item.id !== id;\n      });\n      return newItems;\n    });\n  };\n  return React.createElement(PortalContext.Provider, {\n    value: {\n      items: items,\n      setOverlayItem: setOverlayItem,\n      removeOverlayItem: removeOverlayItem,\n      updateOverlayItem: updateOverlayItem\n    }\n  }, props.children, items.map(function (item) {\n    return React.createElement(React.Fragment, {\n      key: item.id\n    }, item.node);\n  }));\n}\nfunction OverlayView(_ref) {\n  var style = _ref.style,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return React.createElement(View, _extends({\n    pointerEvents: \"box-none\",\n    style: [StyleSheet.absoluteFill, style],\n    collapsable: false\n  }, props));\n}\nexport var OverlayProvider = PortalProvider;\nexport function OverlayContainer(props) {\n  var context = usePortalProvider();\n  var overlayId = React.useRef(undefined);\n  var contents = React.createElement(OverlayView, props);\n  useEffect(function () {\n    if (overlayId.current === undefined) {\n      overlayId.current = context === null || context === void 0 ? void 0 : context.setOverlayItem(contents);\n    } else {\n      if (overlayId.current) {\n        context === null || context === void 0 ? void 0 : context.updateOverlayItem(overlayId.current, contents);\n      }\n    }\n  },\n  [props]);\n\n  useEffect(function () {\n    return function () {\n      if (overlayId.current) {\n        context === null || context === void 0 ? void 0 : context.removeOverlayItem(overlayId.current);\n      }\n    };\n  }, []);\n  return null;\n}\nfunction usePortalProvider() {\n  var context = React.useContext(PortalContext);\n  return context;\n}","map":{"version":3,"sources":["Portal.tsx"],"names":["React","useEffect","PortalContext","createContext","globalOverlayCounter","PortalProvider","props","items","setItems","useState","setOverlayItem","item","overlayId","prev","concat","id","node","updateOverlayItem","map","removeOverlayItem","newItems","filter","children","OverlayView","style","StyleSheet","absoluteFill","OverlayProvider","OverlayContainer","context","usePortalProvider","useRef","undefined","contents","current","useContext"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAAA;AAAA;AAqBA,IAAMC,aAAa,GAAGF,KAAK,CAACG,aAANH,CAA0C,IAA1CA,CAAtB;AAEA,IAAII,oBAAoB,GAAG,CAA3B;AAEA,OAAO,SAASC,cAAT,CAAwBC,KAAxB,EAAwD;EAC7D,sBAA0BN,KAAK,CAACS,QAANT,CAAmC,EAAnCA,CAA1B;IAAA;IAAOO,KAAD;IAAQC,QAAR;EAEN,IAAME,cAAc,GAAIC,SAAlBD,cAAc,CAAIC,IAAD,EAAqB;IAC1C,IAAMC,SAAS,GAAG,EAAER,oBAApB;IACAI,QAAQ,CAAEK,UAAAA,IAAD;MAAA,OAAU,IAAI,CAACC,MAAL,CAAY,CAAC;QAAEC,EAAE,EAAEH,SAAN;QAAiBI,IAAI,EAAEL;MAAvB,CAAD,CAAZ,CAAX;IAAA,EAARH;IACA,OAAOI,SAAP;EACD,CAJD;EAMA,IAAMK,iBAAiB,GAAG,SAApBA,iBAAiB,CAAIF,EAAD,EAAaC,IAAb,EAAiC;IACzDR,QAAQ,CAAEK,UAAAA,IAAD;MAAA,OACP,IAAI,CAACK,GAAL,CAAUP,UAAAA,IAAD,EAAU;QACjB,IAAIA,IAAI,CAACI,EAALJ,KAAYI,EAAhB,EAAoB;UAClB,OAAO;YAAEA,EAAF,EAAEA,EAAF;YAAMC,IAAAA,EAAAA;UAAN,CAAP;QACD;QACD,OAAOL,IAAP;MACD,CALD,CADM;IAAA,EAARH;EAQD,CATD;EAWA,IAAMW,iBAAiB,GAAIJ,SAArBI,iBAAiB,CAAIJ,EAAD,EAAgB;IACxCP,QAAQ,CAAEK,UAAAA,IAAD,EAAU;MACjB,IAAMO,QAAQ,GAAGP,IAAI,CAACQ,MAALR,CAAaF,UAAAA,IAAD;QAAA,OAAUA,IAAI,CAACI,EAALJ,KAAYI,EAAlCF;MAAAA,EAAjB;MACA,OAAOO,QAAP;IACD,CAHO,CAARZ;EAID,CALD;EAOA,OACE,KAAA,CAAA,aAAA,CAAC,aAAD,CAAe,QAAf,EAAA;IACE,KAAK,EAAE;MAAED,KAAF,EAAEA,KAAF;MAASG,cAAT,EAASA,cAAT;MAAyBS,iBAAzB,EAAyBA,iBAAzB;MAA4CF,iBAAAA,EAAAA;IAA5C;EADT,CAAA,EAGGX,KAAK,CAACgB,QAHT,EAMG,KAAK,CAACJ,GAAN,CAAWP,UAAAA,IAAD,EAAU;IACnB,OAAO,KAAA,CAAA,aAAA,CAAC,KAAD,CAAO,QAAP,EAAA;MAAgB,GAAG,EAAEA,IAAI,CAACI;IAA1B,CAAA,EAA+BJ,IAAI,CAACK,IAApC,CAAP;EACD,CAFA,CANH,CADF;AAYD;AAED,SAASO,WAAT,OAA4D;EAAA,IAAtCC,KAAD,QAACA,KAAD;IAAWlB,KAAAA;EAC9B,OACE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAA,QAAA,CAAA;IACE,aAAa,EAAC,UADhB;IAEE,KAAK,EAAE,CAACmB,UAAU,CAACC,YAAZ,EAA0BF,KAA1B,CAFT;IAGE,WAAW,EAAE;EAHf,CAAA,EAIMlB,KAJN,CAAA,CADF;AAQD;AAED,OAAO,IAAMqB,eAAe,GAAGtB,cAAxB;AAEP,OAAO,SAASuB,gBAAT,CAA0BtB,KAA1B,EAAqD;EAC1D,IAAMuB,OAAO,GAAGC,iBAAiB,EAAjC;EACA,IAAMlB,SAAS,GAAGZ,KAAK,CAAC+B,MAAN/B,CAAiCgC,SAAjChC,CAAlB;EACA,IAAIiC,QAAQ,GAAG,KAAA,CAAA,aAAA,CAAC,WAAD,EAAiB3B,KAAjB,CAAf;EAEAL,SAAS,CACP,YAAM;IAEJ,IAAIW,SAAS,CAACsB,OAAVtB,KAAsBoB,SAA1B,EAAqC;MACnCpB,SAAS,CAACsB,OAAVtB,GAAoBiB,OAApBjB,KAAAA,IAAAA,IAAoBiB,OAApBjB,KAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAoBiB,OAAO,CAAEnB,cAATmB,CAAwBI,QAAxBJ,CAApBjB;IACD,CAFD,MAIK;MACH,IAAIA,SAAS,CAACsB,OAAd,EAAuB;QACrBL,OAAO,KAAA,IAAPA,IAAAA,OAAO,KAAA,KAAA,CAAPA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,CAAEZ,iBAATY,CAA2BjB,SAAS,CAACsB,OAArCL,EAA8CI,QAA9CJ,CAAAA;MACD;IACF;EACF,CAZM;EAcP,CAACvB,KAAD,CAdO,CALiD;;EAuB1DL,SAAS,CAAC,YAAM;IACd,OAAO,YAAM;MACX,IAAIW,SAAS,CAACsB,OAAd,EAAuB;QACrBL,OAAO,KAAA,IAAPA,IAAAA,OAAO,KAAA,KAAA,CAAPA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,CAAEV,iBAATU,CAA2BjB,SAAS,CAACsB,OAArCL,CAAAA;MACD;IACF,CAJD;EAKD,CANQ,EAMN,EANM,CAAT5B;EAQA,OAAO,IAAP;AACD;AAED,SAAS6B,iBAAT,GAA6B;EAC3B,IAAMD,OAAO,GAAG7B,KAAK,CAACmC,UAANnC,CAAiBE,aAAjBF,CAAhB;EACA,OAAO6B,OAAP;AACD","sourcesContent":["import React, { useEffect } from 'react';\nimport type { ReactNode } from 'react';\nimport { StyleSheet, View, ViewProps } from 'react-native';\n\ntype OverlayItem = {\n  id: number;\n  node: ReactNode;\n};\n\ninterface PortalContext {\n  items: Array<OverlayItem>;\n  setOverlayItem: (node: ReactNode) => number;\n  removeOverlayItem: (id: number) => void;\n  updateOverlayItem: (id: number, node: ReactNode) => void;\n}\n\ninterface ModalProviderProps extends ViewProps {\n  children: ReactNode;\n  provider?: boolean;\n}\n\nconst PortalContext = React.createContext<PortalContext | null>(null);\n\nlet globalOverlayCounter = 0;\n\nexport function PortalProvider(props: { children: ReactNode }) {\n  const [items, setItems] = React.useState<Array<OverlayItem>>([]);\n\n  const setOverlayItem = (item: ReactNode) => {\n    const overlayId = ++globalOverlayCounter;\n    setItems((prev) => prev.concat([{ id: overlayId, node: item }]));\n    return overlayId;\n  };\n\n  const updateOverlayItem = (id: number, node: ReactNode) => {\n    setItems((prev) =>\n      prev.map((item) => {\n        if (item.id === id) {\n          return { id, node };\n        }\n        return item;\n      })\n    );\n  };\n\n  const removeOverlayItem = (id: number) => {\n    setItems((prev) => {\n      const newItems = prev.filter((item) => item.id !== id);\n      return newItems;\n    });\n  };\n\n  return (\n    <PortalContext.Provider\n      value={{ items, setOverlayItem, removeOverlayItem, updateOverlayItem }}\n    >\n      {props.children}\n\n      {/* Render Overlays */}\n      {items.map((item) => {\n        return <React.Fragment key={item.id}>{item.node}</React.Fragment>;\n      })}\n    </PortalContext.Provider>\n  );\n}\n\nfunction OverlayView({style, ...props}: ModalProviderProps) {\n  return (\n    <View\n      pointerEvents=\"box-none\"\n      style={[StyleSheet.absoluteFill, style]}\n      collapsable={false}\n      {...props}\n    />\n  );\n}\n\nexport const OverlayProvider = PortalProvider;\n\nexport function OverlayContainer(props: ModalProviderProps) {\n  const context = usePortalProvider();\n  const overlayId = React.useRef<number | undefined>(undefined);\n  let contents = <OverlayView {...props} />;\n\n  useEffect(\n    () => {\n      // Mount\n      if (overlayId.current === undefined) {\n        overlayId.current = context?.setOverlayItem(contents);\n      }\n      // Update\n      else {\n        if (overlayId.current) {\n          context?.updateOverlayItem(overlayId.current, contents);\n        }\n      }\n    },\n    // To re-render the child\n    [props]\n  );\n\n  // Unmount\n  useEffect(() => {\n    return () => {\n      if (overlayId.current) {\n        context?.removeOverlayItem(overlayId.current);\n      }\n    };\n  }, []);\n\n  return null;\n}\n\nfunction usePortalProvider() {\n  const context = React.useContext(PortalContext);\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}