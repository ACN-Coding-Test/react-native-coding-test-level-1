{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"enabled\", \"layout\", \"style\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nexport default React.forwardRef(function CardSheet(_ref, ref) {\n  var enabled = _ref.enabled,\n    layout = _ref.layout,\n    style = _ref.style,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    fill = _React$useState2[0],\n    setFill = _React$useState2[1];\n  var _React$useState3 = React.useState('auto'),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    pointerEvents = _React$useState4[0],\n    setPointerEvents = _React$useState4[1];\n  React.useImperativeHandle(ref, function () {\n    return {\n      setPointerEvents: setPointerEvents\n    };\n  });\n  React.useEffect(function () {\n    if (typeof document === 'undefined' || !document.body) {\n      return;\n    }\n    var width = document.body.clientWidth;\n    var height = document.body.clientHeight;\n    setFill(width === layout.width && height === layout.height);\n  }, [layout.height, layout.width]);\n  return React.createElement(View, _extends({}, rest, {\n    pointerEvents: pointerEvents,\n    style: [enabled && fill ? styles.page : styles.card, style]\n  }));\n});\nvar styles = StyleSheet.create({\n  page: {\n    minHeight: '100%'\n  },\n  card: {\n    flex: 1,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA;AAAA;AAiB9B,eAAeA,KAAK,CAACC,UAAU,CAAsB,SAASC,SAAS,OAErEC,GAAG,EACH;EAAA,IAFEC,OAAO,GAA0BC,KAAjCD,OAAO;IAAEE,MAAM,GAAkBD,KAAxBC,MAAM;IAAEC,KAAK,GAAWF,KAAhBE,KAAK;IAAKC,gCAAMH;EAGnC,sBAAwBL,KAAK,CAACS,QAAQ,CAAC,KAAK,CAAC;IAAA;IAAtCC,IAAI;IAAEC,OAAO;EAGpB,uBACEX,KAAK,CAACS,QAAQ,CAA6B,MAAM,CAAC;IAAA;IAD7CG,aAAa;IAAEC,gBAAgB;EAGtCb,KAAK,CAACc,mBAAmB,CAACX,GAAG,EAAE,YAAM;IACnC,OAAO;MAAEU;IAAiB,CAAC;EAC7B,CAAC,CAAC;EAEFb,KAAK,CAACe,SAAS,CAAC,YAAM;IACpB,IAAI,OAAOC,QAAQ,KAAK,WAAW,IAAI,CAACA,QAAQ,CAACC,IAAI,EAAE;MAErD;IACF;IAEA,IAAMC,KAAK,GAAGF,QAAQ,CAACC,IAAI,CAACE,WAAW;IACvC,IAAMC,MAAM,GAAGJ,QAAQ,CAACC,IAAI,CAACI,YAAY;IAEzCV,OAAO,CAACO,KAAK,KAAKZ,MAAM,CAACY,KAAK,IAAIE,MAAM,KAAKd,MAAM,CAACc,MAAM,CAAC;EAC7D,CAAC,EAAE,CAACd,MAAM,CAACc,MAAM,EAAEd,MAAM,CAACY,KAAK,CAAC,CAAC;EAEjC,OACElB,oBAACsB,IAAI,eACCd,IAAI;IACRI,aAAa,EAAEA,aAAc;IAC7BL,KAAK,EAAE,CAACH,OAAO,IAAIM,IAAI,GAAGa,MAAM,CAACC,IAAI,GAAGD,MAAM,CAACE,IAAI,EAAElB,KAAK;EAAE,GAC5D;AAEN,CAAC,CAAC;AAEF,IAAMgB,MAAM,GAAGG,UAAU,CAACC,MAAM,CAAC;EAC/BH,IAAI,EAAE;IACJI,SAAS,EAAE;EACb,CAAC;EACDH,IAAI,EAAE;IACJI,IAAI,EAAE,CAAC;IACPC,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC","names":["React","forwardRef","CardSheet","ref","enabled","_ref","layout","style","rest","useState","fill","setFill","pointerEvents","setPointerEvents","useImperativeHandle","useEffect","document","body","width","clientWidth","height","clientHeight","View","styles","page","card","StyleSheet","create","minHeight","flex","overflow"],"sources":["C:\\Users\\sarah.anis.ismail\\OneDrive - Accenture\\Documents\\React Native\\react-native-coding-test-level-1\\node_modules\\@react-navigation\\stack\\src\\views\\Stack\\CardSheet.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, ViewProps } from 'react-native';\n\ntype Props = ViewProps & {\n  enabled: boolean;\n  layout: { width: number; height: number };\n  children: React.ReactNode;\n};\n\nexport type CardSheetRef = {\n  setPointerEvents: React.Dispatch<ViewProps['pointerEvents']>;\n};\n\n// This component will render a page which overflows the screen\n// if the container fills the body by comparing the size\n// This lets the document.body handle scrolling of the content\n// It's necessary for mobile browsers to be able to hide address bar on scroll\nexport default React.forwardRef<CardSheetRef, Props>(function CardSheet(\n  { enabled, layout, style, ...rest },\n  ref\n) {\n  const [fill, setFill] = React.useState(false);\n  // To avoid triggering a rerender in Card during animation we had to move\n  // the state to CardSheet. The `setPointerEvents` is then hoisted back to the Card.\n  const [pointerEvents, setPointerEvents] =\n    React.useState<ViewProps['pointerEvents']>('auto');\n\n  React.useImperativeHandle(ref, () => {\n    return { setPointerEvents };\n  });\n\n  React.useEffect(() => {\n    if (typeof document === 'undefined' || !document.body) {\n      // Only run when DOM is available\n      return;\n    }\n\n    const width = document.body.clientWidth;\n    const height = document.body.clientHeight;\n\n    setFill(width === layout.width && height === layout.height);\n  }, [layout.height, layout.width]);\n\n  return (\n    <View\n      {...rest}\n      pointerEvents={pointerEvents}\n      style={[enabled && fill ? styles.page : styles.card, style]}\n    />\n  );\n});\n\nconst styles = StyleSheet.create({\n  page: {\n    minHeight: '100%',\n  },\n  card: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}