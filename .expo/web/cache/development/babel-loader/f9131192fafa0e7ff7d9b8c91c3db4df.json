{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport * as React from 'react';\n\nexport default function useKeyedChildListeners() {\n  var _React$useRef = React.useRef(_extends(Object.create(null), {\n      getState: {},\n      beforeRemove: {}\n    })),\n    keyedListeners = _React$useRef.current;\n  var addKeyedListener = React.useCallback(function (type, key, listener) {\n    keyedListeners[type][key] = listener;\n    return function () {\n      keyedListeners[type][key] = undefined;\n    };\n  }, [keyedListeners]);\n  return {\n    keyedListeners: keyedListeners,\n    addKeyedListener: addKeyedListener\n  };\n}","map":{"version":3,"sources":["useKeyedChildListeners.tsx"],"names":["React","useKeyedChildListeners","current","keyedListeners","useRef","Object","create","getState","beforeRemove","addKeyedListener","useCallback","type","key","listener","undefined"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAOA,eAAe,SAASC,sBAAT,GAAkC;EAC/C,oBAAoC,KAAK,CAACG,MAAN,CAMlC,SAAcC,MAAM,CAACC,MAAPD,CAAc,IAAdA,CAAd,EAAmC;MACjCE,QAAQ,EAAE,CAAA,CADuB;MAEjCC,YAAY,EAAE,CAAA;IAFmB,CAAnC,CANkC,CAApC;IAAiBL,cAAAA,iBAATD,OAAO;EAYf,IAAMO,gBAAgB,GAAG,KAAK,CAACC,WAAN,CACvB,UACEC,IADF,EAEEC,GAFF,EAGEC,QAHF,EAIK;IAEHV,cAAc,CAACQ,IAAD,CAAdR,CAAqBS,GAArBT,CAAAA,GAA4BU,QAA5BV;IAEA,OAAO,YAAM;MAEXA,cAAc,CAACQ,IAAD,CAAdR,CAAqBS,GAArBT,CAAAA,GAA4BW,SAA5BX;IACD,CAHD;EAID,CAbsB,EAcvB,CAACA,cAAD,CAduB,CAAzB;EAiBA,OAAO;IACLA,cADK,EACLA,cADK;IAELM,gBAAAA,EAAAA;EAFK,CAAP;AAID","sourcesContent":["import * as React from 'react';\n\nimport type { KeyedListenerMap } from './NavigationBuilderContext';\n\n/**\n * Hook which lets child navigators add getters to be called for obtaining rehydrated state.\n */\nexport default function useKeyedChildListeners() {\n  const { current: keyedListeners } = React.useRef<{\n    [K in keyof KeyedListenerMap]: Record<\n      string,\n      KeyedListenerMap[K] | undefined\n    >;\n  }>(\n    Object.assign(Object.create(null), {\n      getState: {},\n      beforeRemove: {},\n    })\n  );\n\n  const addKeyedListener = React.useCallback(\n    <T extends keyof KeyedListenerMap>(\n      type: T,\n      key: string,\n      listener: KeyedListenerMap[T]\n    ) => {\n      // @ts-expect-error: according to ref stated above you can use `key` to index type\n      keyedListeners[type][key] = listener;\n\n      return () => {\n        // @ts-expect-error: according to ref stated above you can use `key` to index type\n        keyedListeners[type][key] = undefined;\n      };\n    },\n    [keyedListeners]\n  );\n\n  return {\n    keyedListeners,\n    addKeyedListener,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}