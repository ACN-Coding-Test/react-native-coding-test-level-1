{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { useRef as $eCAIO$useRef, useEffect as $eCAIO$useEffect, useMemo as $eCAIO$useMemo } from \"react\";\nimport { getFocusableTreeWalker as $eCAIO$getFocusableTreeWalker, focusSafely as $eCAIO$focusSafely } from \"@react-aria/focus\";\nimport { focusWithoutScrolling as $eCAIO$focusWithoutScrolling, useEvent as $eCAIO$useEvent, scrollIntoView as $eCAIO$scrollIntoView, mergeProps as $eCAIO$mergeProps, isAppleDevice as $eCAIO$isAppleDevice, isMac as $eCAIO$isMac } from \"@react-aria/utils\";\nimport { useLocale as $eCAIO$useLocale, useCollator as $eCAIO$useCollator } from \"@react-aria/i18n\";\nimport { usePress as $eCAIO$usePress, useLongPress as $eCAIO$useLongPress } from \"@react-aria/interactions\";\nfunction $feb5ffebff200149$export$d3e3bd3e26688c04(e) {\n  return $eCAIO$isAppleDevice() ? e.altKey : e.ctrlKey;\n}\nfunction $feb5ffebff200149$export$16792effe837dba3(e) {\n  if ($eCAIO$isMac()) return e.metaKey;\n  return e.ctrlKey;\n}\n\nvar $fb3050f43d946246$var$TYPEAHEAD_DEBOUNCE_WAIT_MS = 1000;\nfunction $fb3050f43d946246$export$e32c88dfddc6e1d8(options) {\n  var keyboardDelegate = options.keyboardDelegate,\n    selectionManager = options.selectionManager,\n    onTypeSelect = options.onTypeSelect;\n  var state = $eCAIO$useRef({\n    search: '',\n    timeout: null\n  }).current;\n  var onKeyDown = function onKeyDown(e) {\n    var character = $fb3050f43d946246$var$getStringForKey(e.key);\n    if (!character || e.ctrlKey || e.metaKey) return;\n    if (character === ' ' && state.search.trim().length > 0) {\n      e.preventDefault();\n      if (!('continuePropagation' in e)) e.stopPropagation();\n    }\n    state.search += character;\n    var key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey);\n    if (key == null) key = keyboardDelegate.getKeyForSearch(state.search);\n    if (key != null) {\n      selectionManager.setFocusedKey(key);\n      if (onTypeSelect) onTypeSelect(key);\n    }\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(function () {\n      state.search = '';\n    }, $fb3050f43d946246$var$TYPEAHEAD_DEBOUNCE_WAIT_MS);\n  };\n  return {\n    typeSelectProps: {\n      onKeyDownCapture: keyboardDelegate.getKeyForSearch ? onKeyDown : null\n    }\n  };\n}\nfunction $fb3050f43d946246$var$getStringForKey(key) {\n  if (key.length === 1 || !/^[A-Z]/i.test(key)) return key;\n  return '';\n}\nfunction $ae20dd8cbca75726$export$d6daf82dcd84e87c(options) {\n  var manager = options.selectionManager,\n    delegate = options.keyboardDelegate,\n    ref = options.ref,\n    _options$autoFocus = options.autoFocus,\n    autoFocus = _options$autoFocus === void 0 ? false : _options$autoFocus,\n    _options$shouldFocusW = options.shouldFocusWrap,\n    shouldFocusWrap = _options$shouldFocusW === void 0 ? false : _options$shouldFocusW,\n    _options$disallowEmpt = options.disallowEmptySelection,\n    disallowEmptySelection = _options$disallowEmpt === void 0 ? false : _options$disallowEmpt,\n    _options$disallowSele = options.disallowSelectAll,\n    disallowSelectAll = _options$disallowSele === void 0 ? false : _options$disallowSele,\n    _options$selectOnFocu = options.selectOnFocus,\n    selectOnFocus = _options$selectOnFocu === void 0 ? manager.selectionBehavior === 'replace' : _options$selectOnFocu,\n    _options$disallowType = options.disallowTypeAhead,\n    disallowTypeAhead = _options$disallowType === void 0 ? false : _options$disallowType,\n    shouldUseVirtualFocus = options.shouldUseVirtualFocus,\n    _options$allowsTabNav = options.allowsTabNavigation,\n    allowsTabNavigation = _options$allowsTabNav === void 0 ? false : _options$allowsTabNav,\n    isVirtualized = options.isVirtualized,\n    _options$scrollRef = options.scrollRef,\n    scrollRef = _options$scrollRef === void 0 ? ref : _options$scrollRef;\n  var _$eCAIO$useLocale = $eCAIO$useLocale(),\n    direction = _$eCAIO$useLocale.direction;\n  var onKeyDown = function onKeyDown(e) {\n    if (e.altKey && e.key === 'Tab') e.preventDefault();\n    if (!ref.current.contains(e.target)) return;\n    var navigateToKey = function navigateToKey(key, childFocus) {\n      if (key != null) {\n        manager.setFocusedKey(key, childFocus);\n        if (e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(key);else if (selectOnFocus && !$feb5ffebff200149$export$d3e3bd3e26688c04(e)) manager.replaceSelection(key);\n      }\n    };\n    switch (e.key) {\n      case 'ArrowDown':\n        if (delegate.getKeyBelow) {\n          var ref4, ref1;\n          e.preventDefault();\n          var nextKey = manager.focusedKey != null ? delegate.getKeyBelow(manager.focusedKey) : (ref4 = delegate.getFirstKey) === null || ref4 === void 0 ? void 0 : ref4.call(delegate);\n          if (nextKey == null && shouldFocusWrap) nextKey = (ref1 = delegate.getFirstKey) === null || ref1 === void 0 ? void 0 : ref1.call(delegate, manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case 'ArrowUp':\n        if (delegate.getKeyAbove) {\n          var ref2, ref3;\n          e.preventDefault();\n          var _nextKey = manager.focusedKey != null ? delegate.getKeyAbove(manager.focusedKey) : (ref2 = delegate.getLastKey) === null || ref2 === void 0 ? void 0 : ref2.call(delegate);\n          if (_nextKey == null && shouldFocusWrap) _nextKey = (ref3 = delegate.getLastKey) === null || ref3 === void 0 ? void 0 : ref3.call(delegate, manager.focusedKey);\n          navigateToKey(_nextKey);\n        }\n        break;\n      case 'ArrowLeft':\n        if (delegate.getKeyLeftOf) {\n          e.preventDefault();\n          var _nextKey2 = delegate.getKeyLeftOf(manager.focusedKey);\n          navigateToKey(_nextKey2, direction === 'rtl' ? 'first' : 'last');\n        }\n        break;\n      case 'ArrowRight':\n        if (delegate.getKeyRightOf) {\n          e.preventDefault();\n          var _nextKey3 = delegate.getKeyRightOf(manager.focusedKey);\n          navigateToKey(_nextKey3, direction === 'rtl' ? 'last' : 'first');\n        }\n        break;\n      case 'Home':\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          var firstKey = delegate.getFirstKey(manager.focusedKey, $feb5ffebff200149$export$16792effe837dba3(e));\n          manager.setFocusedKey(firstKey);\n          if ($feb5ffebff200149$export$16792effe837dba3(e) && e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(firstKey);else if (selectOnFocus) manager.replaceSelection(firstKey);\n        }\n        break;\n      case 'End':\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          var lastKey = delegate.getLastKey(manager.focusedKey, $feb5ffebff200149$export$16792effe837dba3(e));\n          manager.setFocusedKey(lastKey);\n          if ($feb5ffebff200149$export$16792effe837dba3(e) && e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(lastKey);else if (selectOnFocus) manager.replaceSelection(lastKey);\n        }\n        break;\n      case 'PageDown':\n        if (delegate.getKeyPageBelow) {\n          e.preventDefault();\n          var _nextKey4 = delegate.getKeyPageBelow(manager.focusedKey);\n          navigateToKey(_nextKey4);\n        }\n        break;\n      case 'PageUp':\n        if (delegate.getKeyPageAbove) {\n          e.preventDefault();\n          var _nextKey5 = delegate.getKeyPageAbove(manager.focusedKey);\n          navigateToKey(_nextKey5);\n        }\n        break;\n      case 'a':\n        if ($feb5ffebff200149$export$16792effe837dba3(e) && manager.selectionMode === 'multiple' && disallowSelectAll !== true) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case 'Escape':\n        e.preventDefault();\n        if (!disallowEmptySelection) manager.clearSelection();\n        break;\n      case 'Tab':\n        if (!allowsTabNavigation) {\n          if (e.shiftKey) ref.current.focus();else {\n            var walker = $eCAIO$getFocusableTreeWalker(ref.current, {\n              tabbable: true\n            });\n            var next;\n            var last;\n            do {\n              last = walker.lastChild();\n              if (last) next = last;\n            } while (last);\n            if (next && !next.contains(document.activeElement)) $eCAIO$focusWithoutScrolling(next);\n          }\n          break;\n        }\n    }\n  };\n  var scrollPos = $eCAIO$useRef({\n    top: 0,\n    left: 0\n  });\n  $eCAIO$useEvent(scrollRef, 'scroll', isVirtualized ? null : function () {\n    scrollPos.current = {\n      top: scrollRef.current.scrollTop,\n      left: scrollRef.current.scrollLeft\n    };\n  });\n  var onFocus = function onFocus(e) {\n    if (manager.isFocused) {\n      if (!e.currentTarget.contains(e.target)) manager.setFocused(false);\n      return;\n    }\n    if (!e.currentTarget.contains(e.target)) return;\n    manager.setFocused(true);\n    if (manager.focusedKey == null) {\n      var navigateToFirstKey = function navigateToFirstKey(key) {\n        if (key != null) {\n          manager.setFocusedKey(key);\n          if (selectOnFocus) manager.replaceSelection(key);\n        }\n      };\n      var relatedTarget = e.relatedTarget;\n      var _lastSelectedKey, _firstSelectedKey;\n      if (relatedTarget && e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING) navigateToFirstKey((_lastSelectedKey = manager.lastSelectedKey) !== null && _lastSelectedKey !== void 0 ? _lastSelectedKey : delegate.getLastKey());else navigateToFirstKey((_firstSelectedKey = manager.firstSelectedKey) !== null && _firstSelectedKey !== void 0 ? _firstSelectedKey : delegate.getFirstKey());\n    } else if (!isVirtualized) {\n      scrollRef.current.scrollTop = scrollPos.current.top;\n      scrollRef.current.scrollLeft = scrollPos.current.left;\n      var element = scrollRef.current.querySelector(\"[data-key=\\\"\" + manager.focusedKey + \"\\\"]\");\n      if (element) {\n        $eCAIO$focusWithoutScrolling(element);\n        $eCAIO$scrollIntoView(scrollRef.current, element);\n      }\n    }\n  };\n  var onBlur = function onBlur(e) {\n    if (!e.currentTarget.contains(e.relatedTarget)) manager.setFocused(false);\n  };\n  var autoFocusRef = $eCAIO$useRef(autoFocus);\n  $eCAIO$useEffect(function () {\n    if (autoFocusRef.current) {\n      var focusedKey = null;\n      if (autoFocus === 'first') focusedKey = delegate.getFirstKey();\n      if (autoFocus === 'last') focusedKey = delegate.getLastKey();\n      var selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) focusedKey = selectedKeys.values().next().value;\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n      if (focusedKey == null && !shouldUseVirtualFocus) $eCAIO$focusSafely(ref.current);\n    }\n    autoFocusRef.current = false;\n  }, []);\n  $eCAIO$useEffect(function () {\n    if (!isVirtualized && manager.focusedKey && (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current)) {\n      var element = scrollRef.current.querySelector(\"[data-key=\\\"\" + manager.focusedKey + \"\\\"]\");\n      if (element) $eCAIO$scrollIntoView(scrollRef.current, element);\n    }\n  }, [isVirtualized, scrollRef, manager.focusedKey]);\n  var handlers = {\n    onKeyDown: onKeyDown,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onMouseDown: function onMouseDown(e) {\n      if (scrollRef.current === e.target)\n        e.preventDefault();\n    }\n  };\n  var _$fb3050f43d946246$ex = $fb3050f43d946246$export$e32c88dfddc6e1d8({\n      keyboardDelegate: delegate,\n      selectionManager: manager\n    }),\n    typeSelectProps = _$fb3050f43d946246$ex.typeSelectProps;\n  if (!disallowTypeAhead) handlers = $eCAIO$mergeProps(typeSelectProps, handlers);\n  var tabIndex;\n  if (!shouldUseVirtualFocus) tabIndex = manager.focusedKey == null ? 0 : -1;\n  return {\n    collectionProps: _objectSpread(_objectSpread({}, handlers), {}, {\n      tabIndex: tabIndex\n    })\n  };\n}\nfunction $880e95eb8b93ba9a$export$ecf600387e221c37(options) {\n  var manager = options.selectionManager,\n    key = options.key,\n    ref = options.ref,\n    shouldSelectOnPressUp = options.shouldSelectOnPressUp,\n    isVirtualized = options.isVirtualized,\n    shouldUseVirtualFocus = options.shouldUseVirtualFocus,\n    focus = options.focus,\n    isDisabled = options.isDisabled,\n    onAction = options.onAction,\n    allowsDifferentPressOrigin = options.allowsDifferentPressOrigin;\n  var onSelect = function onSelect(e) {\n    if (e.pointerType === 'keyboard' && $feb5ffebff200149$export$d3e3bd3e26688c04(e)) manager.toggleSelection(key);else {\n      if (manager.selectionMode === 'none') return;\n      if (manager.selectionMode === 'single') {\n        if (manager.isSelected(key) && !manager.disallowEmptySelection) manager.toggleSelection(key);else manager.replaceSelection(key);\n      } else if (e && e.shiftKey) manager.extendSelection(key);else if (manager.selectionBehavior === 'toggle' || e && ($feb5ffebff200149$export$16792effe837dba3(e) || e.pointerType === 'touch' || e.pointerType === 'virtual'))\n        manager.toggleSelection(key);else manager.replaceSelection(key);\n    }\n  };\n  $eCAIO$useEffect(function () {\n    var isFocused = key === manager.focusedKey;\n    if (isFocused && manager.isFocused && !shouldUseVirtualFocus && document.activeElement !== ref.current) {\n      if (focus) focus();else $eCAIO$focusSafely(ref.current);\n    }\n  }, [ref, key, manager.focusedKey, manager.childFocusStrategy, manager.isFocused, shouldUseVirtualFocus]);\n  isDisabled = isDisabled || manager.isDisabled(key);\n  var itemProps = {};\n  if (!shouldUseVirtualFocus && !isDisabled) itemProps = {\n    tabIndex: key === manager.focusedKey ? 0 : -1,\n    onFocus: function onFocus(e) {\n      if (e.target === ref.current) manager.setFocusedKey(key);\n    }\n  };else if (isDisabled) itemProps.onMouseDown = function (e) {\n    e.preventDefault();\n  };\n  var allowsSelection = !isDisabled && manager.canSelectItem(key);\n  var allowsActions = onAction && !isDisabled;\n  var hasPrimaryAction = allowsActions && (manager.selectionBehavior === 'replace' ? !allowsSelection : manager.isEmpty);\n  var hasSecondaryAction = allowsActions && allowsSelection && manager.selectionBehavior === 'replace';\n  var hasAction = hasPrimaryAction || hasSecondaryAction;\n  var modality = $eCAIO$useRef(null);\n  var longPressEnabled = hasAction && allowsSelection;\n  var longPressEnabledOnPressStart = $eCAIO$useRef(false);\n  var hadPrimaryActionOnPressStart = $eCAIO$useRef(false);\n  var itemPressProps = {};\n  if (shouldSelectOnPressUp) {\n    itemPressProps.onPressStart = function (e) {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      if (e.pointerType === 'keyboard' && (!hasAction || $880e95eb8b93ba9a$var$isSelectionKey())) onSelect(e);\n    };\n    if (!allowsDifferentPressOrigin) itemPressProps.onPress = function (e) {\n      if (hasPrimaryAction || hasSecondaryAction && e.pointerType !== 'mouse') {\n        if (e.pointerType === 'keyboard' && !$880e95eb8b93ba9a$var$isActionKey()) return;\n        onAction();\n      } else if (e.pointerType !== 'keyboard') onSelect(e);\n    };else {\n      itemPressProps.onPressUp = function (e) {\n        if (e.pointerType !== 'keyboard') onSelect(e);\n      };\n      itemPressProps.onPress = hasPrimaryAction ? function () {\n        return onAction();\n      } : null;\n    }\n  } else {\n    itemPressProps.onPressStart = function (e) {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      hadPrimaryActionOnPressStart.current = hasPrimaryAction;\n      if (e.pointerType === 'mouse' && !hasPrimaryAction || e.pointerType === 'keyboard' && (!onAction || $880e95eb8b93ba9a$var$isSelectionKey())) onSelect(e);\n    };\n    itemPressProps.onPress = function (e) {\n      if (e.pointerType === 'touch' || e.pointerType === 'pen' || e.pointerType === 'virtual' || e.pointerType === 'keyboard' && hasAction && $880e95eb8b93ba9a$var$isActionKey() || e.pointerType === 'mouse' && hadPrimaryActionOnPressStart.current) {\n        if (hasAction) onAction();else onSelect(e);\n      }\n    };\n  }\n  if (!isVirtualized) itemProps['data-key'] = key;\n  itemPressProps.preventFocusOnPress = shouldUseVirtualFocus;\n  var _$eCAIO$usePress = $eCAIO$usePress(itemPressProps),\n    pressProps = _$eCAIO$usePress.pressProps,\n    isPressed = _$eCAIO$usePress.isPressed;\n  var onDoubleClick = hasSecondaryAction ? function (e) {\n    if (modality.current === 'mouse') {\n      e.stopPropagation();\n      e.preventDefault();\n      onAction();\n    }\n  } : undefined;\n  var _$eCAIO$useLongPress = $eCAIO$useLongPress({\n      isDisabled: !longPressEnabled,\n      onLongPress: function onLongPress(e) {\n        if (e.pointerType === 'touch') {\n          onSelect(e);\n          manager.setSelectionBehavior('toggle');\n        }\n      }\n    }),\n    longPressProps = _$eCAIO$useLongPress.longPressProps;\n  var onDragStartCapture = function onDragStartCapture(e) {\n    if (modality.current === 'touch' && longPressEnabledOnPressStart.current) e.preventDefault();\n  };\n  return {\n    itemProps: $eCAIO$mergeProps(itemProps, allowsSelection || hasPrimaryAction ? pressProps : {}, longPressEnabled ? longPressProps : {}, {\n      onDoubleClick: onDoubleClick,\n      onDragStartCapture: onDragStartCapture\n    }),\n    isPressed: isPressed,\n    isSelected: manager.isSelected(key),\n    isDisabled: isDisabled,\n    allowsSelection: allowsSelection,\n    hasAction: hasAction\n  };\n}\nfunction $880e95eb8b93ba9a$var$isActionKey() {\n  var event = window.event;\n  return (event === null || event === void 0 ? void 0 : event.key) === 'Enter';\n}\nfunction $880e95eb8b93ba9a$var$isSelectionKey() {\n  var event = window.event;\n  return (event === null || event === void 0 ? void 0 : event.key) === ' ' || (event === null || event === void 0 ? void 0 : event.code) === 'Space';\n}\nvar $2a25aae57d74318e$export$a05409b8bb224a5a = function () {\n  function $2a25aae57d74318e$export$a05409b8bb224a5a(collection, disabledKeys, ref, collator) {\n    _classCallCheck(this, $2a25aae57d74318e$export$a05409b8bb224a5a);\n    this.collection = collection;\n    this.disabledKeys = disabledKeys;\n    this.ref = ref;\n    this.collator = collator;\n  }\n  _createClass($2a25aae57d74318e$export$a05409b8bb224a5a, [{\n    key: \"getKeyBelow\",\n    value: function getKeyBelow(key) {\n      key = this.collection.getKeyAfter(key);\n      while (key != null) {\n        var item = this.collection.getItem(key);\n        if (item.type === 'item' && !this.disabledKeys.has(key)) return key;\n        key = this.collection.getKeyAfter(key);\n      }\n    }\n  }, {\n    key: \"getKeyAbove\",\n    value: function getKeyAbove(key) {\n      key = this.collection.getKeyBefore(key);\n      while (key != null) {\n        var item = this.collection.getItem(key);\n        if (item.type === 'item' && !this.disabledKeys.has(key)) return key;\n        key = this.collection.getKeyBefore(key);\n      }\n    }\n  }, {\n    key: \"getFirstKey\",\n    value: function getFirstKey() {\n      var key = this.collection.getFirstKey();\n      while (key != null) {\n        var item = this.collection.getItem(key);\n        if (item.type === 'item' && !this.disabledKeys.has(key)) return key;\n        key = this.collection.getKeyAfter(key);\n      }\n    }\n  }, {\n    key: \"getLastKey\",\n    value: function getLastKey() {\n      var key = this.collection.getLastKey();\n      while (key != null) {\n        var item = this.collection.getItem(key);\n        if (item.type === 'item' && !this.disabledKeys.has(key)) return key;\n        key = this.collection.getKeyBefore(key);\n      }\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      return this.ref.current.querySelector(\"[data-key=\\\"\" + key + \"\\\"]\");\n    }\n  }, {\n    key: \"getKeyPageAbove\",\n    value: function getKeyPageAbove(key) {\n      var menu = this.ref.current;\n      var item = this.getItem(key);\n      if (!item) return null;\n      var pageY = Math.max(0, item.offsetTop + item.offsetHeight - menu.offsetHeight);\n      while (item && item.offsetTop > pageY) {\n        key = this.getKeyAbove(key);\n        item = this.getItem(key);\n      }\n      return key;\n    }\n  }, {\n    key: \"getKeyPageBelow\",\n    value: function getKeyPageBelow(key) {\n      var menu = this.ref.current;\n      var item = this.getItem(key);\n      if (!item) return null;\n      var pageY = Math.min(menu.scrollHeight, item.offsetTop - item.offsetHeight + menu.offsetHeight);\n      while (item && item.offsetTop < pageY) {\n        key = this.getKeyBelow(key);\n        item = this.getItem(key);\n      }\n      return key;\n    }\n  }, {\n    key: \"getKeyForSearch\",\n    value: function getKeyForSearch(search, fromKey) {\n      if (!this.collator) return null;\n      var collection = this.collection;\n      var key = fromKey || this.getFirstKey();\n      while (key != null) {\n        var item = collection.getItem(key);\n        var substring = item.textValue.slice(0, search.length);\n        if (item.textValue && this.collator.compare(substring, search) === 0) return key;\n        key = this.getKeyBelow(key);\n      }\n      return null;\n    }\n  }]);\n  return $2a25aae57d74318e$export$a05409b8bb224a5a;\n}();\nfunction $982254629710d113$export$b95089534ab7c1fd(props) {\n  var selectionManager = props.selectionManager,\n    collection = props.collection,\n    disabledKeys = props.disabledKeys,\n    ref = props.ref,\n    keyboardDelegate = props.keyboardDelegate,\n    autoFocus = props.autoFocus,\n    shouldFocusWrap = props.shouldFocusWrap,\n    isVirtualized = props.isVirtualized,\n    disallowEmptySelection = props.disallowEmptySelection,\n    _props$selectOnFocus = props.selectOnFocus,\n    selectOnFocus = _props$selectOnFocus === void 0 ? selectionManager.selectionBehavior === 'replace' : _props$selectOnFocus,\n    disallowTypeAhead = props.disallowTypeAhead,\n    shouldUseVirtualFocus = props.shouldUseVirtualFocus,\n    allowsTabNavigation = props.allowsTabNavigation;\n  var collator = $eCAIO$useCollator({\n    usage: 'search',\n    sensitivity: 'base'\n  });\n  var disabledBehavior = selectionManager.disabledBehavior;\n  var delegate = $eCAIO$useMemo(function () {\n    return keyboardDelegate || new $2a25aae57d74318e$export$a05409b8bb224a5a(collection, disabledBehavior === 'selection' ? new Set() : disabledKeys, ref, collator);\n  }, [keyboardDelegate, collection, disabledKeys, ref, collator, disabledBehavior]);\n  var _$ae20dd8cbca75726$ex = $ae20dd8cbca75726$export$d6daf82dcd84e87c({\n      ref: ref,\n      selectionManager: selectionManager,\n      keyboardDelegate: delegate,\n      autoFocus: autoFocus,\n      shouldFocusWrap: shouldFocusWrap,\n      disallowEmptySelection: disallowEmptySelection,\n      selectOnFocus: selectOnFocus,\n      disallowTypeAhead: disallowTypeAhead,\n      shouldUseVirtualFocus: shouldUseVirtualFocus,\n      allowsTabNavigation: allowsTabNavigation,\n      isVirtualized: isVirtualized,\n      scrollRef: ref\n    }),\n    collectionProps = _$ae20dd8cbca75726$ex.collectionProps;\n  return {\n    listProps: collectionProps\n  };\n}\nexport { $ae20dd8cbca75726$export$d6daf82dcd84e87c as useSelectableCollection, $880e95eb8b93ba9a$export$ecf600387e221c37 as useSelectableItem, $982254629710d113$export$b95089534ab7c1fd as useSelectableList, $2a25aae57d74318e$export$a05409b8bb224a5a as ListKeyboardDelegate, $fb3050f43d946246$export$e32c88dfddc6e1d8 as useTypeSelect };","map":{"version":3,"sources":["packages/@react-aria/selection/src/useSelectableCollection.ts","packages/@react-aria/selection/src/utils.ts","packages/@react-aria/selection/src/useTypeSelect.ts","packages/@react-aria/selection/src/useSelectableItem.ts","packages/@react-aria/selection/src/useSelectableList.ts","packages/@react-aria/selection/src/ListKeyboardDelegate.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement, FocusStrategy, KeyboardDelegate} from '@react-types/shared';\nimport {FocusEvent, Key, KeyboardEvent, RefObject, useEffect, useRef} from 'react';\nimport {focusSafely, getFocusableTreeWalker} from '@react-aria/focus';\nimport {focusWithoutScrolling, mergeProps, scrollIntoView, useEvent} from '@react-aria/utils';\nimport {isCtrlKeyPressed, isNonContiguousSelectionModifier} from './utils';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useLocale} from '@react-aria/i18n';\nimport {useTypeSelect} from './useTypeSelect';\n\nexport interface AriaSelectableCollectionOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * A delegate object that implements behavior for keyboard focus movement.\n   */\n  keyboardDelegate: KeyboardDelegate,\n  /**\n   * The ref attached to the element representing the collection.\n   */\n  ref: RefObject<HTMLElement>,\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy,\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean,\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean,\n  /**\n   * Whether the collection allows the user to select all items via keyboard shortcut.\n   * @default false\n   */\n  disallowSelectAll?: boolean,\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean,\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean,\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean,\n  /**\n   * Whether the collection items are contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * The ref attached to the scrollable body. Used to provide automatic scrolling on item focus for non-virtualized collections.\n   * If not provided, defaults to the collection ref.\n   */\n  scrollRef?: RefObject<HTMLElement>\n}\n\nexport interface SelectableCollectionAria {\n  /** Props for the collection element. */\n  collectionProps: DOMAttributes\n}\n\n/**\n * Handles interactions with selectable collections.\n */\nexport function useSelectableCollection(options: AriaSelectableCollectionOptions): SelectableCollectionAria {\n  let {\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    ref,\n    autoFocus = false,\n    shouldFocusWrap = false,\n    disallowEmptySelection = false,\n    disallowSelectAll = false,\n    selectOnFocus = manager.selectionBehavior === 'replace',\n    disallowTypeAhead = false,\n    shouldUseVirtualFocus,\n    allowsTabNavigation = false,\n    isVirtualized,\n    // If no scrollRef is provided, assume the collection ref is the scrollable region\n    scrollRef = ref\n  } = options;\n  let {direction} = useLocale();\n\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    // Prevent option + tab from doing anything since it doesn't move focus to the cells, only buttons/checkboxes\n    if (e.altKey && e.key === 'Tab') {\n      e.preventDefault();\n    }\n\n    // Keyboard events bubble through portals. Don't handle keyboard events\n    // for elements outside the collection (e.g. menus).\n    if (!ref.current.contains(e.target as Element)) {\n      return;\n    }\n\n    const navigateToKey = (key: Key | undefined, childFocus?: FocusStrategy) => {\n      if (key != null) {\n        manager.setFocusedKey(key, childFocus);\n\n        if (e.shiftKey && manager.selectionMode === 'multiple') {\n          manager.extendSelection(key);\n        } else if (selectOnFocus && !isNonContiguousSelectionModifier(e)) {\n          manager.replaceSelection(key);\n        }\n      }\n    };\n\n    switch (e.key) {\n      case 'ArrowDown': {\n        if (delegate.getKeyBelow) {\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null\n              ? delegate.getKeyBelow(manager.focusedKey)\n              : delegate.getFirstKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getFirstKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case 'ArrowUp': {\n        if (delegate.getKeyAbove) {\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null\n              ? delegate.getKeyAbove(manager.focusedKey)\n              : delegate.getLastKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getLastKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case 'ArrowLeft': {\n        if (delegate.getKeyLeftOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyLeftOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === 'rtl' ? 'first' : 'last');\n        }\n        break;\n      }\n      case 'ArrowRight': {\n        if (delegate.getKeyRightOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyRightOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === 'rtl' ? 'last' : 'first');\n        }\n        break;\n      }\n      case 'Home':\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          let firstKey = delegate.getFirstKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(firstKey);\n          if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(firstKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(firstKey);\n          }\n        }\n        break;\n      case 'End':\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          let lastKey = delegate.getLastKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(lastKey);\n          if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(lastKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(lastKey);\n          }\n        }\n        break;\n      case 'PageDown':\n        if (delegate.getKeyPageBelow) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case 'PageUp':\n        if (delegate.getKeyPageAbove) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case 'a':\n        if (isCtrlKeyPressed(e) && manager.selectionMode === 'multiple' && disallowSelectAll !== true) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case 'Escape':\n        e.preventDefault();\n        if (!disallowEmptySelection) {\n          manager.clearSelection();\n        }\n        break;\n      case 'Tab': {\n        if (!allowsTabNavigation) {\n          // There may be elements that are \"tabbable\" inside a collection (e.g. in a grid cell).\n          // However, collections should be treated as a single tab stop, with arrow key navigation internally.\n          // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.\n          // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element\n          // in the collection, so that the browser default behavior will apply starting from that element\n          // rather than the currently focused one.\n          if (e.shiftKey) {\n            ref.current.focus();\n          } else {\n            let walker = getFocusableTreeWalker(ref.current, {tabbable: true});\n            let next: FocusableElement;\n            let last: FocusableElement;\n            do {\n              last = walker.lastChild() as FocusableElement;\n              if (last) {\n                next = last;\n              }\n            } while (last);\n\n            if (next && !next.contains(document.activeElement)) {\n              focusWithoutScrolling(next);\n            }\n          }\n          break;\n        }\n      }\n    }\n  };\n\n  // Store the scroll position so we can restore it later.\n  let scrollPos = useRef({top: 0, left: 0});\n  useEvent(scrollRef, 'scroll', isVirtualized ? null : () => {\n    scrollPos.current = {\n      top: scrollRef.current.scrollTop,\n      left: scrollRef.current.scrollLeft\n    };\n  });\n\n  let onFocus = (e: FocusEvent) => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) {\n        manager.setFocused(false);\n      }\n\n      return;\n    }\n\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n\n    manager.setFocused(true);\n\n    if (manager.focusedKey == null) {\n      let navigateToFirstKey = (key: Key | undefined) => {\n        if (key != null) {\n          manager.setFocusedKey(key);\n          if (selectOnFocus) {\n            manager.replaceSelection(key);\n          }\n        }\n      };\n      // If the user hasn't yet interacted with the collection, there will be no focusedKey set.\n      // Attempt to detect whether the user is tabbing forward or backward into the collection\n      // and either focus the first or last item accordingly.\n      let relatedTarget = e.relatedTarget as Element;\n      if (relatedTarget && (e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING)) {\n        navigateToFirstKey(manager.lastSelectedKey ?? delegate.getLastKey());\n      } else {\n        navigateToFirstKey(manager.firstSelectedKey ?? delegate.getFirstKey());\n      }\n    } else if (!isVirtualized) {\n      // Restore the scroll position to what it was before.\n      scrollRef.current.scrollTop = scrollPos.current.top;\n      scrollRef.current.scrollLeft = scrollPos.current.left;\n\n      // Refocus and scroll the focused item into view if it exists within the scrollable region.\n      let element = scrollRef.current.querySelector(`[data-key=\"${manager.focusedKey}\"]`) as HTMLElement;\n      if (element) {\n        // This prevents a flash of focus on the first/last element in the collection\n        focusWithoutScrolling(element);\n        scrollIntoView(scrollRef.current, element);\n      }\n    }\n  };\n\n  let onBlur = (e) => {\n    // Don't set blurred and then focused again if moving focus within the collection.\n    if (!e.currentTarget.contains(e.relatedTarget as HTMLElement)) {\n      manager.setFocused(false);\n    }\n  };\n\n  const autoFocusRef = useRef(autoFocus);\n  useEffect(() => {\n    if (autoFocusRef.current) {\n      let focusedKey = null;\n\n      // Check focus strategy to determine which item to focus\n      if (autoFocus === 'first') {\n        focusedKey = delegate.getFirstKey();\n      } if (autoFocus === 'last') {\n        focusedKey = delegate.getLastKey();\n      }\n\n      // If there are any selected keys, make the first one the new focus target\n      let selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) {\n        focusedKey = selectedKeys.values().next().value;\n      }\n\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n\n      // If no default focus key is selected, focus the collection itself.\n      if (focusedKey == null && !shouldUseVirtualFocus) {\n        focusSafely(ref.current);\n      }\n    }\n    autoFocusRef.current = false;\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // If not virtualized, scroll the focused element into view when the focusedKey changes.\n  // When virtualized, Virtualizer handles this internally.\n  useEffect(() => {\n    if (!isVirtualized && manager.focusedKey && scrollRef?.current) {\n      let element = scrollRef.current.querySelector(`[data-key=\"${manager.focusedKey}\"]`) as HTMLElement;\n      if (element) {\n        scrollIntoView(scrollRef.current, element);\n      }\n    }\n  }, [isVirtualized, scrollRef, manager.focusedKey]);\n\n  let handlers = {\n    onKeyDown,\n    onFocus,\n    onBlur,\n    onMouseDown(e) {\n      // Ignore events that bubbled through portals.\n      if (scrollRef.current === e.target) {\n        // Prevent focus going to the collection when clicking on the scrollbar.\n        e.preventDefault();\n      }\n    }\n  };\n\n  let {typeSelectProps} = useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: manager\n  });\n\n  if (!disallowTypeAhead) {\n    handlers = mergeProps(typeSelectProps, handlers);\n  }\n\n  // If nothing is focused within the collection, make the collection itself tabbable.\n  // This will be marshalled to either the first or last item depending on where focus came from.\n  // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try\n  // to move real DOM focus to the element anyway.\n  let tabIndex: number;\n  if (!shouldUseVirtualFocus) {\n    tabIndex = manager.focusedKey == null ? 0 : -1;\n  }\n\n  return {\n    collectionProps: {\n      ...handlers,\n      tabIndex\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {isAppleDevice} from '@react-aria/utils';\nimport {isMac} from '@react-aria/utils';\n\ninterface Event {\n  altKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean\n}\n\nexport function isNonContiguousSelectionModifier(e: Event) {\n  // Ctrl + Arrow Up/Arrow Down has a system wide meaning on macOS, so use Alt instead.\n  // On Windows and Ubuntu, Alt + Space has a system wide meaning.\n  return isAppleDevice() ? e.altKey : e.ctrlKey;\n}\n\nexport function isCtrlKeyPressed(e: Event) {\n  if (isMac()) {\n    return e.metaKey;\n  }\n\n  return e.ctrlKey;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, KeyboardDelegate} from '@react-types/shared';\nimport {Key, KeyboardEvent, useRef} from 'react';\nimport {MultipleSelectionManager} from '@react-stately/selection';\n\n/**\n * Controls how long to wait before clearing the typeahead buffer.\n */\nconst TYPEAHEAD_DEBOUNCE_WAIT_MS = 1000; // 1 second\n\nexport interface AriaTypeSelectOptions {\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate: KeyboardDelegate,\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * Called when an item is focused by typing.\n   */\n  onTypeSelect?: (key: Key) => void\n}\n\nexport interface TypeSelectAria {\n  /**\n   * Props to be spread on the owner of the options.\n   */\n  typeSelectProps: DOMAttributes\n}\n\n/**\n * Handles typeahead interactions with collections.\n */\nexport function useTypeSelect(options: AriaTypeSelectOptions): TypeSelectAria {\n  let {keyboardDelegate, selectionManager, onTypeSelect} = options;\n  let state = useRef({\n    search: '',\n    timeout: null\n  }).current;\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    let character = getStringForKey(e.key);\n    if (!character || e.ctrlKey || e.metaKey) {\n      return;\n    }\n\n    // Do not propagate the Spacebar event if it's meant to be part of the search.\n    // When we time out, the search term becomes empty, hence the check on length.\n    // Trimming is to account for the case of pressing the Spacebar more than once,\n    // which should cycle through the selection/deselection of the focused item.\n    if (character === ' ' && state.search.trim().length > 0) {\n      e.preventDefault();\n      if (!('continuePropagation' in e)) {\n        e.stopPropagation();\n      }\n    }\n\n    state.search += character;\n\n    // Use the delegate to find a key to focus.\n    // Prioritize items after the currently focused item, falling back to searching the whole list.\n    let key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey);\n\n    // If no key found, search from the top.\n    if (key == null) {\n      key = keyboardDelegate.getKeyForSearch(state.search);\n    }\n\n    if (key != null) {\n      selectionManager.setFocusedKey(key);\n      if (onTypeSelect) {\n        onTypeSelect(key);\n      }\n    }\n\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(() => {\n      state.search = '';\n    }, TYPEAHEAD_DEBOUNCE_WAIT_MS);\n  };\n\n  return {\n    typeSelectProps: {\n      // Using a capturing listener to catch the keydown event before\n      // other hooks in order to handle the Spacebar event.\n      onKeyDownCapture: keyboardDelegate.getKeyForSearch ? onKeyDown : null\n    }\n  };\n}\n\nfunction getStringForKey(key: string) {\n  // If the key is of length 1, it is an ASCII value.\n  // Otherwise, if there are no ASCII characters in the key name,\n  // it is a Unicode character.\n  // See https://www.w3.org/TR/uievents-key/\n  if (key.length === 1 || !/^[A-Z]/i.test(key)) {\n    return key;\n  }\n\n  return '';\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement, LongPressEvent, PressEvent} from '@react-types/shared';\nimport {focusSafely} from '@react-aria/focus';\nimport {isCtrlKeyPressed, isNonContiguousSelectionModifier} from './utils';\nimport {Key, RefObject, useEffect, useRef} from 'react';\nimport {mergeProps} from '@react-aria/utils';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {PressProps, useLongPress, usePress} from '@react-aria/interactions';\n\nexport interface SelectableItemOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * A unique key for the item.\n   */\n  key: Key,\n  /**\n   * Ref to the item.\n   */\n  ref: RefObject<FocusableElement>,\n  /**\n   * By default, selection occurs on pointer down. This can be strange if selecting an\n   * item causes the UI to disappear immediately (e.g. menus).\n   */\n  shouldSelectOnPressUp?: boolean,\n  /**\n   * Whether selection requires the pointer/mouse down and up events to occur on the same target or triggers selection on\n   * the target of the pointer/mouse up event.\n   */\n  allowsDifferentPressOrigin?: boolean,\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * Function to focus the item.\n   */\n  focus?: () => void,\n  /**\n   * Whether the option should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /** Whether the item is disabled. */\n  isDisabled?: boolean,\n  /**\n   * Handler that is called when a user performs an action on the item. The exact user event depends on\n   * the collection's `selectionBehavior` prop and the interaction modality.\n   */\n  onAction?: () => void\n}\n\nexport interface SelectableItemStates {\n  /** Whether the item is currently in a pressed state. */\n  isPressed: boolean,\n  /** Whether the item is currently selected. */\n  isSelected: boolean,\n  /**\n   * Whether the item is non-interactive, i.e. both selection and actions are disabled and the item may\n   * not be focused. Dependent on `disabledKeys` and `disabledBehavior`.\n   */\n  isDisabled: boolean,\n  /**\n   * Whether the item may be selected, dependent on `selectionMode`, `disabledKeys`, and `disabledBehavior`.\n   */\n  allowsSelection: boolean,\n  /**\n   * Whether the item has an action, dependent on `onAction`, `disabledKeys`,\n   * and `disabledBehavior`. It may also change depending on the current selection state\n   * of the list (e.g. when selection is primary). This can be used to enable or disable hover\n   * styles or other visual indications of interactivity.\n   */\n  hasAction: boolean\n}\n\nexport interface SelectableItemAria extends SelectableItemStates {\n  /**\n   * Props to be spread on the item root node.\n   */\n  itemProps: DOMAttributes\n}\n\n/**\n * Handles interactions with an item in a selectable collection.\n */\nexport function useSelectableItem(options: SelectableItemOptions): SelectableItemAria {\n  let {\n    selectionManager: manager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    isVirtualized,\n    shouldUseVirtualFocus,\n    focus,\n    isDisabled,\n    onAction,\n    allowsDifferentPressOrigin\n  } = options;\n\n  let onSelect = (e: PressEvent | LongPressEvent | PointerEvent) => {\n    if (e.pointerType === 'keyboard' && isNonContiguousSelectionModifier(e)) {\n      manager.toggleSelection(key);\n    } else {\n      if (manager.selectionMode === 'none') {\n        return;\n      }\n\n      if (manager.selectionMode === 'single') {\n        if (manager.isSelected(key) && !manager.disallowEmptySelection) {\n          manager.toggleSelection(key);\n        } else {\n          manager.replaceSelection(key);\n        }\n      } else if (e && e.shiftKey) {\n        manager.extendSelection(key);\n      } else if (manager.selectionBehavior === 'toggle' || (e && (isCtrlKeyPressed(e) || e.pointerType === 'touch' || e.pointerType === 'virtual'))) {\n        // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n        manager.toggleSelection(key);\n      } else {\n        manager.replaceSelection(key);\n      }\n    }\n  };\n\n  // Focus the associated DOM node when this item becomes the focusedKey\n  useEffect(() => {\n    let isFocused = key === manager.focusedKey;\n    if (isFocused && manager.isFocused && !shouldUseVirtualFocus && document.activeElement !== ref.current) {\n      if (focus) {\n        focus();\n      } else {\n        focusSafely(ref.current);\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ref, key, manager.focusedKey, manager.childFocusStrategy, manager.isFocused, shouldUseVirtualFocus]);\n\n  isDisabled = isDisabled || manager.isDisabled(key);\n  // Set tabIndex to 0 if the element is focused, or -1 otherwise so that only the last focused\n  // item is tabbable.  If using virtual focus, don't set a tabIndex at all so that VoiceOver\n  // on iOS 14 doesn't try to move real DOM focus to the item anyway.\n  let itemProps: SelectableItemAria['itemProps'] = {};\n  if (!shouldUseVirtualFocus && !isDisabled) {\n    itemProps = {\n      tabIndex: key === manager.focusedKey ? 0 : -1,\n      onFocus(e) {\n        if (e.target === ref.current) {\n          manager.setFocusedKey(key);\n        }\n      }\n    };\n  } else if (isDisabled) {\n    itemProps.onMouseDown = (e) => {\n      // Prevent focus going to the body when clicking on a disabled item.\n      e.preventDefault();\n    };\n  }\n\n  // With checkbox selection, onAction (i.e. navigation) becomes primary, and occurs on a single click of the row.\n  // Clicking the checkbox enters selection mode, after which clicking anywhere on any row toggles selection for that row.\n  // With highlight selection, onAction is secondary, and occurs on double click. Single click selects the row.\n  // With touch, onAction occurs on single tap, and long press enters selection mode.\n  let allowsSelection = !isDisabled && manager.canSelectItem(key);\n  let allowsActions = onAction && !isDisabled;\n  let hasPrimaryAction = allowsActions && (\n    manager.selectionBehavior === 'replace'\n      ? !allowsSelection\n      : manager.isEmpty\n  );\n  let hasSecondaryAction = allowsActions && allowsSelection && manager.selectionBehavior === 'replace';\n  let hasAction = hasPrimaryAction || hasSecondaryAction;\n  let modality = useRef(null);\n\n  let longPressEnabled = hasAction && allowsSelection;\n  let longPressEnabledOnPressStart = useRef(false);\n  let hadPrimaryActionOnPressStart = useRef(false);\n\n  // By default, selection occurs on pointer down. This can be strange if selecting an\n  // item causes the UI to disappear immediately (e.g. menus).\n  // If shouldSelectOnPressUp is true, we use onPressUp instead of onPressStart.\n  // onPress requires a pointer down event on the same element as pointer up. For menus,\n  // we want to be able to have the pointer down on the trigger that opens the menu and\n  // the pointer up on the menu item rather than requiring a separate press.\n  // For keyboard events, selection still occurs on key down.\n  let itemPressProps: PressProps = {};\n  if (shouldSelectOnPressUp) {\n    itemPressProps.onPressStart = (e) => {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      if (e.pointerType === 'keyboard' && (!hasAction || isSelectionKey())) {\n        onSelect(e);\n      }\n    };\n\n    // If allowsDifferentPressOrigin, make selection happen on pressUp (e.g. open menu on press down, selection on menu item happens on press up.)\n    // Otherwise, have selection happen onPress (prevents listview row selection when clicking on interactable elements in the row)\n    if (!allowsDifferentPressOrigin) {\n      itemPressProps.onPress = (e) => {\n        if (hasPrimaryAction || (hasSecondaryAction && e.pointerType !== 'mouse')) {\n          if (e.pointerType === 'keyboard' && !isActionKey()) {\n            return;\n          }\n\n          onAction();\n        } else if (e.pointerType !== 'keyboard') {\n          onSelect(e);\n        }\n      };\n    } else {\n      itemPressProps.onPressUp = (e) => {\n        if (e.pointerType !== 'keyboard') {\n          onSelect(e);\n        }\n      };\n\n      itemPressProps.onPress = hasPrimaryAction ? () => onAction() : null;\n    }\n  } else {\n    itemPressProps.onPressStart = (e) => {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      hadPrimaryActionOnPressStart.current = hasPrimaryAction;\n\n      // Select on mouse down unless there is a primary action which will occur on mouse up.\n      // For keyboard, select on key down. If there is an action, the Space key selects on key down,\n      // and the Enter key performs onAction on key up.\n      if (\n        (e.pointerType === 'mouse' && !hasPrimaryAction) ||\n        (e.pointerType === 'keyboard' && (!onAction || isSelectionKey()))\n      ) {\n        onSelect(e);\n      }\n    };\n\n    itemPressProps.onPress = (e) => {\n      // Selection occurs on touch up. Primary actions always occur on pointer up.\n      // Both primary and secondary actions occur on Enter key up. The only exception\n      // is secondary actions, which occur on double click with a mouse.\n      if (\n        e.pointerType === 'touch' ||\n        e.pointerType === 'pen' ||\n        e.pointerType === 'virtual' ||\n        (e.pointerType === 'keyboard' && hasAction && isActionKey()) ||\n        (e.pointerType === 'mouse' && hadPrimaryActionOnPressStart.current)\n      ) {\n        if (hasAction) {\n          onAction();\n        } else {\n          onSelect(e);\n        }\n      }\n    };\n  }\n\n  if (!isVirtualized) {\n    itemProps['data-key'] = key;\n  }\n\n  itemPressProps.preventFocusOnPress = shouldUseVirtualFocus;\n  let {pressProps, isPressed} = usePress(itemPressProps);\n\n  // Double clicking with a mouse with selectionBehavior = 'replace' performs an action.\n  let onDoubleClick = hasSecondaryAction ? (e) => {\n    if (modality.current === 'mouse') {\n      e.stopPropagation();\n      e.preventDefault();\n      onAction();\n    }\n  } : undefined;\n\n  // Long pressing an item with touch when selectionBehavior = 'replace' switches the selection behavior\n  // to 'toggle'. This changes the single tap behavior from performing an action (i.e. navigating) to\n  // selecting, and may toggle the appearance of a UI affordance like checkboxes on each item.\n  let {longPressProps} = useLongPress({\n    isDisabled: !longPressEnabled,\n    onLongPress(e) {\n      if (e.pointerType === 'touch') {\n        onSelect(e);\n        manager.setSelectionBehavior('toggle');\n      }\n    }\n  });\n\n  // Prevent native drag and drop on long press if we also select on long press.\n  // Once the user is in selection mode, they can long press again to drag.\n  // Use a capturing listener to ensure this runs before useDrag, regardless of\n  // the order the props get merged.\n  let onDragStartCapture = e => {\n    if (modality.current === 'touch' && longPressEnabledOnPressStart.current) {\n      e.preventDefault();\n    }\n  };\n\n  return {\n    itemProps: mergeProps(\n      itemProps,\n      allowsSelection || hasPrimaryAction ? pressProps : {},\n      longPressEnabled ? longPressProps : {},\n      {onDoubleClick, onDragStartCapture}\n    ),\n    isPressed,\n    isSelected: manager.isSelected(key),\n    isDisabled,\n    allowsSelection,\n    hasAction\n  };\n}\n\nfunction isActionKey() {\n  let event = window.event as KeyboardEvent;\n  return event?.key === 'Enter';\n}\n\nfunction isSelectionKey() {\n  let event = window.event as KeyboardEvent;\n  return event?.key === ' ' || event?.code === 'Space';\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, DOMAttributes, FocusStrategy, KeyboardDelegate, Node} from '@react-types/shared';\nimport {Key, RefObject, useMemo} from 'react';\nimport {ListKeyboardDelegate} from './ListKeyboardDelegate';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useCollator} from '@react-aria/i18n';\nimport {useSelectableCollection} from './useSelectableCollection';\n\nexport interface AriaSelectableListOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * State of the collection.\n   */\n  collection: Collection<Node<unknown>>,\n  /**\n   * The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.\n   */\n  disabledKeys: Set<Key>,\n  /**\n   * A ref to the item.\n   */\n  ref?: RefObject<HTMLElement>,\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy,\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean,\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean,\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean,\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean,\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean\n}\n\nexport interface SelectableListAria {\n  /**\n   * Props for the option element.\n   */\n  listProps: DOMAttributes\n}\n\n/**\n * Handles interactions with a selectable list.\n */\nexport function useSelectableList(props: AriaSelectableListOptions): SelectableListAria {\n  let {\n    selectionManager,\n    collection,\n    disabledKeys,\n    ref,\n    keyboardDelegate,\n    autoFocus,\n    shouldFocusWrap,\n    isVirtualized,\n    disallowEmptySelection,\n    selectOnFocus = selectionManager.selectionBehavior === 'replace',\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation\n  } = props;\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = useCollator({usage: 'search', sensitivity: 'base'});\n  let disabledBehavior = selectionManager.disabledBehavior;\n  let delegate = useMemo(() => (\n    keyboardDelegate || new ListKeyboardDelegate(collection, disabledBehavior === 'selection' ? new Set() : disabledKeys, ref, collator)\n  ), [keyboardDelegate, collection, disabledKeys, ref, collator, disabledBehavior]);\n\n  let {collectionProps} = useSelectableCollection({\n    ref,\n    selectionManager,\n    keyboardDelegate: delegate,\n    autoFocus,\n    shouldFocusWrap,\n    disallowEmptySelection,\n    selectOnFocus,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation,\n    isVirtualized,\n    scrollRef: ref\n  });\n\n  return {\n    listProps: collectionProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, KeyboardDelegate, Node} from '@react-types/shared';\nimport {Key, RefObject} from 'react';\n\nexport class ListKeyboardDelegate<T> implements KeyboardDelegate {\n  private collection: Collection<Node<T>>;\n  private disabledKeys: Set<Key>;\n  private ref: RefObject<HTMLElement>;\n  private collator: Intl.Collator;\n\n  constructor(collection: Collection<Node<T>>, disabledKeys: Set<Key>, ref: RefObject<HTMLElement>, collator?: Intl.Collator) {\n    this.collection = collection;\n    this.disabledKeys = disabledKeys;\n    this.ref = ref;\n    this.collator = collator;\n  }\n\n  getKeyBelow(key: Key) {\n    key = this.collection.getKeyAfter(key);\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n  }\n\n  getKeyAbove(key: Key) {\n    key = this.collection.getKeyBefore(key);\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyBefore(key);\n    }\n  }\n\n  getFirstKey() {\n    let key = this.collection.getFirstKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n  }\n\n  getLastKey() {\n    let key = this.collection.getLastKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyBefore(key);\n    }\n  }\n\n  private getItem(key: Key): HTMLElement {\n    return this.ref.current.querySelector(`[data-key=\"${key}\"]`);\n  }\n\n  getKeyPageAbove(key: Key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) {\n      return null;\n    }\n\n    let pageY = Math.max(0, item.offsetTop + item.offsetHeight - menu.offsetHeight);\n\n    while (item && item.offsetTop > pageY) {\n      key = this.getKeyAbove(key);\n      item = this.getItem(key);\n    }\n\n    return key;\n  }\n\n  getKeyPageBelow(key: Key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) {\n      return null;\n    }\n\n    let pageY = Math.min(menu.scrollHeight, item.offsetTop - item.offsetHeight + menu.offsetHeight);\n\n    while (item && item.offsetTop < pageY) {\n      key = this.getKeyBelow(key);\n      item = this.getItem(key);\n    }\n\n    return key;\n  }\n\n  getKeyForSearch(search: string, fromKey?: Key) {\n    if (!this.collator) {\n      return null;\n    }\n\n    let collection = this.collection;\n    let key = fromKey || this.getFirstKey();\n    while (key != null) {\n      let item = collection.getItem(key);\n      let substring = item.textValue.slice(0, search.length);\n      if (item.textValue && this.collator.compare(substring, search) === 0) {\n        return key;\n      }\n\n      key = this.getKeyBelow(key);\n    }\n\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}