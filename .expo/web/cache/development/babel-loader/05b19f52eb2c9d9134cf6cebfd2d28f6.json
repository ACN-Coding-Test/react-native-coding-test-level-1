{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"orientation\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport Box from \"./../../primitives/Box\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar Divider = function Divider(props, ref) {\n  var _usePropsResolution = usePropsResolution('Divider', props, {}, {\n      resolveResponsively: ['thickness']\n    }),\n    orientation = _usePropsResolution.orientation,\n    resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return React.createElement(Box, _extends({}, resolvedProps, {\n    ref: ref,\n    \"aria-orientation\": orientation,\n\n    accessibilityRole: Platform.OS === 'web' ? 'separator' : undefined\n  }));\n};\nexport default memo(forwardRef(Divider));","map":{"version":3,"sources":["index.tsx"],"names":["React","memo","forwardRef","usePropsResolution","Box","useHasResponsiveProps","Divider","props","ref","orientation","resolvedProps","resolveResponsively","Platform","OS","undefined"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AAAA;AAEA,SAASC,kBAAT;AACA,OAAOC,GAAP;AAEA,SAASC,qBAAT;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAO,CAAIC,KAAD,EAAuBC,GAAvB,EAAqC;EACnD,0BAA0CL,kBAAkB,CAC1D,SAD0D,EAE1DI,KAF0D,EAG1D,CAAA,CAH0D,EAI1D;MAAEI,mBAAmB,EAAE,CAAC,WAAD;IAAvB,CAJ0D,CADT;IAC3CF,WAAF,uBAAEA,WAAF;IAAkBC,aAAAA;;EAOxB,IAAIL,qBAAqB,CAACE,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EACD,OACE,KAAA,CAAA,aAAA,CAAC,GAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EACMG,aADN,EAAA;IAEE,GAAG,EAAEF,GAFP;IAGE,kBAAA,EAAkBC,WAHpB;;IAKE,iBAAiB,EAAEG,QAAQ,CAACC,EAATD,KAAgB,KAAhBA,GAAwB,WAAxBA,GAAsCE;EAL3D,CAAA,CAAA,CADF;AASD,CApBD;AAsBA,eAAeb,IAAI,CAACC,UAAU,CAACI,OAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Platform } from 'react-native';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport Box from './../../primitives/Box';\nimport type { IDividerProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Divider = (props: IDividerProps, ref?: any) => {\n  const { orientation, ...resolvedProps } = usePropsResolution(\n    'Divider',\n    props,\n    {},\n    { resolveResponsively: ['thickness'] }\n  );\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box\n      {...resolvedProps}\n      ref={ref}\n      aria-orientation={orientation}\n      //@ts-ignore web only role\n      accessibilityRole={Platform.OS === 'web' ? 'separator' : undefined}\n    />\n  );\n};\n\nexport default memo(forwardRef(Divider));\n"]},"metadata":{},"sourceType":"module"}