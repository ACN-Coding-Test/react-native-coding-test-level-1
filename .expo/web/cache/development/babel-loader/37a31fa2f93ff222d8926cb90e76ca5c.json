{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { filterDOMProps as $frWMC$filterDOMProps, useId as $frWMC$useId, mergeProps as $frWMC$mergeProps, useSlotId as $frWMC$useSlotId, isMac as $frWMC$isMac, isWebKit as $frWMC$isWebKit } from \"@react-aria/utils\";\nimport { useFocusWithin as $frWMC$useFocusWithin, useHover as $frWMC$useHover, isFocusVisible as $frWMC$isFocusVisible } from \"@react-aria/interactions\";\nimport { useLabel as $frWMC$useLabel } from \"@react-aria/label\";\nimport { useSelectableList as $frWMC$useSelectableList, useSelectableItem as $frWMC$useSelectableItem } from \"@react-aria/selection\";\nimport { getItemCount as $frWMC$getItemCount } from \"@react-stately/collections\";\nvar $b1f0cad8af73213b$export$3585ede4d035bf14 = new WeakMap();\nfunction $b1f0cad8af73213b$var$normalizeKey(key) {\n  if (typeof key === 'string') return key.replace(/\\s*/g, '');\n  return '' + key;\n}\nfunction $b1f0cad8af73213b$export$9145995848b05025(state, itemKey) {\n  var data = $b1f0cad8af73213b$export$3585ede4d035bf14.get(state);\n  if (!data) throw new Error('Unknown list');\n  return data.id + \"-option-\" + $b1f0cad8af73213b$var$normalizeKey(itemKey);\n}\nfunction $c132121280ec012d$export$50eacbbf140a3141(props, state, ref) {\n  var domProps = $frWMC$filterDOMProps(props, {\n    labelable: true\n  });\n  var _$frWMC$useSelectable = $frWMC$useSelectableList(_objectSpread(_objectSpread({}, props), {}, {\n      ref: ref,\n      selectionManager: state.selectionManager,\n      collection: state.collection,\n      disabledKeys: state.disabledKeys\n    })),\n    listProps = _$frWMC$useSelectable.listProps;\n  var _$frWMC$useFocusWithi = $frWMC$useFocusWithin({\n      onFocusWithin: props.onFocus,\n      onBlurWithin: props.onBlur,\n      onFocusWithinChange: props.onFocusChange\n    }),\n    focusWithinProps = _$frWMC$useFocusWithi.focusWithinProps;\n  var id = $frWMC$useId(props.id);\n  $b1f0cad8af73213b$export$3585ede4d035bf14.set(state, {\n    id: id,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus,\n    shouldSelectOnPressUp: props.shouldSelectOnPressUp,\n    shouldFocusOnHover: props.shouldFocusOnHover,\n    isVirtualized: props.isVirtualized,\n    onAction: props.onAction\n  });\n  var _$frWMC$useLabel = $frWMC$useLabel(_objectSpread(_objectSpread({}, props), {}, {\n      id: id,\n      labelElementType: 'span'\n    })),\n    labelProps = _$frWMC$useLabel.labelProps,\n    fieldProps = _$frWMC$useLabel.fieldProps;\n  return {\n    labelProps: labelProps,\n    listBoxProps: $frWMC$mergeProps(domProps, focusWithinProps, state.selectionManager.selectionMode === 'multiple' ? {\n      'aria-multiselectable': 'true'\n    } : {}, _objectSpread({\n      role: 'listbox'\n    }, $frWMC$mergeProps(fieldProps, listProps)))\n  };\n}\nfunction $293f70390ea03370$export$497855f14858aa34(props, state, ref) {\n  var key = props.key;\n  var data = $b1f0cad8af73213b$export$3585ede4d035bf14.get(state);\n  var _isDisabled;\n  var isDisabled = (_isDisabled = props.isDisabled) !== null && _isDisabled !== void 0 ? _isDisabled : state.disabledKeys.has(key);\n  var _isSelected;\n  var isSelected = (_isSelected = props.isSelected) !== null && _isSelected !== void 0 ? _isSelected : state.selectionManager.isSelected(key);\n  var isFocused = state.selectionManager.focusedKey === key;\n  var _shouldSelectOnPressUp;\n  var shouldSelectOnPressUp = (_shouldSelectOnPressUp = props.shouldSelectOnPressUp) !== null && _shouldSelectOnPressUp !== void 0 ? _shouldSelectOnPressUp : data.shouldSelectOnPressUp;\n  var _shouldFocusOnHover;\n  var shouldFocusOnHover = (_shouldFocusOnHover = props.shouldFocusOnHover) !== null && _shouldFocusOnHover !== void 0 ? _shouldFocusOnHover : data.shouldFocusOnHover;\n  var _shouldUseVirtualFocus;\n  var shouldUseVirtualFocus = (_shouldUseVirtualFocus = props.shouldUseVirtualFocus) !== null && _shouldUseVirtualFocus !== void 0 ? _shouldUseVirtualFocus : data.shouldUseVirtualFocus;\n  var _isVirtualized;\n  var isVirtualized = (_isVirtualized = props.isVirtualized) !== null && _isVirtualized !== void 0 ? _isVirtualized : data.isVirtualized;\n  var labelId = $frWMC$useSlotId();\n  var descriptionId = $frWMC$useSlotId();\n  var optionProps = {\n    role: 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined\n  };\n  if (!($frWMC$isMac() && $frWMC$isWebKit())) {\n    optionProps['aria-label'] = props['aria-label'];\n    optionProps['aria-labelledby'] = labelId;\n    optionProps['aria-describedby'] = descriptionId;\n  }\n  if (isVirtualized) {\n    optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    optionProps['aria-setsize'] = $frWMC$getItemCount(state.collection);\n  }\n  var _$frWMC$useSelectable2 = $frWMC$useSelectableItem({\n      selectionManager: state.selectionManager,\n      key: key,\n      ref: ref,\n      shouldSelectOnPressUp: shouldSelectOnPressUp,\n      allowsDifferentPressOrigin: shouldSelectOnPressUp && shouldFocusOnHover,\n      isVirtualized: isVirtualized,\n      shouldUseVirtualFocus: shouldUseVirtualFocus,\n      isDisabled: isDisabled,\n      onAction: data.onAction ? function () {\n        return data.onAction(key);\n      } : undefined\n    }),\n    itemProps = _$frWMC$useSelectable2.itemProps,\n    isPressed = _$frWMC$useSelectable2.isPressed,\n    hasAction = _$frWMC$useSelectable2.hasAction,\n    allowsSelection = _$frWMC$useSelectable2.allowsSelection;\n  var _$frWMC$useHover = $frWMC$useHover({\n      isDisabled: isDisabled || !shouldFocusOnHover,\n      onHoverStart: function onHoverStart() {\n        if (!$frWMC$isFocusVisible()) {\n          state.selectionManager.setFocused(true);\n          state.selectionManager.setFocusedKey(key);\n        }\n      }\n    }),\n    hoverProps = _$frWMC$useHover.hoverProps;\n  return {\n    optionProps: _objectSpread(_objectSpread(_objectSpread({}, optionProps), $frWMC$mergeProps(itemProps, hoverProps)), {}, {\n      id: $b1f0cad8af73213b$export$9145995848b05025(state, key)\n    }),\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    isFocused: isFocused,\n    isSelected: isSelected,\n    isDisabled: isDisabled,\n    isPressed: isPressed,\n    allowsSelection: allowsSelection,\n    hasAction: hasAction\n  };\n}\nfunction $af383d3bef1cfdc9$export$c3f9f39876e4bc7(props) {\n  var heading = props.heading,\n    ariaLabel = props['aria-label'];\n  var headingId = $frWMC$useId();\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      id: headingId,\n      'aria-hidden': true\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}\nexport { $c132121280ec012d$export$50eacbbf140a3141 as useListBox, $293f70390ea03370$export$497855f14858aa34 as useOption, $af383d3bef1cfdc9$export$c3f9f39876e4bc7 as useListBoxSection, $b1f0cad8af73213b$export$3585ede4d035bf14 as listData, $b1f0cad8af73213b$export$9145995848b05025 as getItemId };","map":{"version":3,"sources":["packages/@react-aria/listbox/src/useListBox.ts","packages/@react-aria/listbox/src/utils.ts","packages/@react-aria/listbox/src/useOption.ts","packages/@react-aria/listbox/src/useListBoxSection.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaListBoxProps} from '@react-types/listbox';\nimport {DOMAttributes, KeyboardDelegate} from '@react-types/shared';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {Key, ReactNode, RefObject} from 'react';\nimport {listData} from './utils';\nimport {ListState} from '@react-stately/list';\nimport {useFocusWithin} from '@react-aria/interactions';\nimport {useId} from '@react-aria/utils';\nimport {useLabel} from '@react-aria/label';\nimport {useSelectableList} from '@react-aria/selection';\n\nexport interface ListBoxAria {\n  /** Props for the listbox element. */\n  listBoxProps: DOMAttributes,\n  /** Props for the listbox's visual label element (if any). */\n  labelProps: DOMAttributes\n}\n\nexport interface AriaListBoxOptions<T> extends Omit<AriaListBoxProps<T>, 'children'> {\n  /** Whether the listbox uses virtual scrolling. */\n  isVirtualized?: boolean,\n\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n\n  /**\n   * Whether the listbox items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n\n  /** Whether selection should occur on press up instead of press down. */\n  shouldSelectOnPressUp?: boolean,\n\n  /** Whether options should be focused when the user hovers over them. */\n  shouldFocusOnHover?: boolean,\n\n  /**\n   * An optional visual label for the listbox.\n   */\n  label?: ReactNode,\n  /**\n   * Handler that is called when a user performs an action on an item. The exact user event depends on\n   * the collection's `selectionBehavior` prop and the interaction modality.\n   */\n  onAction?: (key: Key) => void\n}\n\n/**\n * Provides the behavior and accessibility implementation for a listbox component.\n * A listbox displays a list of options and allows a user to select one or more of them.\n * @param props - Props for the listbox.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useListBox<T>(props: AriaListBoxOptions<T>, state: ListState<T>, ref: RefObject<HTMLElement>): ListBoxAria {\n  let domProps = filterDOMProps(props, {labelable: true});\n  let {listProps} = useSelectableList({\n    ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys\n  });\n\n  let {focusWithinProps} = useFocusWithin({\n    onFocusWithin: props.onFocus,\n    onBlurWithin: props.onBlur,\n    onFocusWithinChange: props.onFocusChange\n  });\n\n  // Share list id and some props with child options.\n  let id = useId(props.id);\n  listData.set(state, {\n    id,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus,\n    shouldSelectOnPressUp: props.shouldSelectOnPressUp,\n    shouldFocusOnHover: props.shouldFocusOnHover,\n    isVirtualized: props.isVirtualized,\n    onAction: props.onAction\n  });\n\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    id,\n    // listbox is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  return {\n    labelProps,\n    listBoxProps: mergeProps(domProps, focusWithinProps, state.selectionManager.selectionMode === 'multiple' ? {\n      'aria-multiselectable': 'true'\n    } : {}, {\n      role: 'listbox',\n      ...mergeProps(fieldProps, listProps)\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {ListState} from '@react-stately/list';\n\ninterface ListData {\n  id: string,\n  shouldSelectOnPressUp?: boolean,\n  shouldFocusOnHover?: boolean,\n  shouldUseVirtualFocus?: boolean,\n  isVirtualized?: boolean,\n  onAction?: (key: Key) => void\n}\n\nexport const listData = new WeakMap<ListState<unknown>, ListData>();\n\nfunction normalizeKey(key: Key): string {\n  if (typeof key === 'string') {\n    return key.replace(/\\s*/g, '');\n  }\n\n  return '' + key;\n}\n\nexport function getItemId<T>(state: ListState<T>, itemKey: Key): string {\n  let data = listData.get(state);\n\n  if (!data) {\n    throw new Error('Unknown list');\n  }\n\n  return `${data.id}-option-${normalizeKey(itemKey)}`;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement} from '@react-types/shared';\nimport {getItemCount} from '@react-stately/collections';\nimport {getItemId, listData} from './utils';\nimport {isFocusVisible, useHover} from '@react-aria/interactions';\nimport {isMac, isWebKit, mergeProps, useSlotId} from '@react-aria/utils';\nimport {Key, RefObject} from 'react';\nimport {ListState} from '@react-stately/list';\nimport {SelectableItemStates, useSelectableItem} from '@react-aria/selection';\n\nexport interface OptionAria extends SelectableItemStates {\n  /** Props for the option element. */\n  optionProps: DOMAttributes,\n\n  /** Props for the main text element inside the option. */\n  labelProps: DOMAttributes,\n\n  /** Props for the description text element inside the option, if any. */\n  descriptionProps: DOMAttributes,\n\n  /** Whether the option is currently focused. */\n  isFocused: boolean\n}\n\nexport interface AriaOptionProps {\n  /**\n   * Whether the option is disabled.\n   * @deprecated\n   */\n  isDisabled?: boolean,\n\n  /**\n   * Whether the option is selected.\n   * @deprecated\n   */\n  isSelected?: boolean,\n\n  /** A screen reader only label for the option. */\n  'aria-label'?: string,\n\n  /** The unique key for the option. */\n  key: Key,\n\n  /**\n   * Whether selection should occur on press up instead of press down.\n   * @deprecated\n   */\n  shouldSelectOnPressUp?: boolean,\n\n  /**\n   * Whether the option should be focused when the user hovers over it.\n   * @deprecated\n   */\n  shouldFocusOnHover?: boolean,\n\n  /**\n   * Whether the option is contained in a virtual scrolling listbox.\n   * @deprecated\n   */\n  isVirtualized?: boolean,\n\n  /**\n   * Whether the option should use virtual focus instead of being focused directly.\n   * @deprecated\n   */\n  shouldUseVirtualFocus?: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for an option in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the option.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useOption<T>(props: AriaOptionProps, state: ListState<T>, ref: RefObject<FocusableElement>): OptionAria {\n  let {\n    key\n  } = props;\n\n  let data = listData.get(state);\n\n  let isDisabled = props.isDisabled ?? state.disabledKeys.has(key);\n  let isSelected = props.isSelected ?? state.selectionManager.isSelected(key);\n  let isFocused = state.selectionManager.focusedKey === key;\n  let shouldSelectOnPressUp = props.shouldSelectOnPressUp ?? data.shouldSelectOnPressUp;\n  let shouldFocusOnHover = props.shouldFocusOnHover ?? data.shouldFocusOnHover;\n  let shouldUseVirtualFocus = props.shouldUseVirtualFocus ?? data.shouldUseVirtualFocus;\n  let isVirtualized = props.isVirtualized ?? data.isVirtualized;\n\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n\n  let optionProps = {\n    role: 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined\n  };\n\n  // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply \"text\".\n  // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.\n  // https://bugs.webkit.org/show_bug.cgi?id=209279\n  if (!(isMac() && isWebKit())) {\n    optionProps['aria-label'] = props['aria-label'];\n    optionProps['aria-labelledby'] = labelId;\n    optionProps['aria-describedby'] = descriptionId;\n  }\n\n  if (isVirtualized) {\n    optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    optionProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  let {itemProps, isPressed, hasAction, allowsSelection} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    allowsDifferentPressOrigin: shouldSelectOnPressUp && shouldFocusOnHover,\n    isVirtualized,\n    shouldUseVirtualFocus,\n    isDisabled,\n    onAction: data.onAction ? () => data.onAction(key) : undefined\n  });\n\n  let {hoverProps} = useHover({\n    isDisabled: isDisabled || !shouldFocusOnHover,\n    onHoverStart() {\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n  });\n\n  return {\n    optionProps: {\n      ...optionProps,\n      ...mergeProps(itemProps, hoverProps),\n      id: getItemId(state, key)\n    },\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    isFocused,\n    isSelected,\n    isDisabled,\n    isPressed,\n    allowsSelection,\n    hasAction\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {ReactNode} from 'react';\nimport {useId} from '@react-aria/utils';\n\nexport interface AriaListBoxSectionProps {\n  /** The heading for the section. */\n  heading?: ReactNode,\n  /** An accessibility label for the section. Required if `heading` is not present. */\n  'aria-label'?: string\n}\n\nexport interface ListBoxSectionAria {\n  /** Props for the wrapper list item. */\n  itemProps: DOMAttributes,\n\n  /** Props for the heading element, if any. */\n  headingProps: DOMAttributes,\n\n  /** Props for the group element. */\n  groupProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a section in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the section.\n */\nexport function useListBoxSection(props: AriaListBoxSectionProps): ListBoxSectionAria {\n  let {heading, 'aria-label': ariaLabel} = props;\n  let headingId = useId();\n\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      // Techincally, listbox cannot contain headings according to ARIA.\n      // We hide the heading from assistive technology, and only use it\n      // as a label for the nested group.\n      id: headingId,\n      'aria-hidden': true\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}