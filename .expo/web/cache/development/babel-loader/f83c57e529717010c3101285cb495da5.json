{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"min\", \"max\", \"value\", \"_filledTrack\", \"children\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport { Box } from \"../../primitives\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar Progress = function Progress(props, ref) {\n  var _usePropsResolution = usePropsResolution('Progress', props),\n    min = _usePropsResolution.min,\n    max = _usePropsResolution.max,\n    value = _usePropsResolution.value,\n    _filledTrack = _usePropsResolution._filledTrack,\n    children = _usePropsResolution.children,\n    resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  var valueWidth = value < max && value > min ? (value - min) / (max - min) * 100 : value > min ? 100 : 0;\n  return React.createElement(Box, _extends({}, resolvedProps, {\n    ref: ref,\n    accessible: true,\n    accessibilityRole: \"progressbar\",\n    accessibilityValue: {\n      min: min,\n      max: max,\n      now: valueWidth\n    }\n  }), React.createElement(Box, _extends({\n    w: \"\".concat(valueWidth, \"%\")\n  }, _filledTrack), children));\n};\nexport default memo(forwardRef(Progress));","map":{"version":3,"sources":["index.tsx"],"names":["React","memo","forwardRef","Box","usePropsResolution","useHasResponsiveProps","Progress","props","ref","min","max","value","_filledTrack","children","resolvedProps","valueWidth","now"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,GAAT;AAEA,SAASC,kBAAT;AACA,SAASC,qBAAT;AA+CA,IAAMC,QAAQ,GAAG,SAAXA,QAAQ,CAAIC,KAAD,EAAwBC,GAAxB,EAAsC;EACrD,0BAOIJ,kBAAkB,CAAC,UAAD,EAAaG,KAAb,CAR+B;IAEnDE,GADI,uBACJA,GADI;IAEJC,GAFI,uBAEJA,GAFI;IAGJC,KAHI,uBAGJA,KAHI;IAIJC,YAJI,uBAIJA,YAJI;IAKJC,QALI,uBAKJA,QALI;IAMDC,aAAAA;;EAIL,IAAIT,qBAAqB,CAACE,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EAED,IAAIQ,UAAU,GACZJ,KAAK,GAAGD,GAARC,IAAeA,KAAK,GAAGF,GAAvBE,GACK,CAACA,KAAK,GAAGF,GAAT,KAAiBC,GAAG,GAAGD,GAAvB,CAAD,GAAgC,GADpCE,GAEIA,KAAK,GAAGF,GAARE,GACA,GADAA,GAEA,CALN;EAOA,OACE,KAAA,CAAA,aAAA,CAAC,GAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EACMG,aADN,EAAA;IAEE,GAAG,EAAEN,GAFP;IAGE,UAAU,EAAA,IAHZ;IAIE,iBAAiB,EAAC,aAJpB;IAKE,kBAAkB,EAAE;MAClBC,GAAG,EAAEA,GADa;MAElBC,GAAG,EAAEA,GAFa;MAGlBM,GAAG,EAAED;IAHa;EALtB,CAAA,CAAA,EAWE,KAAA,CAAA,aAAA,CAAC,GAAD,EAAA,QAAA,CAAA;IAAK,CAAC,EAAA,EAAA,CAAA,MAAA,CAAKA,UAAL,EAAA,GAAA;EAAN,CAAA,EAA8BH,YAA9B,CAAA,EACGC,QADH,CAXF,CADF;AAiBD,CAvCD;AAyCA,eAAeZ,IAAI,CAACC,UAAU,CAACI,QAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Box } from '../../primitives';\nimport type { InterfaceBoxProps } from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { ColorSchemeType } from '../../../components/types';\nimport type {\n  CustomProps,\n  ThemeComponentSizeType,\n} from '../../../components/types';\n\nexport interface InterfaceProgressProps\n  extends InterfaceBoxProps<IProgressProps> {\n  /**\n   * Value of Progress.\n   * @default 0\n   */\n  value?: number;\n  /**\n   * Defines height of Progress\n   * @default sm\n   */\n  size?: ThemeComponentSizeType<'Progress'>;\n\n  /**\n   * The color scheme of the progress. This should be one of the color keys in the theme (e.g.\"green\", \"red\").\n   * @default primary\n   */\n  colorScheme?: ColorSchemeType;\n  // /**\n  //  * Whether progress is indeterminate\n  //  * @default false\n  //  */\n  // isIndeterminate?: boolean;\n  /**\n   * Pseudo prop to give Prop to filled track\n   */\n  _filledTrack?: InterfaceBoxProps<IProgressProps>;\n  /**\n   * Min progress value\n   * @default 0\n   */\n  min?: number;\n  /**\n   * Max progress value\n   * @default 100\n   */\n  max?: number;\n}\n\nexport type IProgressProps = InterfaceProgressProps & CustomProps<'Progress'>;\nconst Progress = (props: IProgressProps, ref?: any) => {\n  const {\n    min,\n    max,\n    value,\n    _filledTrack,\n    children,\n    ...resolvedProps\n  } = usePropsResolution('Progress', props);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  let valueWidth =\n    value < max && value > min\n      ? ((value - min) / (max - min)) * 100\n      : value > min\n      ? 100\n      : 0;\n\n  return (\n    <Box\n      {...resolvedProps}\n      ref={ref}\n      accessible\n      accessibilityRole=\"progressbar\"\n      accessibilityValue={{\n        min: min,\n        max: max,\n        now: valueWidth,\n      }}\n    >\n      <Box w={`${valueWidth}%`} {..._filledTrack}>\n        {children}\n      </Box>\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Progress));\n"]},"metadata":{},"sourceType":"module"}